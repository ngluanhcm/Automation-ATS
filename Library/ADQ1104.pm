#**************************************************************************************************#
#FEATURE                : <CallP&Services NA> 
#FEATURE ENGINEER       : <FEATURE ENGINEER NAME>
#AUTOMATION ENGINEER    : <Phuc Huynh Ngoc>
#**************************************************************************************************#

our %TESTBED;
our $TESTSUITE;

package QATEST::ADQ1104::ADQ1104;

use strict;
use Tie::File;
use File::Copy;
use Cwd qw(cwd);
use Data::Dumper;
use threads;
#********************************* LIST OF LIBRARIES***********************************************#

use ATS;
use SonusQA::Utils qw (:all);

#**************************************************************************************************#

use Log::Log4perl qw(get_logger :levels);
my $logger = Log::Log4perl->get_logger(__PACKAGE__);

##################################################################################
#  GLCAS::TEMPLATE                                                              #
##################################################################################
#  This package tests for the GL.                                                #
##################################################################################

##################################################################################
# SETUP                                                                          #
##################################################################################


# Required Testbed elements for this package

my %REQUIRED = ( 
        "C20" => [1],
        "GLCAS" => [1],
               );

################################################################################
# VARIABLES USED IN THE SUITE Defined HERE                                     #
################################################################################
our $dir = cwd;
our $user_name;
if ($dir =~ /home\/(\w\w*)\/ats_repos/ ) {
    $user_name = $1;
}

our ($sec,$min,$hour,$mday,$mon,$year,$wday, $yday,$isdst) = localtime(time);
our $datestamp = sprintf "%4d%02d%02d-%02d%02d%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;
our ($ses_core, $ses_glcas, $ses_logutil, $ses_tapi, $ses_tapi_1, $ses_calltrak, $ses_core_li, $ses_cli);
our (%input, @output, $tcid);
our %core_account = ( 
                    -username => [
                                    'testshell1','testshell2','testshell3','testshell4','testshell5',
                                    'testshell6','testshell7','testshell8','testshell9','testshell10',
                                    'testshell11','testshell12','testshell13','testshell14','testshell15',
                                    'testshell16','testshell17','testshell18','testshell19','testshell20',],
                    -password => [
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation'],
                    );

# For LI
our %core_account_li = ( 
                    -username => ['liadmin', 'x1', 'x2', 'ctri', 'vinh', 'admin', 'dtrang', 'cuong', 'vth'], 
                    -password => ['liadmin', 'x1', 'x2', 'ctri', 'vinh', 'admin', 'dtrang', 'cuong', 'vth']
                    );

# For GLCAS
our @cas_server = ('10.250.185.92', '10024');
our $sftp_user = 'gbautomation';
our $sftp_pass = '12345678x@X';
our $wait_for_event_time = 30;


my $alias_hashref = SonusQA::Utils::resolve_alias($TESTBED{"c20:1:ce0"});
our ($gwc_user) = $alias_hashref->{LOGIN}->{1}->{USERID};
our ($gwc_pwd) = $alias_hashref->{LOGIN}->{1}->{PASSWD};
our ($root_pass) = $alias_hashref->{LOGIN}->{1}->{ROOTPASSWD};

####################### Which logs need to get ########################################
our @log_type = (1, 1, 0, 0); # get logutil, pcm, tapi, calltrak respectively
our $tapilog_dir = '/home/ntthuyhuong/Tapi_hnphuc/';
# Line Info
our %db_line = (
                'GR303_1' => {
                            -line => 1,
                            -dn => 2124411039,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 39',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'GR303_2' => {
                            -line => 2,
                            -dn => 2124411040,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 40',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'GR303_3' => {
                            -line => 28,
                            -dn => 2124411035,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 35',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'GR303_4' => {
                            -line => 29,
                            -dn => 2124411058,
                            -region => 'US',
                            -len => 'AZTK   02 3 00 58',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
				'GR303_5' => {
                            -line => 30,
                            -dn => 2124411042,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 42',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                
                );
our %tc_line = (
                'ADQ1104_001' => ['GR303_1','GR303_2'],
				'ADQ1104_002' => ['GR303_1','GR303_2'],
				'ADQ1104_003' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_004' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_005' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_006' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_007' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_008' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
                'ADQ1104_009' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_010' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_011' => ['GR303_1','GR303_2'],
				'ADQ1104_012' => ['GR303_1','GR303_2'],
				'ADQ1104_013' => ['GR303_1','GR303_2'],
				'ADQ1104_014' => ['GR303_1','GR303_2'],
				'ADQ1104_015' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_016' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_017' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_018' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_019' => ['GR303_4','GR303_2', 'GR303_3'],
                'ADQ1104_020' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_021' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_022' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_023' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_024' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_025' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_026' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_027' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_028' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_029' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_030' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_031' => ['GR303_1','GR303_2','GR303_3'],
				'ADQ1104_032' => ['GR303_1','GR303_2','GR303_3'],
				'ADQ1104_033' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_037' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_038' => ['GR303_1','GR303_2'],
				'ADQ1104_039' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_040' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_041' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_042' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_043' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_044' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_045' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_046' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_047' => ['GR303_1','GR303_2','GR303_3'],
				'ADQ1104_048' => ['GR303_1','GR303_2', 'GR303_3'],
				'ADQ1104_049' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_050' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_051' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_052' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_053' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_054' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4', 'GR303_5'],
				'ADQ1104_055' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4', 'GR303_5'],
				'ADQ1104_056' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4', 'GR303_5'],
				'ADQ1104_057' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4', 'GR303_5'],
				'ADQ1104_058' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_059' => ['GR303_1','GR303_2', 'GR303_3', 'GR303_4'],
				'ADQ1104_060' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_061' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_062' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_063' => ['GR303_1','GR303_2','GR303_3','GR303_4','GR303_5'],
				'ADQ1104_064' => ['GR303_1','GR303_2','GR303_3','GR303_4','GR303_5'],
				'ADQ1104_065' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_066' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				'ADQ1104_067' => ['GR303_1','GR303_2','GR303_3','GR303_4'],
				
);

#################### Trunk info ###########################
our %db_trunk = (
                'cas' => {
                                -acc => 749,
                                -region => 'US',
                                -clli => 'G6OC3PTSIT2W',
                            },
				'sst' =>{
                                -acc => 610,
                                -region => 'US',
                                -clli => 'T15SSTIBNT2LP',
                            },
				'pri' => {
                                -acc => 200,
                                -region => 'US',
                                -clli => 'T15G9PRINT2W',
                            },		
                'isup' =>{
                                -acc => 402,
                                -region => 'US',
                                -clli => 'T15G6C7ITSTS2W',
                            },
				'isup_1' =>{
                                -acc => 750,
                                -region => 'US',
                                -clli => 'T15G6OC3C7IBNT2W',
                            },
				'isup_2' =>{
                                -acc => 913,
                                -region => 'US',
                                -clli => 'G6VZSTSC7IT2W',
                            },
                );

##################################################################################
sub configured {
    # Check configured resources match REQUIRED
    if ( SonusQA::ATSHELPER::checkRequiredConfiguration ( \%REQUIRED, \%TESTBED ) ) {
        $logger->info(__PACKAGE__ . ": Found required devices in TESTBED hash"); 
    } else {
        $logger->error(__PACKAGE__ . ": Could not find required devices in TESTBED hash"); 
        return 0;
    }  
}

sub ADQ1104_cleanup {
    my $subname = "ADQ1104_cleanup";
    $logger->debug(__PACKAGE__ ." . $subname . DESTROYING OBJECTS");
    my @end_ses = (
                    $ses_core, $ses_glcas, $ses_logutil, $ses_tapi, $ses_tapi_1, $ses_calltrak, $ses_core_li, $ses_cli
                    );
    foreach (@end_ses) {
        if (defined $_) {
            $_->DESTROY();
            undef $_;
        }
    }
    return 1;
}

sub ADQ1104_checkResult {
    my ($tcid, $result) = (@_);
    my $subname = "ADQ1104_checkResult";
    $logger->debug(__PACKAGE__ . ".$tcid: Test result : $result");
    if ($result) { 
        $logger->debug(__PACKAGE__ . ".$tcid  Test case passed ");
            SonusQA::ATSHELPER::printPassTest($tcid);
            return 1;
    } else {
        $logger->debug(__PACKAGE__ . ".$tcid  Test case failed ");
            SonusQA::ATSHELPER::printFailTest($tcid);
            return 0;
    }
}

##################################################################################
# TESTS                                                                          #
##################################################################################

our @TESTCASES = (
   					# "ADQ1104_001",
					# "ADQ1104_002",
					# "ADQ1104_003",
					# "ADQ1104_004",
					# "ADQ1104_005",
					# "ADQ1104_006",
					# "ADQ1104_007",
					# "ADQ1104_008",
					# "ADQ1104_009",
					# "ADQ1104_010",
					# "ADQ1104_011",
					# "ADQ1104_012",
					# "ADQ1104_013",
					# "ADQ1104_014",
					# "ADQ1104_015",
					# "ADQ1104_016",
					# "ADQ1104_017",
					# "ADQ1104_018",
					# "ADQ1104_019",
					# "ADQ1104_020",
					# "ADQ1104_021",
					# "ADQ1104_022",
					# "ADQ1104_023",
					# "ADQ1104_024",
					# "ADQ1104_025",
					# "ADQ1104_026",
					# "ADQ1104_027",
					# "ADQ1104_028",
					# "ADQ1104_029",
					# "ADQ1104_030",
					# "ADQ1104_031",
					# "ADQ1104_032",
					# "ADQ1104_033",
					# "ADQ1104_037",
					# "ADQ1104_038",
					# "ADQ1104_039",
					# "ADQ1104_040",
					# "ADQ1104_041",
					# "ADQ1104_042",
					# "ADQ1104_043",
					# "ADQ1104_044",
					# "ADQ1104_045",
					# "ADQ1104_046",
					# "ADQ1104_047",
					# "ADQ1104_048",
					# "ADQ1104_049",
					# "ADQ1104_050",
					# "ADQ1104_051",
					# "ADQ1104_052",
					# "ADQ1104_053",
					# "ADQ1104_054",
					# "ADQ1104_055",
					# "ADQ1104_056",
					# "ADQ1104_057",
					# "ADQ1104_058",
					# "ADQ1104_059",
					# "ADQ1104_060",
					# "ADQ1104_061",
					# "ADQ1104_062",
					# "ADQ1104_063",
					# "ADQ1104_064",
					# "ADQ1104_065",
					# "ADQ1104_066", # This tc takes long time because it relates to GWC, must book lab before runing.
				    # "ADQ1104_067",
					
                );

############################### Run Test #####################################
sub runTests {
    unless ( &configured ) {
        $logger->error(__PACKAGE__ . ": Could not configure for test suite ".__PACKAGE__); 
        return 0;
    }

    $logger->debug(__PACKAGE__ . " ======: before Opening Harness");
    my $harness;
    unless($harness = SonusQA::HARNESS->new( -suite => __PACKAGE__, -release => "$TESTSUITE->{TESTED_RELEASE}", -variant => $TESTSUITE->{TESTED_VARIANT}, -build => $TESTSUITE->{BUILD_VERSION}, -path => "ats_repos/test/setup/work")){ # Use this for real SBX Hardware.
        $logger->error(__PACKAGE__ . ": Could not create harness object");
        return 0;
    }
    $logger->debug(__PACKAGE__ . " ======: Opened Harness");  
    my @tests_to_run;

    # If an array is passed in use that. If not run every test.
    if ( @_ ) {
        @tests_to_run = @_;
    }
    else {
        @tests_to_run = @TESTCASES;
    }

    $harness->{SUBROUTINE}= 1;    
    $harness->runTestsinSuite( @tests_to_run );
}

##################################################################################
# +------------------------------------------------------------------------------+
# |                     GL CAS and ATS integration                               |
# +------------------------------------------------------------------------------+
# |            		    Suite Callp & Services - NA                              |
# +------------------------------------------------------------------------------+
# +------------------------------------------------------------------------------+

############################ Phuc Huynh Ngoc ##########################

sub ADQ1104_001 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_001");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_001";
	my $tcid = "ADQ1104_001";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

# Add name and CNAB for DN(A)
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	
	foreach ('CNAB','NAME PUBLIC PUB$dn PRIVATE PUB$dn') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
# Add CNAMD & ACRJ to line B
	
	foreach ('CNAMD NOAMA','ACRJ INACT') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line A $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[1] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $feature_added = 1;
# Get CNAB Access Code
	my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line $list_dn[0]");
		print FH "STEP: Get CNAB access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CNAB is: $cnab_code \n";
        print FH "STEP: Get CNAB access code for line A($list_dn[0]) - PASSED\n";
    }
# Get ACRJ Access Code
	my $acrj_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'ACRJA');
    unless ($acrj_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get ACRJ access code for line $list_dn[1]");
		print FH "STEP: Get ACRJ access code for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code ACRJ is: $acrj_code \n";
        print FH "STEP: Get ACRJ access code for line B($list_dn[1]) - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# B actives ACRJ
	# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
    # B hears dial tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    # $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = "\*$acrj_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num to active ACRJ - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: B dials $dialed_num to active ACRJ - PASSED\n";
    }

    # unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        # $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        # print FH "STEP: B hears confirmation tone after activating ACRJ - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: B hears confirmation tone after activating ACRJ - PASSED\n";
    # }
	sleep (1);
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
# A dials CNAB code and hear confirmation tone then recall dial tone
    # A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	sleep (1);
    # A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNAB - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNAB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNAB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNAB - PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A calls B, A hears BUSY tone
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't hear BUSY tone during calling B");
        print FH "STEP: A calls B, A hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B, A hears BUSY tone - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1104_001 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_001 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        
		unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
		
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
		my $logutil_path = $ses_logutil->{sessionLog2};
		my @logutil_out = `cat $logutil_path`;
		unless (grep /TREATMENT SET \= ACRJ/, @logutil_out){
			$logger->error(__PACKAGE__ . " $tcid: Don't have TREATMENT ACRJ");
            $result = 0;
            print FH "STEP: Check there is TREATMENT ACRJ - FAILED\n";
		} else {
			print FH "STEP: Check there is TREATMENT ACRJ - PASSED\n";
		}
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	
	# Remove NAME, CNAB from A
	unless ($feature_added) {
        foreach ('NAME', 'CNAB'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	
	# Remove ACRJ, CNAMD from B
	unless ($feature_added) {
        foreach ('ACRJ', 'CNAMD'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_002 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_002");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_002";
	my $tcid = "ADQ1104_002";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

# Add name for DN(A)
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	foreach ('CNAB','NAME PUBLIC PUB$dn PRIVATE PUB$dn') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
# Add CNAMD & ACRJ to line B
	
	foreach ('CNAMD NOAMA','ACRJ INACT') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line A $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[1] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $feature_added = 1;
# Get CNAB Access Code
	my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line $list_dn[0]");
		print FH "STEP: Get CNAB access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CNAB is: $cnab_code \n";
        print FH "STEP: Get CNAB access code for line A($list_dn[0]) - PASSED\n";
    }
# Get ACRJ Access Code
	my $acrj_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'ACRJA');
    unless ($acrj_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get ACRJ access code for line $list_dn[1]");
		print FH "STEP: Get ACRJ access code for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code ACRJ is: $acrj_code \n";
        print FH "STEP: Get ACRJ access code for line B($list_dn[1]) - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# B actives ACRJ
	# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
    # B hears dial tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    # $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = "\*$acrj_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num to active ACRJ - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num to active ACRJ - PASSED\n";
    }

    # unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        # $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        # print FH "STEP: B hears confirmation tone after activating ACRJ - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: B hears confirmation tone after activating ACRJ - PASSED\n";
    # }
	sleep (1);
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
# A dials CNAB code and hear confirmation tone then recall dial tone
    # A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
    # A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNAB - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNAB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNAB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNAB - PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A calls B, A hears BUSY tone
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't hear BUSY tone during calling B");
        print FH "STEP: A calls B, A hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B, A hears BUSY tone - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1104_002 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_002 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        
		unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
		
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
		my $logutil_path = $ses_logutil->{sessionLog2};
		my @logutil_out = `cat $logutil_path`;
		unless (grep /TREATMENT SET \= ACRJ/, @logutil_out){
			$logger->error(__PACKAGE__ . " $tcid: Don't have TREATMENT ACRJ");
            $result = 0;
            print FH "STEP: Check there is TREATMENT ACRJ - FAILED\n";
		} else {
			print FH "STEP: Check there is TREATMENT ACRJ - PASSED\n";
		}
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	
	# Remove NAME, CNAB from A
	unless ($feature_added) {
        foreach ('NAME', 'CNAB'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	
	# Remove ACRJ, CNAMD from B
	unless ($feature_added) {
        foreach ('ACRJ', 'CNAMD'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_003 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_003");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_003";
	my $tcid = "ADQ1104_003";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get

	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

# Add CNDB, CNF to line A 
    
	unless ($ses_core->callFeature(-featureName => "CNDB NOAMA CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNDB, CNF for line A-$list_dn[0]");
		print FH "STEP: Add CNDB, CNF for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CNDB, CNF for line A($list_dn[0]) - PASSED\n";
    }
    $feature_added = 1;
# Get CNDB Access Code
	my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line $list_dn[0]");
		print FH "STEP: Get CNDB access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CNDB is: $cndb_code \n";
        print FH "STEP: Get CNDB access code for line A($list_dn[0]) - PASSED\n";
    }
# Get CONF Access Code
	my $conf_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CONF');
    unless ($conf_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CONF access code for line $list_dn[0]");
		print FH "STEP: Get CONF access code for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CONF is: $conf_code \n";
        print FH "STEP: Get CONF access code for line A($list_dn[0]) - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A dials CNDB code and hear confirmation tone then recall dial tone
    # A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
    # A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNDB - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNDB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNDB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNDB - PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A calls B via SST trunk, B answers, A flashs to dial CONF acc
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
	($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through SST on TMA15: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE', "DIGITS 123_456"],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C cannnot call A ");
        print FH "STEP: A calls B via SST trunk and B answers - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B via SST trunk and B answers - PASSED\n";
    }
# A dials CONF access code to invite B join CONF
    $dialed_num = "\*$conf_code\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial CNF access code ($dialed_num) successfully");
		print FH "STEP: A ($list_dn[0]) dials CONF access code - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A ($list_dn[0]) dials CONF access code - PASSED\n";
	}
	sleep (2);
# Verify speech path between A and B again
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000,
                -cas_timADQ1086ut => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B again - PASSED\n";
    }
# A flashs again and make call to C
	# A flashs again
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash line $list_line[0]");
		print FH "STEP: A flashes again to make call to C - FAILED\n";
    } else {
		print FH "STEP: A flashes again to make call to C - PASSED\n";
		}
	
	# Make call from A to C and verify speech path, then flash again.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C ");
        print FH "STEP: A calls C - FAILED\n";
        $result = 0;   
		goto CLEANUP;
    } else {
        $logger->debug(__PACKAGE__ . " $tcid: A calls C successfully");
		print FH "STEP: A calls C - PASSED\n";
    }
# A continues to dial CONF access code to invite C join CONF
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial CONF access code ($dialed_num) successfully");
		print FH "STEP: A ($list_dn[0]) dial CONF access code to invite C join CONF- FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A ($list_dn[0]) dials CONF access code to invite C join CONF - PASSED\n";
		}
#Check speech path between A, B & C
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timADQ1086ut => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B & C");
        print FH "STEP: Check speech path between A, B & C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, B & C - PASSED\n";
	}
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1104_003 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_003 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        
		unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	if ($feature_added) {
		# Remove CNF, CNDB from A
		unless ($ses_core->callFeature(-featureName => 'CNF CNDB', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF, CNDB from line A($list_dn[0])");
            print FH "STEP: Remove CNF, CNDB from line A ($list_dn[0]) - FAILED\n";
			 $result = 0;
        } else {
            print FH "STEP: Remove CNF, CNDB from line A ($list_dn[0]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_004 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_004");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_004";
	my $tcid = "ADQ1104_004";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $cndb_code = 67;
	my $cnab_code = 40;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# # Datafill in table IBNXLA
    # unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        # $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    # }
    # if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cndb_code")) {
        # @output = $ses_core->execCmd("add FEATXLA $cndb_code FEAT N N CNDB");
        # if (grep/DMOS NOT ALLOWED/, @output) {
            # $ses_core->execCmd("y");
        # }
        # $ses_core->execCmd("y");
        # unless ($ses_core->execCmd("abort")) {
            # $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        # }
    # } else {
        # @output = $ses_core->execCmd("rep FEATXLA $cndb_code FEAT N N CNDB");
        # if (grep/DMOS NOT ALLOWED/, @output) {
            # $ses_core->execCmd("y");
        # }
        # $ses_core->execCmd("y");
        # unless ($ses_core->execCmd("abort")) {
            # $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        # }
    # }
    # unless (grep /CNDB/, $ses_core->execCmd("pos FEATXLA $cndb_code")) {
        # $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cndb_code in table IBNXLA");
        # print FH "STEP: Datafill FEATXLA $cndb_code in table IBNXLA - FAIL\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: Datafill FEATXLA $cndb_code in table IBNXLA - PASS\n";
    # }

    # unless ($ses_core->execCmd("quit")) {
        # $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    # }
	 

################## Add feature or datafill table ###########################

# Add CNDB, 3WC to line A

	unless ($ses_core->callFeature(-featureName => "cndb NOAMA 3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNDB, 3WC for line $list_dn[0]");
		print FH "STEP: add CNDB, 3WC for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNDB, 3WC for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
	
    unless(grep /CNDB/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add CNDB for line $list_dn[0] ");
        print FH "STEP: Verify add CNDB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify add CNDB for line $list_dn[0] - PASS\n";
    }
	
	 # Get CNDB code
	
   	$cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A activates CNAB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    my %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A start confirm tone - PASS\n";
    }

    $dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

   
	# A calls B
	($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
				-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and they have speech path - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and they have speech path - PASSED\n";
    }
   	
	# A flashes calls C
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C and they have speech path - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C and they have speech path - PASSED\n";
    }
    
	# Verify A,B,C have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C");
        print FH "STEP: Check speech path between A and B,C - FAIL\n";
        $result = 0;
		goto CLEANUP;
        
    } else {
        print FH "STEP: Check speech path between A and B,C - PASS\n";
    }
    

################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
   sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        if (grep /3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
	################### Remove features added ######################
	
	# Remove CNDB, 3WC from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNDB 3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNDB,3WC from line $list_dn[0]");
            print FH "STEP: Remove CNDB,3WC from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNDB,3WC from line $list_dn[0] - PASS\n";
        }
    } 
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_005 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_005");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_005";
    my $tcid = "ADQ1104_005";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
		
   # Add A, B into MADN group
   $ses_core->execCmd("servord");
   sleep(1);
   @output = $ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MADN to line $list_dn[0] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MADN to line $list_dn[0] as member - PASS\n";
    }
    $add_feature_lineA = 0;
	
	# Add B into MADN group
	@output = $ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] anct \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
   
    $add_feature_lineB = 0;
	
	
	# C has 6WC 
	 unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[2]");
		print FH "STEP: add CNF for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 0;
	# Get 6WC access code
	
   	 my $cnf_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'CONF');
    unless ($cnf_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get 6WC access code for line C $list_dn[2]");
		print FH "STEP: get 6WC access code for line C $list_dn[2] is $cnf_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get 6WC access code for line C $list_dn[2] is $cnf_code - PASS\n";
    }
	 	

# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	

   # Make C calls D, D rings and answers
   
   %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C calls D and they have no speech path ");
        print FH "STEP: C calls D and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls D and they have speech path - PASS\n";
    }

	
	# C activates 6WC with DN(D)
	sleep(2);
	 my $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: C dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials acc_code 6WC - PASS\n";
    }
	
	

	 # C flashes again
	 sleep(1);
	  %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[1]");
		print FH "STEP: C flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash again - PASS\n";
		
    }
	
	
    
	
	# C dials DN (A)
	sleep(2);
	 %input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[0],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial A successfully");
		print FH "STEP: C dials A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials A - PASS\n";
    }
	
	# Check line A rings 
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line B rings 
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
    
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# Verify A,C have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }
	
	# C flashes
	sleep(2);
	  %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash - PASS\n";
		
    }
	
	# C activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: C dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials acc_code 6WC - PASS\n";
    }
    
	# Verify A,C,D have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and C,D");
        print FH "STEP: Check speech path between A and C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C,D - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# C flashes
	  %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash - PASS\n";
		
    }
	
	# C activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: C dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials acc_code 6WC - PASS\n";
    }
	
	
	# Verify A,B,C,D have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C,D");
        print FH "STEP: Check speech path between A and B,C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B,C,D - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /CNF/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /CNF/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
   	}
     # remove MADN from line A and B
     $ses_core->execCmd("servord");
     unless ($add_feature_lineA) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] anct y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: remove line $list_dn[0] from MADN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[0] from MADN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after Deo fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
    }
	# Remove CNF from line C
	  unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[2]");
            print FH "STEP: Remove CNF from line C $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line C $list_dn[2] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_006 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_006");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_006";
	my $tcid = "ADQ1104_006";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
	
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
    $change_lcc = 1;
	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;

    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################
	# B has 6WC 
	 unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[1]");
		print FH "STEP: add CNF for line B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line B $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 0;
	# Get 6WC access code
	
   	 my $cnf_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CONF');
    unless ($cnf_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get 6WC access code for line B $list_dn[1]");
		print FH "STEP: get 6WC access code for line B $list_dn[1] is $cnf_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get 6WC access code for line B $list_dn[1] is $cnf_code - PASS\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
    # Start tapi trace for scenario 
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }

	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
   	
	# B calls C and check speech path
    
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and check speech path");
        print FH "STEP: B calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and check speech path - PASS\n";
    }
		
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	 # B flashes 
	 sleep(1);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flashes  - PASS\n";
		
    }
	
	# B activates 6WC with DN(C)
	 sleep(1);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "\*$cnf_code\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials acc_code 6WC - PASS\n";
    }	

	 # B flashes then call D
	 sleep(2);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flashes  - PASS\n";
		
    }
	
	# B dials DN (D)
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
				
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		}
		# print FH "STEP: B dials D - FAIL\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: B dials D - PASS\n";
    # }	
   
	
	# Check line D rings 
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
	
	# Verify B,D have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	# B flashes again
	
	sleep(1);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flashes  - PASS\n";
		
    }
		
	# B activates 6WC with DN(D)
	 sleep(2);
	 $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials acc_code 6WC - PASS\n";
    }	
	
	# Verify B,C,D have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C,D");
        print FH "STEP: Check speech path between B and C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C,D - PASS\n";
    }
	
	# LEA A can monitor the call between B and C,D
    %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C,D");
        print FH "STEP: LEA can monitor the call between B and C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C,D - PASS\n";
    }
	
	

################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /CNF/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /CNF/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
       
    }
    
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	# Stop calltrak
	# if ($calltrak_start){
		
		# my @calltrak_out = $ses_calltrak -> SonusQA::SST::stopCalltrak();
		# $ses_calltrak ->{conn}->prompt('/>/');
		# $ses_calltrak->execCmd("stop");
		
		# @calltrak_out = $ses_calltrak->execCmd("display merge");
		# unless (grep /Tracing: Stopped/, @calltrak_out) {
            # $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            # print FH "STEP: Stop calltrak - FAILED\n";
            # $result = 0;
        # } else {
            # print FH "STEP: Stop calltrak - PASSED\n";
        # }
	# }
	
	################### Remove features added ######################
	# Remove CNF from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[1]");
            print FH "STEP: Remove CNF from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[1] - PASS\n";
        }
    }
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_007 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_007");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_007";
	my $tcid = "ADQ1104_007";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $cndb_code = 67;
	my $cnab_code = 40;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################


	# A has 6WC 
	 unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[0]");
		print FH "STEP: add CNF for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line A $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 0;
	# Get 6WC access code
	
   	 my $cnf_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CONF');
    unless ($cnf_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get 6WC access code for line A $list_dn[0]");
		print FH "STEP: get 6WC access code for line A $list_dn[0] is $cnf_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get 6WC access code for line A $list_dn[0] is $cnf_code - PASS\n";
    }
	
	
	# B has 3WC 
	 unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[1]");
		print FH "STEP: add 3WC for line B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line B $list_dn[1] - PASS\n";
    }
	$add_feature_lineB = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# A calls B
	
	($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
				-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and they have speech path - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and they have speech path - PASSED\n";
    }
   	
	# A activates 6WC with DN(D)
	 sleep(2);
	 $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: A dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials acc_code 6WC - PASS\n";
    }	

	 # B flashes then call C
	 sleep(1);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flashes  - PASS\n";
		
    }
	
	# B calls C
	
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
				-dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C and they have speech path - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C and they have speech path - PASSED\n";
    }
	
	# Verify A,B,C have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C");
        print FH "STEP: Check speech path between A and B,C - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Check speech path between A and B,C - PASS\n";
    }

################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /3WC|CNF/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /3WC|CNF/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 1;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	################### Remove features added ######################
	# Remove CNF from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[0]");
            print FH "STEP: Remove CNF from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CNF from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[1]");
            print FH "STEP: Remove 3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[1] - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_008 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_008");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_008";
    my $tcid = "ADQ1104_008";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	
	
   # Add A, B into MADN group
   $ses_core->execCmd("servord");
   sleep(1);
   @output = $ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MADN to line $list_dn[0] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MADN to line $list_dn[0] as member - PASS\n";
    }
    $add_feature_lineA = 0;
	
	# Add B into MADN group
	@output = $ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] bldn \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
   
    $add_feature_lineB = 0;
	
	# Add feature CXR for line C
    
    unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line C $list_dn[2]");
		print FH "STEP: add CXR for line C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line C $list_dn[2] - PASS\n";
    }
	
	$add_feature_lineC = 0;	

# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	

    # Make D calls C, rings and answers
   
   %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D calls C and they have no speech path ");
        print FH "STEP: D calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls C and they have speech path - PASS\n";
    }
	
	# C dials DN(A)
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[0],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[0] successfully");
        print FH "STEP: C dials A $list_dn[0] - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: C dials A $list_dn[0] - PASS\n";
    }
	
	
	# Check line A ringing
	
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line B ringing
	
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
		print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    # Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
		print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }	
	
	# Verify A,B,C have speech path
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and C");
        print FH "STEP: Check speech path between A,B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and C - PASS\n";
    }
	
    # C flashes
	  %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash - PASS\n";
		
    }
	
	# Verify A,B,C,D have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C,D");
        print FH "STEP: Check speech path between A and B,C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B,C,D - PASS\n";
    }
	
	# Onhook line C
	
	 unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }
	
	# Verify A,B,D have speech path
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and D");
        print FH "STEP: Check speech path between A,B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and D - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 1;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
     
	 # Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 
	# remove MADN from line A and B
     $ses_core->execCmd("servord");
     unless ($add_feature_lineA) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: remove line $list_dn[0] from MADN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[0] from MADN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after Deo fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
    }

    # Remove CXR from line C
	 unless ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[2]");
            print FH "STEP: Remove CXR from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[2] - PASS\n";
        }
    } 
		
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_009 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_009");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_009";
    my $tcid = "ADQ1104_009";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    ############################## line DB #####################################
	my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    ############################## Trunk DB #####################################

   
	
    my $wait_for_event_time = 30;
    my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	
	my (@list_file_name, @callTrakLogs, %info);
    
	# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }

    # Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
		sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
	unless(grep /CXR/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add CXR for line $list_dn[0] ");
        print FH "STEP: Verify add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify add CXR for line $list_dn[0] - PASS\n";
    }
	
	$add_feature_lineA = 0;
	
	# Add 3WC to line B
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[1]");
		print FH "STEP: add 3WC for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line $list_dn[1] - PASS\n";
    }
	
	
	
    $add_feature_lineB = 0;
	
	

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

# Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             ); 
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
	
	}
	# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow

    # start PCM trace

   if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   # Make A calls C, C rings and answers
   
   %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path - PASS\n";
    }
    sleep(2);
	# A hears recall dials tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	

	
	# A dials DN (B)
	sleep(1);
	 %input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial B successfully");
		print FH "STEP: A dials B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B - PASS\n";
    }
	
	# Check line B rings 
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Onhook A
	sleep(2);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B dials DN (D)
	sleep(2);
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial D successfully");
		print FH "STEP: B dials D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials D - PASS\n";
    }
	
	# Check line D rings 
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# Verify speech path between B and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# Verify speech path between B,C and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B,C and D");
        print FH "STEP: Check speech path between B,C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B,C and D - PASS\n";
    }
	
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /3WC|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /3WC|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
       
    }
	
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	
	  # Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
     # Remove CXR from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    } 
	
	 # Remove 3WC from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[1]");
            print FH "STEP: Remove 3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[1] - PASS\n";
        }
    } 
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_010 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_010");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_010";
	my $tcid = "ADQ1104_010";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
################## Add feature or datafill table ###########################
# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
# Add CWT to line B
	
	unless ($ses_core->callFeature(-featureName => "CWT CWI", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CWT for line $list_dn[1]");
		print FH "STEP: add CWT for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CWT for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
   # Make A calls C, C rings and answers
   
   %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path - PASS\n";
    }
	
	# Make B calls D, D rings and answers
   
   %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls D and they have no speech path ");
        print FH "STEP: B calls D and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls D and they have speech path - PASS\n";
    }
	
	 # A flashes again and calls B
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[0]");
		print FH "STEP: A flash again - FAIL\n";
        $result = 0;
      goto CLEANUP;
    } else {
        print FH "STEP: A flash again - PASS\n";
    }
	
	# A hears dials tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	
    # A dials DN (B)

	 %input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial B successfully");
		print FH "STEP: A dials B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B - PASS\n";
    }
   
    # Check line B hears CWT tone
	
	%input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and B hears Call waiting tone");
        print FH "STEP: A calls B and B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and B hears Call waiting tone - PASS\n";
    }
   
	# Onhook line A 
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# Onhook line B
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	sleep(3);
	
	# Check line B rerings 
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify B,D have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }

################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /CWI|CWT|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /CWI|CWT|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    # my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	################### Remove features added ######################
	# Remove CXR from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    } 
	
	 # Remove CWT from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CWT CWI', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CWT from line $list_dn[1]");
            print FH "STEP: Remove CWT from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CWT from line $list_dn[1] - PASS\n";
        }
    } 
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_011 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_011");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_011";
    my $tcid = "ADQ1104_011";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	################## Add feature or datafill table ###########################
    # Add DDN to line A
	unless ($ses_core->callFeature(-featureName => "DDN NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DDN for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
    # Add CND to line B
	
	unless ($ses_core->callFeature(-featureName => "CND NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CND for line $list_dn[1]");
		print FH "STEP: add CND for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CND for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;	

   # # Datafill in table CUSTNTWK
    unless (grep/CUSTNTWK/, $ses_core->execCmd("table CUSTNTWK")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTNTWK'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        @output = $ses_core->execCmd("add NY_PUB PUBLIC 10 PUBLIC NRXLA 8 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep NY_PUB PUBLIC 10 PUBLIC NRXLA 8 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+ 
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /NRXLA\s+8/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill NRXLA 8 in table CUSTNTWK");
        print FH "STEP: Datafill NRXLA 8 in table CUSTNTWK - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill NRXLA 8 in table CUSTNTWK - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
	
	# Check REVXLVER DDN DN(A) DN(B) b
	my @revxlver;
	my ($dn) = ($list_dn[1] =~ /\d{2}(\d+)/);
	
	unless (grep /$dn/,@revxlver = $ses_core->execCmd ("revxlver ddn $list_dn[0] $list_dn[1] b")) {
		$logger->error(__PACKAGE__ . " $tcid: Can't enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b'");
		print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - PASSED\n";
    }
	
	#################################################################
   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
    # Make a call from line A to line B use *cnab_num
    	
	 %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
  
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	
	# Remove DDN from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DDN', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DDN from line $list_dn[0]");
            print FH "STEP: Remove DDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DDN from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CND from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CND', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CND from line $list_dn[1]");
            print FH "STEP: Remove CND from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CND from line $list_dn[1] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_012 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_012");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_012";
    my $tcid = "ADQ1104_012";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	################## Add feature or datafill table ###########################
    # Add DDN to line A
	unless ($ses_core->callFeature(-featureName => "DDN NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DDN for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
    # Add CND to line B
	
	unless ($ses_core->callFeature(-featureName => "CND NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CND for line $list_dn[1]");
		print FH "STEP: add CND for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CND for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;	

   # # Datafill in table CUSTNTWK
    unless (grep/CUSTNTWK/, $ses_core->execCmd("table CUSTNTWK")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTNTWK'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        @output = $ses_core->execCmd("add NY_PUB PUBLIC 10 PUBLIC NRXLA 3 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep NY_PUB PUBLIC 10 PUBLIC NRXLA 3 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+ 
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /NRXLA\s+3/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill NRXLA 3 in table CUSTNTWK");
        print FH "STEP: Datafill NRXLA 3 in table CUSTNTWK - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill NRXLA 3 in table CUSTNTWK - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
	
	# Check REVXLVER DDN DN(A) DN(B) b
	my @revxlver;
	my ($dn) = ($list_dn[1] =~ /\d{7}(\d+)/);
	unless (grep /$dn/,@revxlver = $ses_core->execCmd ("revxlver ddn $list_dn[0] $list_dn[1] b")) {
		$logger->error(__PACKAGE__ . " $tcid: Can't enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b'");
		print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - PASSED\n";
    }
	
	#################################################################
   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
    # Make a call from line A to line B use *cnab_num
    	
	 %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
  
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	
	# Remove DDN from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DDN', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DDN from line $list_dn[0]");
            print FH "STEP: Remove DDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DDN from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CND from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CND', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CND from line $list_dn[1]");
            print FH "STEP: Remove CND from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CND from line $list_dn[1] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_013 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_013");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_013";
    my $tcid = "ADQ1104_013";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
    
	
	# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	################## Add feature or datafill table ###########################
    # Add DDN to line A
	unless ($ses_core->callFeature(-featureName => "DDN NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DDN for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
    # Add CND to line B
	
	unless ($ses_core->callFeature(-featureName => "CND NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CND for line $list_dn[1]");
		print FH "STEP: add CND for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CND for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;	
  
   
   # # Datafill in table CUSTNTWK
    unless (grep/CUSTNTWK/, $ses_core->execCmd("table CUSTNTWK")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTNTWK'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        @output = $ses_core->execCmd("add NY_PUB PUBLIC 10 PUBLIC NRXLA 10 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID \+
OFFNET ECM TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        
		$ses_core->{conn}->prompt($ses_core->{'/MACHINES|WARNING|TUPLE REPLACED/'});
        if ($ses_core->execCmd("rep NY_PUB PUBLIC 10 PUBLIC NRXLA 10 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID \+
OFFNET ECM TCAPNM LOCAL \$")) {
		    sleep(1);			
			print FH "STEP:  rep tuble - PASS\n";	
		} 
		else {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot  rep tuble");
			print FH "STEP:  rep tuble - FAIL\n";
			$result = 0;
			goto CLEANUP;
        }
		if ($ses_core->execCmd("y")) {		  
			print FH "STEP: CONFIRM rep tuble - PASS\n";			
			
		} else {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot CONFIRM rep tuble");
			print FH "STEP: CONFIRM rep tuble - FAIL\n";
			$result = 0;
			goto CLEANUP;
        }
		sleep(1);
		if ($ses_core->execCmd("y")) {		   
			print FH "STEP: CONFIRM rep tuble - PASS\n";
			
		} else {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot CONFIRM rep tuble");
			print FH "STEP: CONFIRM rep tuble - FAIL\n";
			$result = 0;
			goto CLEANUP;
        }
	unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /NRXLA\s+10/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill NRXLA 10 in table CUSTNTWK");
        print FH "STEP: Datafill NRXLA 10 in table CUSTNTWK - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill NRXLA 10 in table CUSTNTWK - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
	
	
	# Check REVXLVER DDN DN(A) DN(B) b
	my @revxlver;
	my ($dn) = ($list_dn[1]);
	unless (grep /$dn/,@revxlver = $ses_core->execCmd ("revxlver ddn $list_dn[0] $list_dn[1] b")) {
		$logger->error(__PACKAGE__ . " $tcid: Can't enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b'");
		print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - PASSED\n";
    }
	
	#################################################################
   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
    # Make a call from line A to line B use *cnab_num
    my ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;	
	 %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
  
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
       
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	
	# Remove DDN from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DDN', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DDN from line $list_dn[0]");
            print FH "STEP: Remove DDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DDN from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CND from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CND', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CND from line $list_dn[1]");
            print FH "STEP: Remove CND from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CND from line $list_dn[1] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_014 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_014");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1104_014";
    my $tcid = "ADQ1104_014";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
    
	
	# Which logs need to get
	
#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil- FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	################## Add feature or datafill table ###########################
    # Add DDN to line A
	unless ($ses_core->callFeature(-featureName => "DDN NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DDN for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
    # Add CND to line B
	
	unless ($ses_core->callFeature(-featureName => "CND NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CND for line $list_dn[1]");
		print FH "STEP: add CND for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CND for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;	

   # # Datafill in table CUSTNTWK
    unless (grep/CUSTNTWK/, $ses_core->execCmd("table CUSTNTWK")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTNTWK'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        @output = $ses_core->execCmd("add NY_PUB PUBLIC 10 PUBLIC NRXLA 7 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep NY_PUB PUBLIC 10 PUBLIC NRXLA 7 \$ NTWKRAG 60 5 3 5 6 6 OFFNET CLID OFFNET ECM \+ 
		TCAPNM LOCAL \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /NRXLA\s+7/, $ses_core->execCmd("pos NY_PUB PUBLIC")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill NRXLA 7 in table CUSTNTWK");
        print FH "STEP: Datafill NRXLA 7 in table CUSTNTWK - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill NRXLA 7 in table CUSTNTWK - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
	
	# Check REVXLVER DDN DN(A) DN(B) b
	my @revxlver;
	my ($dn) = ($list_dn[1] =~ /\d{3}(\d+)/);
	unless (grep /$dn/,@revxlver = $ses_core->execCmd ("revxlver ddn $list_dn[0] $list_dn[1] b")) {
		$logger->error(__PACKAGE__ . " $tcid: Can't enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b'");
		print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] via $dn' - PASSED\n";
    }
	
	#################################################################
   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
    %input = (
                -username => [$core_account{-username}[1],$core_account{-username}[2]], 
                -password => [$core_account{-password}[1],$core_account{-password}[2]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
	
    $logutil_start = 0;
    }

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
    # Make a call from line A to line B use *cnab_num	
	my ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;	
	
	 %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
  
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DDN|CND/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	
	# Remove DDN from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DDN', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DDN from line $list_dn[0]");
            print FH "STEP: Remove DDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DDN from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CND from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CND', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CND from line $list_dn[1]");
            print FH "STEP: Remove CND from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CND from line $list_dn[1] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_015 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_015");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_015";
	my $tcid = "ADQ1104_015";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
	
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# Change LCC of LEA into 1FR (Line C)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[2], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA C into 1FR (Line $list_dn[2]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA C into 1FR (Line $list_dn[2]) - PASS\n";
    }
    $change_lcc = 1;
	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;

    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[2] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################


	# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
	$add_feature_lineA = 0;
	
	# Add PRK  to line B
   
    unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[1]");
		print FH "STEP: add PRK for line B $list_dn[1]  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line B $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 0;
	
	 unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
	
	 my $prk_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'PRKS');
    unless ($prk_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRK access code for line $list_dn[1]");
		print FH "STEP: get PRK access code for line $list_dn[1] is $prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get PRK access code for line $list_dn[1] is $prk_acc - PASS\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line C ringing
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C does not ring");
        print FH "STEP: Check line C ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ring - PASS\n";
    }
    # Offhook line C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
   	
	# A calls B and check speech path
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }
	
	
	# LEA C can monitor the call between A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B");
        print FH "STEP: LEA can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and B - PASS\n";
    }
	
	 # A flashes 
	 sleep(1);
	  %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flashes  - PASS\n";
		
    }
	
	# A calls D, D rings and anwers
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] successfully");
		print FH "STEP: A dials D  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials D  - PASS\n";
    }
	
	# Check line D ringing
	
		 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }
	
	# Onhook line A
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
		
	
	# Verify B,D have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	# B flashes 
	 sleep(1);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flashes  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flashes  - PASS\n";
		
    }
	
	# B dials acc_code PRK
	 sleep(2);
	 $dialed_num = "\*$prk_acc";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials acc_code call PRK - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials acc_code call PRK - PASS\n";
    }	
	
    # Onhook line B
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	sleep(15);
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
		print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
	
	# Verify B,D have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	# LEA C can monitor the call between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and D");
        print FH "STEP: LEA can monitor the call between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and D - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /PRK|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /PRK|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	################### Remove features added ######################
	# Remove PRK from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[1]");
            print FH "STEP: Remove PRK from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[1] - PASS\n";
        }
    }
	
	
	# Remove CXR from line A
	
	unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    }
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[2], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[2]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_016 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_016");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_016";
	my $tcid = "ADQ1104_016";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

# Add MADN to line A with Pilot A
	
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn mca y y $list_dn[0] \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn mca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	# C is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[2] mdn mca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[2]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[2] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[2] as member - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls its, B answers
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call its");
        print FH "STEP: A calls its, B answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls its, B answers - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
# A calls its, C answers
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call its");
        print FH "STEP: A calls its, C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls its, C answers - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_016 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_016 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	if ($feature_added) {
		unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
		}
		#out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
			
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		#out LENGTH of C from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line C ($list_dn[2]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line C ($list_dn[2]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		# new line C again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2]");
            print FH "STEP: NEW line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASSED\n";
        }
		
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_017 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_017");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_017";
	my $tcid = "ADQ1104_017";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFB to line C
	unless ($ses_core->callFeature(-featureName => "CFB P", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFB for line $list_dn[2]");
		print FH "STEP: Add CFB for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFB for line C($list_dn[2]) - PASSED\n";
    }
# Active CFB to forward to A
	unless ($ses_core->execCmd ("changecfx $list_len[2] CFB $list_dn[0] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFB for line $list_dn[2]");
		print FH "STEP: Active CFB for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFB for line C($list_dn[2]) - PASSED\n";
    }
# Add MADN to line A with Pilot A
	
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn mca y y $list_dn[0] \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn mca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Off-hook C to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
	sleep (1);
# Check C is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
# A calls C, C's busy and B answers
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C, C's busy and B answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C, C's busy and B answers - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_017 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_017 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	if ($feature_added) {
		unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
		}
		#out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		# Remove CFB from C
		unless ($ses_core->callFeature(-featureName => 'CFB', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line $list_dn[2]");
            print FH "STEP: Remove CFB from line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: Remove CFB from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_018 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_018");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_018";
	my $tcid = "ADQ1104_018";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: Add CXR for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line A($list_dn[0]) - PASSED\n";
    }
# Add MADN to line A with Pilot A
	
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn mca y y $list_dn[0] \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn mca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# C calls A
    
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call A");
        print FH "STEP: C calls A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls A - PASSED\n";
    }
# Detect B also rings
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B also ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B also ringing - PASSED\n";
    }
# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# Verify speech path between A&C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,C");
        print FH "STEP: Verify speech path between A and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C - PASSED\n";
    }
# A flashs
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flashs - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flashs - PASSED\n";
    }
	sleep (1);
# A calls its, B doesn't answer
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call to its");
        print FH "STEP: A calls to its and B doesn't answer - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls to its and B doesn't answer - PASSED\n";
    }
# Detect C hears ringback tone
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASSED\n";
    }
# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# Verify speech path between B and C
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B,C");
        print FH "STEP: Verify speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_018 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_018 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	if ($feature_added) {
		unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
		}
		#out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		# Remove CXR from A
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_019 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_019");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_019";
	my $tcid = "ADQ1104_019";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CHD to line A
	unless ($ses_core->callFeature(-featureName => "CHD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CHD for line $list_dn[0]");
		print FH "STEP: Add CHD for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CHD for line A($list_dn[0]) - PASSED\n";
    }
# Add MADN to line A with Pilot A
 
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
    $feature_added = 1;
# Get CHD Access Code
	my $chd_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CHD');
    unless ($chd_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CHD access code for line $list_dn[0]");
		print FH "STEP: Get CHD access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CHD is: $chd_code \n";
        print FH "STEP: Get CHD access code for line A($list_dn[0]) - PASSED\n";
    }
# Datafill the table AUDIO
	unless($ses_core->execCmd("table AUDIO")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CHD")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CHD RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CHD'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CHD RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CHD'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /RINGING/, $ses_core->execCmd("pos AUDIO1 CHD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CHD in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CHD in table AUDIO - PASS\n";
    }
	
# Datafill the table custstn
	unless($ses_core->execCmd("table custstn")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table custstn");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB CHD CHD")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB CHD CHD AUDIO1 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB CHD CHD'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB CHD CHD AUDIO1 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB CHD CHD'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /AUDIO1/, $ses_core->execCmd("pos NY_PUB CHD CHD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos NY_PUB CHD CHD in table custstn - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos NY_PUB CHD CHD in table custstn - PASS\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls B, B answers, A flashs
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
	sleep (2);
# A dials CHD code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$chd_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CHD - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num to active CHD - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CHD - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CHD - PASSED\n";
    }
	sleep (2);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone before calling to C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone before calling to C - PASSED\n";
    }
# A calls C
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C - PASSED\n";
    }
# Verify B is still hearing ringback tone during A&C talking
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASSED\n";
    }
# Onhook A and C
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# Detect A will ring again after a few minutes
	sleep(4);
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing again - PASSED\n";
    }
# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A again - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A again - PASSED\n";
    }
# Verify speech path between A & B again
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B again - PASSED\n";
    }
################################## Cleanup ADQ1104_019 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_019 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################	
	if ($feature_added) {
		unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
		}
		# Remove MADN from line A
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# Remove CHD from A
		unless ($ses_core->callFeature(-featureName => 'CHD', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CHD from line $list_dn[0]");
            print FH "STEP: Remove CHD from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove CHD from line $list_dn[0] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_020 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_020");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_020";
	my $tcid = "ADQ1104_020";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add MADN to line A with Pilot A
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
   
# Add 3WC for line C
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line C-$list_dn[2]");
		print FH "STEP: Add 3WC for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line C($list_dn[2]) - PASSED\n";
    }
	 $feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# C calls D, D answers, C flashs
    
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call D");
        print FH "STEP: C calls D - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls D - PASSED\n";
    }

# C calls A, C flashs again to initiate the conference
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: C calls A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls A - PASSED\n";
    }
# Verify B also rings
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# Because C and D hear ringback tone, checking speech path between C&D is noised that makes tc failed, so we have to skip this step
# # Verify speech path between C and D again
	# %input = (
                # -list_port => [$list_line[2],$list_line[3]], 
                # -checking_type => ['TESTTONE'], 
                # -tone_duration => 1000, 
                # -cas_timeout => 50000
             # );
    # unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between C and D");
        # print FH "STEP: Verify speech path between C and D again - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: Verify speech path between C and D again - PASSED\n";
    # }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# Verify speech path A,B,C and D
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C and D");
        print FH "STEP: Verify speech path between A, B, C and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C and D - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_020 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_020 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove MADN from line A and B
	if ($feature_added) {
        #out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		# remove 3WC from C
		unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[2]");
            print FH "STEP: Remove 3WC from line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[2] - PASSED\n";
			}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_021 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_021");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_021";
	my $tcid = "ADQ1104_021";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add MADN to line A with Pilot A
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
   
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls C, C doesn't answer
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C - PASSED\n";
    }
# B off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# Verify B also hears ringback tone
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
	unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_line[1] ");
        print FH "STEP: B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASSED\n";
    }
# C off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# Verify speech path A,B,C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_021 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_021 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove MADN from line A and B
	if ($feature_added) {
        #out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_022 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_022");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_022";
	my $tcid = "ADQ1104_022";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my (@list_file_name, $dialed_num,  %info);
	   
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
		sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################


	# Add B, C into MADN group
   $ses_core->execCmd("servord");
   sleep(1);
   @output = $ses_core->execCmd("ado \$ $list_dn[1] mdn sca y y $list_dn[1] tone y 6 y nonprivate \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[1]' ");
        print FH "STEP: add MADN to line $list_dn[1] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MADN to line $list_dn[1] as member - PASS\n";
    }
    $add_feature_lineB = 0;
	
	# Add C into MADN group
	@output = $ses_core->execCmd("ado \$ $list_dn[2] mdn sca n y $list_dn[1] bldn \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
	
	 $add_feature_lineC = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
   	
	# A calls B and check speech path
    
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
        print FH "STEP: E dials B  - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: E dials B  - PASSED\n";
    }
	
	# Check line B ringing
	
	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line C ringing
	
	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
		print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
	
	# Verify A,B have speech path 
	
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between E and B");
        print FH "STEP: Check speech path between E and B - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Check speech path between E and B - PASS\n";
    }
		
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /MADN/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /MADN/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }       
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	################### Remove features added ######################
	# remove MADN from line B and C
	
    $ses_core->execCmd("servord");
    unless ($add_feature_lineB) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[1] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[1] from MADN group");
            print FH "STEP: remove line $list_dn[1] from MADN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[1] from MADN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[1] mdn $list_dn[1] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after Deo fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[1] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2] ");
            print FH "STEP: NEW line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASS\n";
        }
    }
	

	################################################################
	
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_023 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_023");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_023";
	my $tcid = "ADQ1104_023";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len},$db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
   	
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /FLASHONLY/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY - PASS\n";
    }
   
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls meetme via ISUP trunk
    
   my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through ISUP on TMA15: $dialed_num\n";
# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A($list_dn[0]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A($list_dn[0]) - PASSED\n";
    }
	
# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: A dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $dialed_num - PASSED\n";
	}
	sleep (2);
# Detect ringback tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# B calls meetme via PRI trunk
	$trunk_access_code = $db_trunk{'pri'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through PRI on TMA15: $dialed_num\n";
# B off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# B hears dial tone.
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
  
# B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: B dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF $dialed_num - PASSED\n";
	}
	sleep (7);
# Verify speech path between A and B
	%input = (
                -list_port => [$list_line[0], $list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B");
        print FH "STEP: Verify speech path between A, B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B - PASSED\n";
    }
# C calls meetme via SST trunk
	$trunk_access_code = $db_trunk{'sst'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through SST on TMA15: $dialed_num\n";
# C off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 2000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: C dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF $dialed_num - PASSED\n";
	}
	sleep (2);
# Verify speech path A,B,C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C - PASSED\n";
    }
# D calls meetme via CAS trunk
	$trunk_access_code = $db_trunk{'cas'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through CAS on TMA15: $dialed_num\n";
# D off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
# D hears dial tone.
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[3]");
        print FH "STEP: D hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASSED\n";
    }
  
# D dials MMCONF number
	
	%input = (
                -line_port => $list_line[3],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: D dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials MMCONF $dialed_num - PASSED\n";
	}
	sleep (2);
# Verify speech path A,B,C, D
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C, D");
        print FH "STEP: Verify speech path between A, B, C, D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C, D - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_023 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_023 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /conftn\/enter/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message conftn\/enter on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message conftn\/enter on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# # Remove MADN from line A and B
	# if ($feature_added) {
        # #out LENGTH of B from MADN firstly
		# if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            # unless($ses_core->execCmd("abort")) {
                # $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            # }
            # $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            # print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        # } else {
            # print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        # }
		# # delete MDN from A
        # if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            # unless($ses_core->execCmd("abort")) {
                # $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            # }
            # print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        # } else {
            # print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        # }
		# # new line B again to run the next tc
		# if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            # unless($ses_core->execCmd("abort")) {
                # $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            # }
            # $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            # print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        # } else {
            # print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        # }
		
    # }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_024 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_024");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_024";
	my $tcid = "ADQ1104_024";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len},$db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
   
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 CODEADDON \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 CODEADDON \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /CODEADDON/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 CODEADDON  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 CODEADDON - PASS\n";
    }
   
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A($list_dn[0]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A($list_dn[0]) - PASSED\n";
    }
# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: A dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $meetme_num - PASSED\n";
	}
# Detect ringback tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }

# B off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# B hears dial tone.
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
  
# B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: B dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (7);
# Verify speech path between A and B
	%input = (
                -list_port => [$list_line[0], $list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B");
        print FH "STEP: Verify speech path between A, B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B - PASSED\n";
    }

# C off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 2000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: C dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (2);
# Verify speech path A,B,C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C - PASSED\n";
    }
# A locks  the conference, verify speech path A,B,C again, D joins conference and hear busy tone.
	# Get MMLK access code from IBNXLA table
	my $mmlk_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'MMLK');
    unless ($mmlk_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get MMLK access code for line $list_dn[0]");
		print FH "STEP: Get MMLK access code - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code MMLK is: $mmlk_code \n";
        print FH "STEP: Get MMLK access code - PASSED\n";
    }
	# Get MMUL access code
	my $mmul_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'MMUL');
    unless ($mmul_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get MMUL access code for line $list_dn[0]");
		print FH "STEP: Get MMUL access code - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code MMUL is: $mmul_code \n";
        print FH "STEP: Get MMUL access code - PASSED\n";
    }
	# A flashs to dial MMLK number to lock conference
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash line $list_line[0]");
		print FH "STEP: A flashes to dial MMLK - FAILED\n";
    } else {
		print FH "STEP: A flashes to dial MMLK - PASSED\n";
	}
	sleep (2);
	# A dials MMLK
	$dialed_num = "\*$mmlk_code\#";
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial MMLK access code ($dialed_num)");
		print FH "STEP: A ($list_dn[0]) dials MMLK access code to lock CONF- FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A ($list_dn[0]) dials MMLK access code to lock CONF - PASSED\n";
	}
	# Verify speech path A,B,C again
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C again");
        print FH "STEP: Verify speech path between A, B, C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C again - PASSED\n";
    }

# D off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
# D hears dial tone.
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[3]");
        print FH "STEP: D hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASSED\n";
    }
  
# D dials MMCONF number
	
	%input = (
                -line_port => $list_line[3],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: D dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials MMCONF $meetme_num - PASSED\n";
	}
# Verify D hears busy tone
	%input = (
                -line_port => $list_line[3], 
                -busy_tone_duration => 2000, 
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                ); 
    unless ($ses_glcas->detectBusyToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot detect busy tone on line D");
        print FH "STEP: Verify D hears BSY tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify D hears BSY tone - PASSED\n";
    }
# D on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line D - PASSED\n";
    }
# A flashs and dials MMUL
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash line $list_line[0]");
		print FH "STEP: A flashes to dial MMUL - FAILED\n";
    } else {
		print FH "STEP: A flashes to dial MMUL - PASSED\n";
	}
	sleep (2);
	# A dials MMUL
	$dialed_num = "\*$mmul_code\#";
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial MMUL access code ($dialed_num)");
		print FH "STEP: A ($list_dn[0]) dials MMUL access code to lock CONF- FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A ($list_dn[0]) dials MMUL access code to lock CONF - PASSED\n";
	}
# D off-hooks to rejoin CONF
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D to rejoin CONF- FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D to rejoin CONF - PASSED\n";
    }
# D hears dial tone.
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[3]");
        print FH "STEP: D hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASSED\n";
    }
  
# D dials MMCONF number
	
	%input = (
                -line_port => $list_line[3],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: D dials MMCONF $meetme_num to rejoin CONF - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials MMCONF $meetme_num to rejoin CONF - PASSED\n";
	}
# Verify speech path A,B,C, D
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C, D");
        print FH "STEP: Verify speech path between A, B, C, D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C, D - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_024 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_024 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /conftn\/enter/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message conftn\/enter on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message conftn\/enter on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_025 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_025");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_025";
	my $tcid = "ADQ1104_025";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /FLASHONLY/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY - PASS\n";
    }
# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: Add CXR for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls meetme via SST trunk
    
   my $trunk_access_code = $db_trunk{'sst'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through SST on TMA15: $dialed_num\n";
# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A($list_dn[0]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A($list_dn[0]) - PASSED\n";
    }
# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: A dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $dialed_num - PASSED\n";
	}
# Detect ringback tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# B calls meetme
# B off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# B hears dial tone.
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
  
# B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: B dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (7);
# Verify speech path between A and B
	%input = (
                -list_port => [$list_line[0], $list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B");
        print FH "STEP: Verify speech path between A, B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B - PASSED\n";
    }
# A flashs
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash line $list_line[0]");
		print FH "STEP: A flashes to call C - FAILED\n";
    } else {
		print FH "STEP: A flashes to call C - PASSED\n";
	}
	sleep (1);
# A calls C, C doesn't answer, A on-hooks to blind transfer
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C, C doesn't answer, A on-hooks to blind transfer - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C, C doesn't answer, A on-hooks to blind transfer - PASSED\n";
    }
# Detect ringback tone on B
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASSED\n";
    }

# C off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# Verify speech path B,C
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B, C");
        print FH "STEP: Verify speech path between B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B, C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_025 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_025 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /conftn\/enter/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message conftn\/enter on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message conftn\/enter on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	if ($feature_added) {
		# Remove CXR from A
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_026 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_026");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_026";
	my $tcid = "ADQ1104_026";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
    
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /FLASHONLY/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY - PASS\n";
    }
# Add 3WC to line A
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[0]");
		print FH "STEP: Add 3WC for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls meetme via PRI trunk
    
   my $trunk_access_code = $db_trunk{'pri'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through PRI on TMA15: $dialed_num\n";
# A calls B, B answers and A flashs
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }

# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: A dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $dialed_num - PASSED\n";
	}
	
# # Detect ringback tone on A
    # %input = (
                # -line_port => $list_line[0],
                # -ring_count => 1,
                # -cas_timeout => 50000,
                # -wait_for_event_time => $wait_for_event_time,
                # );
    # unless ($ses_glcas->detectRingbackToneCAS(%input)){
        # $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        # print FH "STEP: A hears ringback tone - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: A hears ringback tone - PASSED\n";
    # }
# C calls meetme
# C off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: C dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (7);
# Verify speech path between A and C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, C");
        print FH "STEP: Verify speech path between A, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, C - PASSED\n";
    }
# A flashs again to invite B and C join CONF
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash line $list_line[0]");
		print FH "STEP: A flashes to invite B and C join CONF - FAILED\n";
    } else {
		print FH "STEP: A flashes to invite B and C join CONF - PASSED\n";
	}
	sleep (1);
# Verify speech path between A, B, C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C - PASSED\n";
    }
# A on-hooks to leave CONF
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# Verify speech path B,C
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B, C");
        print FH "STEP: Verify speech path between B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B, C - PASSED\n";
    }
# A off-hooks to rejoin CONF via PRI trunk
# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A($list_dn[0]) to rejoin CONF - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A($list_dn[0]) to rejoin CONF - PASSED\n";
    }
# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: A dials MMCONF $dialed_num to rejoin CONF - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $dialed_num to rejoin CONF - PASSED\n";
	}
	sleep(5);
# Verify speech path A,B,C again
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C again - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_026 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_026 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /conftn\/enter/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message conftn\/enter on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message conftn\/enter on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	if ($feature_added) {
		# Remove 3WC from A
		unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[0]");
            print FH "STEP: Remove 3WC from line $list_dn[0] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[0] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_027 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_027");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_027";
	my $tcid = "ADQ1104_027";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /FLASHONLY/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY - PASS\n";
    }
# Add MADN to line A with Pilot A
	# A is pilot
	unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }
	# B is member of MADN group
	unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls meetme via SST trunk
    
   my $trunk_access_code = $db_trunk{'sst'}{-acc};
	($dialed_num) = ($meetme_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through SST on TMA15: $dialed_num\n";
	
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A($list_dn[0]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A($list_dn[0]) - PASSED\n";
    }
	# A hears dial tone.
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $dialed_num");
		print FH "STEP: A dials MMCONF $dialed_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF $dialed_num - PASSED\n";
	}
# Detect ringback tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# C calls meetme
# C off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: C dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (7);
# Verify speech path between A and C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, C");
        print FH "STEP: Verify speech path between A, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, C - PASSED\n";
    }
# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B to join Meetme conf - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B to join Meetme conf - PASSED\n";
    }
# Verify speech path between A, B, C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A, B, C");
        print FH "STEP: Verify speech path between A, B, C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B, C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_027 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_027 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MDN/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /conftn\/enter/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message conftn\/enter on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message conftn\/enter on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove MADN from line A and B
	if ($feature_added) {
        #out LENGTH of B from MADN firstly
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B ($list_dn[1]) from MADN group - PASSED\n";
        }
		# delete MDN from A
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		# new line B again to run the next tc
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_028 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_028");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_028";
	my $tcid = "ADQ1104_028";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add PRK to line A
	unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: Add PRK for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add PRK for line A($list_dn[0]) - PASSED\n";
    }
# Add CFD to line B
	unless ($ses_core->callFeature(-featureName => "CFD P", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[1]");
		print FH "STEP: Add CFD for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFD for line B($list_dn[1]) - PASSED\n";
    }
# Active CFD to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[1] CFD $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFD for line $list_dn[1]");
		print FH "STEP: Active CFD for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFD for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table AUDIO
	# Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /SILENCE/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
# Datafill the table custstn
	unless($ses_core->execCmd("table custstn")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table custstn");
	}
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /CPARK/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - PASS\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get PRK Acctive Code
	my $prk_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'PRKS');
    unless ($prk_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRKS access code for line $list_dn[0]");
		print FH "STEP: Get PRKS access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code PRKS is: $prk_code \n";
        print FH "STEP: Get PRKS access code for line A($list_dn[0]) - PASSED\n";
    }
# A calls B, B doesn't answer
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
# Detect C rings after timeout of CFD
	
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    
	for (my $i = 0; $i <= 10; $i++){
		unless ($ses_glcas->detectRingingSignalCAS(%input)) {
			print FH "Waiting for line C ringing \n";
			sleep (2);
		} else {
			print FH "STEP: Check line C ringing - PASSED\n";
			last;
		}
	}
# C off-hooks
		unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }

# Verify speech path A and C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,C");
        print FH "STEP: Verify speech path between A and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C - PASSED\n";
    }
# A flashs
	%input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flashs - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flashs - PASSED\n";
    }
	sleep (1);
# A dials PRKS 
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
	# A dials PRK acc
	$dialed_num = "\*$prk_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active PRK - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num to active PRK - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating PRK - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating PRK - PASSED\n";
    }
	sleep (1);
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# Verify C hear silent tone during A parks the call
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: Verify C hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify C hears ringback tone - PASSED\n";
    }
	sleep(12); # the time out is configed above

# Check A rings again after time out 
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing agin - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing again - PASSED\n";
    }
# Check C hears ringback tone again
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hear ringback tone again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear ringback tone again - PASSED\n";
    }
# A off-hooks again
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# Check speed path between A and C
	%input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and C");
        print FH "STEP: Verify speech path between A and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C again - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_028 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_028 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove CFD from B
		unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[1]");
            print FH "STEP: Remove CFD from line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[1] - PASSED\n";
		}
		# Remove PRK from A
		unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASSED\n";
		}
		
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_029 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_029");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_029";
	my $tcid = "ADQ1104_029";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add PRK to line C
	unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[2]");
		print FH "STEP: Add PRK for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add PRK for line C($list_dn[2]) - PASSED\n";
    }
# Add 3WC to line A
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[0]");
		print FH "STEP: Add 3WC for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table AUDIO
	# Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /SILENCE/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
# Datafill the table custstn
	unless($ses_core->execCmd("table custstn")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table custstn");
	}
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /CPARK/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - PASS\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get PRK Acctive Code
	my $prk_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'PRKS');
    unless ($prk_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRKS access code for line $list_dn[0]");
		print FH "STEP: Get PRKS access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code PRKS is: $prk_code \n";
        print FH "STEP: Get PRKS access code for line A($list_dn[0]) - PASSED\n";
    }
# A calls B, B answers, A flashs
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B, B answers and A flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B, B answers and A flashs - PASSED\n";
    }
# A calls C via SST trunk, C answers, A flashs again
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
	($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through SST on TMA15: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C cannnot call A ");
        print FH "STEP: A calls C via SST trunk and C answers - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C via SST trunk and C answers - PASSED\n";
    }	
	

# Verify speech path A, B and C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,B,C");
        print FH "STEP: Verify speech path between A, B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B and C - PASSED\n";
    }
# C flashs
	%input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flashs - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flashs - PASSED\n";
    }
	sleep (1);
# C dials PRKS 
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# A dials PRK acc
	$dialed_num = "\*$prk_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active PRK - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: C dials $dialed_num to active PRK - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hears confirmation tone after activating PRK - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating PRK - PASSED\n";
    }
	sleep (1);
# C on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASSED\n";
    }
# # Verify speech path between A and B
	# %input = (
                # -list_port => [$list_line[0],$list_line[1]], 
                # -checking_type => ['TESTTONE'], 
                # -tone_duration => 1000, 
                # -cas_timeout => 50000
             # );
    # unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        # print FH "STEP: Verify speech path between A and B again - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: Verify speech path between A and B again - PASSED\n";
    # }
	sleep(12); # the time out is configed above

# Check C rings again after time out 
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing again - PASSED\n";
    }
# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: Offhook line C again- FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C again - PASSED\n";
    }

# Verify speech path A, B and C again
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,B,C");
        print FH "STEP: Verify speech path between A, B and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B and C again - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_029 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_029 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove 3WC from A
		unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[0]");
            print FH "STEP: Remove 3WC from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[0] - PASSED\n";
		}
		# Remove PRK from C
		unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[2]");
            print FH "STEP: Remove PRK from line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_030 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_030");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_030";
	my $tcid = "ADQ1104_030";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add RAG to line A
	unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: Add RAG for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG for line A($list_dn[0]) - PASSED\n";
    }
# Add CXR to line B
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[1]");
		print FH "STEP: Add CXR for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - PASS\n";
    }

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get RAG Acctive Code
	my $rag_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'RAG');
    unless ($rag_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[0]");
		print FH "STEP: Get RAG access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_acc \n";
        print FH "STEP: Get RAG access code for line A($list_dn[0]) - PASSED\n";
    }
# B off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	sleep(1);
# Check B is CPB status
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not CPB status");
        print FH "STEP: Check B is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is CPB status - PASSED\n";
	}
# A calls B and hear busy tone.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
# After flash, A dials RAG access code.
	%input = (
                -line_port => $list_line[0],
                -dialed_number => '*'.$rag_acc,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: A dials RAG access code ($rag_acc) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials RAG access code ($rag_acc) - PASSED\n";
	}
# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep(3);

# Detect A rings
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASSED\n";
    }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# Detect ringback tone on A
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# Detect B rings.
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# B off-hooks to answer A.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B to answer A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B to answer A - PASSED\n";
    }
# Check speech path between B and A
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B - FAILED\n";
        $result = 0;
       # goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B - PASSED\n";
    }
# B flashs to call C
	%input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[1]");
    }
# B calls C, C rings, B on-hooks to transfer
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA', 'offB'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call A");
        print FH "STEP: B calls C and B on-hooks during C ringing  - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C and B on-hooks during C ringing - PASSED\n";
    }
# Verify speech path A and C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,C");
        print FH "STEP: Verify speech path between A and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_030 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_030 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove RAG from A
		unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line $list_dn[0]");
            print FH "STEP: Remove RAG from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line $list_dn[0] - PASSED\n";
		}
		# Remove CXR from B
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[1]");
            print FH "STEP: Remove CXR from line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_031 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_031");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_031";
	my $tcid = "ADQ1104_031";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
  
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;

    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[1], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[1]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }

	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
   	
	# B start hears confirm tone 
	my %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B start confirm tone - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
   	
	# B dials DISA DN 
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: B dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $disa_num - PASS\n";
    }
	
	# B hears confirm tone 
  	  %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # B dials authen code
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: B dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# B hears recall dials tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASS\n";
    }
	
	#########################################
	
	($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	
	# B dials DN(C) via ISUP trunk 
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: A dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN B - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DISA/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DISA/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_032 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_032");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_032";
	my $tcid = "ADQ1104_032";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
	my $trunk_access_code = $db_trunk{'cas_r2'}{-acc};
	
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
		
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;

    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[1], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[1]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }

	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
   	
	# B start hears confirm tone 
	my %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B start confirm tone - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
   	
	# B dials DISA DN 
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: B dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $disa_num - PASS\n";
    }
	
	# B hears confirm tone 
  	  %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # B dials authen code
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: B dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# B hears recall dials tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASS\n";
    }
	
	#########################################
	
	($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	
	# B dials DN(C) via ISUP trunk 
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: A dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN B - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /DISA/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /DISA/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_033 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_033");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_033";
	my $tcid = "ADQ1104_033";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineD = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
	
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;

    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

# Add CXR to line D
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[3]");
		print FH "STEP: Add CXR for line D $list_dn[3] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line D $list_dn[3] - PASSED\n";
    }
	
	$add_feature_lineD = 0;
	
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[3], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[3]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }
	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	# B call D, D answers and check 2 ways speech path
   	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls D and they have no speech path ");
        print FH "STEP: B calls D and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls D and they have speech path - PASS\n";
    }
	
	# D start hears confirm tone 
	my %input = (
                -line_port => $list_line[3],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[3]");
		print FH "STEP: D start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D start confirm tone - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
   	
	# D dials DISA DN 
	%input = (
                -line_port => $list_line[3],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: D dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials $disa_num - PASS\n";
    }
	
	# D hears confirm tone 
  	  %input = (
                -line_port => $list_line[3],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[3]");
		print FH "STEP: D hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # D dials authen code
    %input = (
                -line_port => $list_line[3],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: D dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# D hears recall dials tone
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[3]");
        print FH "STEP: D hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASS\n";
    }
	
	#########################################
	
	# D dials DN(C) but C does'nt answers
	 %input = (
                -line_port => $list_line[3],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: A dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN B - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	sleep(3);
	# Onhook D
    unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line D - PASS\n";
    }
	
	# Line B hears ringback tone
	
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
	unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_line[1] ");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }
	
	# Offhook line C
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        if (grep /PRK|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        if (grep /PRK|FTRNETUI|FTRSTART/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	# remove CXR from line D
    unless ($add_feature_lineD) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[3]");
            print FH "STEP: Remove CXR from line $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[3] - PASS\n";
        }
    }
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_037 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_037");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_037";
	my $tcid = "ADQ1104_037";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add RAG to line A
	unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: Add RAG for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG for line A($list_dn[0]) - PASSED\n";
    }
# Add CWT CWI CCW to line B
	unless ($ses_core->callFeature(-featureName => "CWT CWI CCW", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CWT CWI CCW for line $list_dn[1]");
		print FH "STEP: Add CWT CWI CCW for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CWT CWI CCW for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table AUDIO - PASS\n";
    }

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get RAG Acctive Code
	my $rag_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'RAG');
    unless ($rag_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[0]");
		print FH "STEP: Get RAG access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_code \n";
        print FH "STEP: Get RAG access code for line A($list_dn[0]) - PASSED\n";
    }
# Get CCW active code
	my $ccw_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CCW');
    unless ($ccw_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CCW access code for line $list_dn[1]");
		print FH "STEP: Get CCW access code for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CCW is: $ccw_code \n";
        print FH "STEP: Get CCW access code for line B($list_dn[1]) - PASSED\n";
    }
# B calls C, C answers, B flashs
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, C answers, B flashs  - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, C answers, B flashs - PASSED\n";
    }
	sleep (1);
# B dials CCW active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);
	
	# B dials CCW acc
	$dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num to active CCW - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: B dials $dialed_num to active CCW - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hears confirmation tone after activating CCW - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears confirmation tone after activating CCW - PASSED\n";
    }
	sleep (2);
# Check speech path between B & C again
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B,C");
        print FH "STEP: Verify speech path between B and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C again - PASSED\n";
    }
# A calls B and hear busy tone.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
# After flash, A dials RAG access code.
	%input = (
                -line_port => $list_line[0],
                -dialed_number => '*'.$rag_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: A dials RAG access code ($rag_code) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials RAG access code ($rag_code) - PASSED\n";
	}
# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
	sleep(3);

# Detect A rings
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASSED\n";
    }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# Detect ringback tone on A
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# Detect B rings.
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# B off-hooks to answer A.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B to answer A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B to answer A - PASSED\n";
    }
# Check speech path between B and A
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B - PASSED\n";
    }

# On-hook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_037 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_037 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /RAG|CWT|CWI|CCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove RAG from A
		unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line $list_dn[0]");
            print FH "STEP: Remove RAG from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line $list_dn[0] - PASSED\n";
		}
		# Remove CWT CWI CCW from B
		unless ($ses_core->callFeature(-featureName => 'CWT CWI CCW', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CWT CWI CCW from line $list_dn[1]");
            print FH "STEP: Remove CWT CWI CCW from line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: Remove CWT CWI CCW from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_038 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_038");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_038";
	my $tcid = "ADQ1104_038";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add RAG NAME to line A
	unless ($ses_core->callFeature(-featureName => "RAG NAME PUBLIC RAG_PUBDNA \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: Add RAG NAME for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG NAME for line A($list_dn[0]) - PASSED\n";
    }
# Add CNAMD to line B
	unless ($ses_core->callFeature(-featureName => "CNAMD NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNAMD for line $list_dn[1]");
		print FH "STEP: Add CNAMD for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CNAMD for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - PASS\n";
    }

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get RAG Acctive Code
	my $rag_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'RAG');
    unless ($rag_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[0]");
		print FH "STEP: Get RAG access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_code \n";
        print FH "STEP: Get RAG access code for line A($list_dn[0]) - PASSED\n";
    }
# B off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	sleep(1);
# Check B is CPB status
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not CPB status");
        print FH "STEP: Check B is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is CPB status - PASSED\n";
	}
# A calls B and hear busy tone.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
# After flash, A dials RAG access code.
	%input = (
                -line_port => $list_line[0],
                -dialed_number => '*'.$rag_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: A dials RAG access code ($rag_code) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials RAG access code ($rag_code) - PASSED\n";
	}
# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep(3);

# Detect A rings
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASSED\n";
    }
	sleep (10);

# Verify A will stop ringing after about 10s
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    if ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A doesn't stop ringing after about 10s");
        print FH "STEP: Verify A will stop ringing after about 10s - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify A will stop ringing after about 10s - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_038 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_038 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /RAG|NAME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove RAG NAME from A
		unless ($ses_core->callFeature(-featureName => 'RAG NAME', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line $list_dn[0]");
            print FH "STEP: Remove RAG from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line $list_dn[0] - PASSED\n";
		}
		# Remove CNAMD from B
		unless ($ses_core->callFeature(-featureName => 'CNAMD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNAMD from line $list_dn[1]");
            print FH "STEP: Remove CNAMD from line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: Remove CNAMD from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_039 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_039");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_039";
	my $tcid = "ADQ1104_039";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add SCS to line A
	unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCS for line $list_dn[0]");
		print FH "STEP: Add SCS for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SCS for line A($list_dn[0]) - PASSED\n";
    }
# Add CXR to line B
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[1]");
		print FH "STEP: Add CXR for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get SCPS Acctive Code
	my $scps_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'SCPS');
    unless ($scps_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get SCPS access code for line $list_dn[0]");
		print FH "STEP: Get SCPS access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code SCPS is: $scps_code \n";
        print FH "STEP: Get SCPS access code for line A($list_dn[0]) - PASSED\n";
    }
# Get SPDC active code
	my $spdc_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'SPDC');
    unless ($spdc_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get SPDC access code for line $list_dn[1]");
		print FH "STEP: Get SPDC access code for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code SPDC is: $spdc_code \n";
        print FH "STEP: Get SPDC access code for line B($list_dn[1]) - PASSED\n";
    }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
# A dials SCPS active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
	# A dials SCPS acc
	$dialed_num = "\*$scps_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active SCS - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP:  A dials $dialed_num to active SCS - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: A hears confirmation tone after activating SCS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating SCS - PASSED\n";
    }
	# Start detect hear confirmation tone again
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	# A dials Number+Dialed number
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => '1'. $list_dn[1].'#',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial B to store into SCS list");
        print FH "STEP: A stores B into SCS list  - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: A stores B into SCS list - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after storing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after storing - PASSED\n";
    }
	sleep (1);
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	sleep (2);
# A calls B, B answers then B flashs
	
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => '*'.$spdc_code.'1'.'#',
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B by SCS number, B answers and B flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B by SCS number, B answers and B flashs - PASSED\n";
    }
# B calls C, C doesn't answer, B on-hooks and C off-hooks then
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA','offB'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C, C doesn't answer, B on-hooks and C off-hooks then");
        print FH "STEP: B calls C, C doesn't answer, B on-hooks and C off-hooks then - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, C doesn't answer, B on-hooks and C off-hooks then - PASSED\n";
    }

# Check speech path between A & C
	%input = (
                -list_port => [$list_line[0], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,C");
        print FH "STEP: Verify speech path between A and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1104_039 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_039 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCS|CXR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove SCS from A
		unless ($ses_core->callFeature(-featureName => 'SCS', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCS from line $list_dn[0]");
            print FH "STEP: Remove SCS from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove SCS from line $list_dn[0] - PASSED\n";
		}
		# Remove CXR from B
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[1]");
            print FH "STEP: Remove CXR from line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_040 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_040");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_040";
	my $tcid = "ADQ1104_040";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add SCS to line A
	unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCS for line $list_dn[0]");
		print FH "STEP: Add SCS for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SCS for line A($list_dn[0]) - PASSED\n";
    }
# Add 3WC to line B
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[1]");
		print FH "STEP: Add 3WC for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'], 
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get SCPS Acctive Code
	my $scps_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'SCPS');
    unless ($scps_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get SCPS access code for line $list_dn[0]");
		print FH "STEP: Get SCPS access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code SCPS is: $scps_code \n";
        print FH "STEP: Get SCPS access code for line A($list_dn[0]) - PASSED\n";
    }
# Get SPDC active code
	my $spdc_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'SPDC');
    unless ($spdc_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get SPDC access code for line $list_dn[1]");
		print FH "STEP: Get SPDC access code for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code SPDC is: $spdc_code \n";
        print FH "STEP: Get SPDC access code for line B($list_dn[1]) - PASSED\n";
    }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
# A dials SCPS active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
	# A dials SCPS acc
	$dialed_num = "\*$scps_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active SCS - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP:  A dials $dialed_num to active SCS - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: A hears confirmation tone after activating SCS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating SCS - PASSED\n";
    }
	# Start detect hear confirmation tone again
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	# A dials Number+Dialed number
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => '9'. $list_dn[1].'#',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial B to store into SCS list");
        print FH "STEP: A stores B into SCS list  - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: A stores B into SCS list - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after storing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after storing - PASSED\n";
    }
	sleep (1);
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	sleep (2);
# A calls B, B answers then B flashs
	
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => '*'.$spdc_code.'9'.'#',
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B by SCS number, B answers and B flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B by SCS number, B answers and B flashs - PASSED\n";
    }
# B calls C, C doesn't answer, B flashs
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none','none'],
                -send_receive => ['none','none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, C doesn't answer, B flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, C doesn't answer, B flashs - PASSED\n";
    }
	sleep (2);
# Check speech path between A & B again
	%input = (
                -list_port => [$list_line[0], $list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,B");
        print FH "STEP: Verify speech path between A and B again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B again - PASSED\n";
    }
# Detect ringback tone from C on B
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASSED\n";
    }
# Detect ringback tone from C on A
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# Check speech path between A, B and C
	%input = (
                -list_port => [$list_line[0], $list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,B,C");
        print FH "STEP: Verify speech path between A, B and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A, B and C again - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1104_040 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCS|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
			
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove features from line A and B
	if ($feature_added) {
        # Remove SCS from A
		unless ($ses_core->callFeature(-featureName => 'SCS', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCS from line $list_dn[0]");
            print FH "STEP: Remove SCS from line $list_dn[0] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove SCS from line $list_dn[0] - PASSED\n";
		}
		# Remove 3WC from B
		unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[1]");
            print FH "STEP: Remove 3WC from line $list_dn[1] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_041 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_041");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_041";
	my $tcid = "ADQ1104_041";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $monitor_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################

	my $meetme_num = 2124400000;
	(my $area_code) = ($meetme_num =~ /(\d{3})\d+/);
	(my $office_code) = ($meetme_num =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($meetme_num =~ /\d{3}\d{3}(\d{4})/);
# Datafill tuple NY_PUB 0 in table MMCONF
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot login the 'table MMCONF'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /FLASHONLY/, $ses_core->execCmd("pos NY_PUB 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB 0 $area_code $office_code $dn 0 Y Y N 150 FLASHONLY - PASS\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# B off-hooks to call meetme
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# B hears dial tone.
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
	
# B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: B dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF $meetme_num - PASSED\n";
	}
	
# B hears ringback tone
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASSED\n";
    }
	sleep (5);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
	
# C off-hooks to call meetme
		unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => $meetme_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF $meetme_num");
		print FH "STEP: C dials MMCONF $meetme_num - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF $meetme_num - PASSED\n";
	}
	sleep (4);
# Check speech path between B & C 
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B,C");
        print FH "STEP: Verify speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C - PASSED\n";
    }
# Line A (LEA) monitors the speech path between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_041 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_041 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }
# Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_042 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_042");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_042";
	my $tcid = "ADQ1104_042";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $monitor_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add line B, C to CPU group
	$ses_core->execCmd ("servord");
    if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("est \$ CPU $list_len[1] $list_len[2] \$ y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot create CPU for line $list_dn[1] and $list_dn[2]");
        $ses_core->execCmd("abort");
		$result = 0;
		print FH "STEP: Create CPU group for line $list_dn[1] and $list_dn[2] - FAILED\n";
    } else {
		print FH "STEP: Create CPU group for line $list_dn[1] and $list_dn[2] - PASSED\n";
	}
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# Get CPU Acctive Code
	my $cpu_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CPU');
    unless ($cpu_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CPU access code for line $list_dn[1]");
		print FH "STEP: Get CPU access code for line B ($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CPU is: $cpu_code \n";
        print FH "STEP: Get CPU access code for line B($list_dn[1]) - PASSED\n";
    }
# D calls C, C doesn't answer
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none','none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call C");
        print FH "STEP: D calls C, C doesn't answer - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls C, C doesn't answer - PASSED\n";
    }
# B off-hooks to pick up call
		unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# B hears dial tone.
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
	
# B dials CPU code
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => '*'.$cpu_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial CPU code $cpu_code");
		print FH "STEP: B dials CPU code $cpu_code - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials CPU code $cpu_code - PASSED\n";
	}
	sleep (5);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Check speech path between B and D
	%input = (
                -list_port => [$list_line[1], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B and D");
        print FH "STEP: Verify speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and D - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_042 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_042 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove CPU from B and C
	if ($feature_added) {
        # Remove CPU from B
		unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $list_dn[1]");
            print FH "STEP: Remove CPU from line $list_dn[1] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove CPU from line $list_dn[1] - PASSED\n";
		}
		# Remove CPU from C
		unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $list_dn[2]");
            print FH "STEP: Remove CPU from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove CPU from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_043 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_043");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_043";
	my $tcid = "ADQ1104_043";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]), Line B (list_dn[1]) with 1FR mode to make it LEA line
    for (my $i =0; $i <=1; $i++){
		%input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
		unless ($ses_core->resetLine(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot change LCC into 1FR");
			print FH "STEP: New Line ($list_dn[$i]) with 1FR mode to make it into LEA line - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: New Line ($list_dn[$i]) with 1FR mode to make it into LEA line - PASSED\n";
		}
		unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
				$logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
				print FH "STEP: Check line $list_dn[$i] IDL status - FAILED\n";
				$flag = 0;
				last;
			} else {
				print FH "STEP: Check line $list_dn[$i] IDL status - PASSED\n";
			}
	}
	
    $fr_line = 1;
   # New the remains of line with IBN mode
   for (my $i = 2; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[2] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
	my $monitor_num_2;
	($monitor_num_2) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $monitor_num_2 = $trunk_access_code . $monitor_num_2;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[2] NILC NILLATA",
            "SURV ADD DN $list_dn[2] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE PAIRED LINE SW $monitor_num $monitor_num_2 y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# C calls D, D answers
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call D");
        print FH "STEP: C calls D, D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls D, D answers - PASSED\n";
    }
# Check line B ringing
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B (LEA) does not ring");
        print FH "STEP: Check line B (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B (LEA) rings - PASSED\n";
    }
# B off-hooks to monitor the outgoing speech path of line D
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_dn[1]");
        print FH "STEP: Offhook line B (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B (LEA) - PASSED\n";
    }
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }

# A off-hooks to monitor the outgoing speech path of line C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }

# Check Line A monitors the outgoing speech path of line C
    %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the outgoing speech path of line C");
        print FH "STEP: Line A (LEA) monitors the outgoing speech path of line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the outgoing speech path of line C - PASSED\n";
    }
# Check Line B monitors the incoming speech path of line C
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line B (LEA) can't monitor the incoming speech path of line C");
        print FH "STEP: Line B (LEA) monitors the incoming speech path of line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line B (LEA) monitors the incoming speech path of line C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_043 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_043 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }
# Change the LCC of line A and B to IBN mode
    if ($fr_line) {
        for (my $i = 0; $i<=1; $i++){
			%input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[$i], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[$i]
                    );
			unless ($ses_core->resetLine(%input)) {
				$logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line $list_dn[$i] to IBN mode");
				print FH "STEP: Change the LCC of line $list_dn[$i] to IBN mode - FAILED\n";
			} else {
				print FH "STEP: Change the LCC of line $list_dn[$i] to IBN mode - PASSED\n";
			}
		}	
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_044 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_044");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_044";
	my $tcid = "ADQ1104_044";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[2], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[2]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }
	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	# C start hears confirm tone 
	my %input = (
                -line_port => $list_line[2],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[2]");
		print FH "STEP: C start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C start confirm tone - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# # C hears dial tone
	
	# %input = (
                # -line_port => $list_line[2],
                # -dial_tone_duration => 1000,
                # -cas_timeout => 50000,
                # -wait_for_event_time => $wait_for_event_time
                # );
	 # unless ($ses_glcas->detectDialToneCAS(%input)){
        # $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line C $list_dn[2]");
        # print FH "STEP: C hears dial tone - FAIL\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: C hears dial tone - PASS\n";
    # }
   	
	# C dials DISA DN 
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: C dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $disa_num - PASS\n";
    }
	
	# C hears confirm tone 
  	  %input = (
                -line_port => $list_line[2],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[2]");
		print FH "STEP: C hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # C dials authen code
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: C dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# C hears recall dials tone
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASS\n";
    }
	
	#########################################
	
	# C dials DN(B), B ring and A will ring too
	 %input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: C dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials DN B - PASS\n";
    }
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	

	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace   /home/ctttuyen/PCM   /home/ntthuyhuong/PCM_hnphuc
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ctttuyen/PCM',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_045 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_045");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_045";
	my $tcid = "ADQ1104_045";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	%input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[1], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - PASS\n";
    }
	$change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	my ($dialed_num1) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num1 = $trunk_access_code . $dialed_num1;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[2] NILC NILLATA",
            "SURV ADD DN $list_dn[2] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE PAIRED LINE SW $dialed_num $dialed_num1 y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[2], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[2]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }
	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	# C start hears confirm tone 
	my %input = (
                -line_port => $list_line[2],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[2]");
		print FH "STEP: C start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C start confirm tone - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
   	
	# C dials DISA DN 
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: C dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $disa_num - PASS\n";
    }
	
	# C hears confirm tone 
  	  %input = (
                -line_port => $list_line[2],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[2]");
		print FH "STEP: C hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirm tone - PASS\n";
    }
	

    # C dials authen code
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: C dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# C hears recall dials tone
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASS\n";
    }
	
	#########################################
	
	# C dials DN(D), D ring and B will ring too
	 %input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: C dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials DN B - PASS\n";
    }
	
	# Check line D have ringing tone

	 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
		
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	

	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Offhook line D
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# Verify speech path between C and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between C and D");
        print FH "STEP: Check speech path between C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and D - PASS\n";
    }
	
	# LEA A can monitor outgoing of line C
     %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA A can monitor outgoing of line C ");
        print FH "STEP: LEA A can monitor outgoing of line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A can monitor outgoing of line C  - PASS\n";
    }
	
	
	# LEA B can monitor incoming of line C
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA B can monitor incoming of line D");
        print FH "STEP: LEA B can monitor incoming of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA B can monitor incoming of line D - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        # @output = $ses_logutil->execCmd("open amab;back all");
        # unless ((grep /CALLING DN.*$list_dn[0]/, @output) and (grep /CALLED DN.*$list_dn[1]/, @output) and (grep /CALLED DN.*$list_dn[2]/, @output)) {
            # $logger->error(__PACKAGE__ . " $tcid: missing AMAB in logutil");
            # $result = 0;
            # print FH "STEP: Check AMAB - FAIL\n";
        # } else {
            # print FH "STEP: Check AMAB - PASS\n";
        # }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA A to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA A to IBN - PASS\n";
        }
    }
	
	 if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[1], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[1]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA B to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA B to IBN - PASS\n";
        }
    }
	sleep(10);
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_046 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_046");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_046";
	my $tcid = "ADQ1104_046";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]), Line B (list_dn[1]) with 1FR mode to make it LEA line
    for (my $i =0; $i <=1; $i++){
		%input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
		unless ($ses_core->resetLine(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot change LCC into 1FR");
			print FH "STEP: New Line ($list_dn[$i]) with 1FR mode to make it into LEA line - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: New Line ($list_dn[$i]) with 1FR mode to make it into LEA line - PASSED\n";
		}
		unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
				$logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
				print FH "STEP: Check line $list_dn[$i] IDL status - FAILED\n";
				$flag = 0;
				last;
			} else {
				print FH "STEP: Check line $list_dn[$i] IDL status - PASSED\n";
			}
	}
	
    $fr_line = 1;
   # New the remains of line with IBN mode
   for (my $i = 2; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[2] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
	my $monitor_num_2;
	($monitor_num_2) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $monitor_num_2 = $trunk_access_code . $monitor_num_2;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[2] NILC NILLATA",
            "SURV ADD DN $list_dn[2] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE PAIRED LINE SW $monitor_num $monitor_num_2 y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# C calls D, D answers
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call D");
        print FH "STEP: C calls D, D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls D, D answers - PASSED\n";
    }
# Check line B ringing
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B (LEA) does not ring");
        print FH "STEP: Check line B (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B (LEA) rings - PASSED\n";
    }
# B off-hooks to monitor the outgoing speech path of line D
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_dn[1]");
        print FH "STEP: Offhook line B (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B (LEA) - PASSED\n";
    }
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }

# A off-hooks to monitor the outgoing speech path of line C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }

# Check Line A monitors the outgoing speech path of line C
    %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the outgoing speech path of line C");
        print FH "STEP: Line A (LEA) monitors the outgoing speech path of line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the outgoing speech path of line C - PASSED\n";
    }
# Check Line B monitors the incoming speech path of line C
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line B (LEA) can't monitor the incoming speech path of line C");
        print FH "STEP: Line B (LEA) monitors the incoming speech path of line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line B (LEA) monitors the incoming speech path of line C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_046 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_046 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }
# Change the LCC of line A and B to IBN mode
    if ($fr_line) {
        for (my $i = 0; $i<=1; $i++){
			%input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[$i], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[$i]
                    );
			unless ($ses_core->resetLine(%input)) {
				$logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line $list_dn[$i] to IBN mode");
				print FH "STEP: Change the LCC of line $list_dn[$i] to IBN mode - FAILED\n";
			} else {
				print FH "STEP: Change the LCC of line $list_dn[$i] to IBN mode - PASSED\n";
			}
		}	
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_047 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_047");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_047";
	my $tcid = "ADQ1104_047";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $trunk_access_code_sst = $db_trunk{'sst'}{-acc};
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[1], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[1]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }
	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	# B start hears confirm tone 
	my %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B start confirm tone - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
   	
	# B dials DISA DN 
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: B dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $disa_num - PASS\n";
    }
	
	# B hears confirm tone 
  	  %input = (
                -line_port => $list_line[1],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[1]");
		print FH "STEP: B hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # B dials authen code
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: B dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# B hears recall dials tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASS\n";
    }
	
	#########################################
	
	($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code_sst . $dialed_num;
	
	# B dials DN(C), C ring and A will ring too
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] ");
        print FH "STEP: B dials DN C via SST trunk - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials DN C via SST trunk - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	

	# Offhook line C
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_048 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_048");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_048";
	my $tcid = "ADQ1104_048";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $monitor_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Datafill the table AUDIO
	# Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK SILENCE 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /SILENCE/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
# Datafill the table custstn
	unless($ses_core->execCmd("table custstn")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table custstn");
	}
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB CPARK CPARK 12 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /CPARK/, $ses_core->execCmd("pos NY_PUB CPARK CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple NY_PUB CPARK in table custstn - PASS\n";
    }
# Add PRK to line C
	unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[2]");
		print FH "STEP: Add PRK for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add PRK for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# Get PRKS Acctive Code
	my $prks_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'PRKS');
    unless ($prks_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRKS access code for line $list_dn[2]");
		print FH "STEP: Get PRKS access code for line C ($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code PRKS is: $prks_code \n";
        print FH "STEP: Get PRKS access code for line C($list_dn[2]) - PASSED\n";
    }
# B calls C, C answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, C answers - PASSED\n";
    }

# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - PASSED\n";
    }
# C flashs
	%input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flashs - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flashs - PASSED\n";
    }
	sleep (1);
# C dials PRKS 
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# C dials PRKS acc
	$dialed_num = "\*$prks_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active PRK - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: C dials $dialed_num to active PRK - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: C hears confirmation tone after activating PRK - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating PRK - PASSED\n";
    }
	sleep (1);
# C on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASSED\n";
    }
	sleep(12); # the time out is configed above
# Verify B hears silent tone during C parking the call
# Verify B hears ringback tone after time out
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone on line $list_dn[1]");
        print FH "STEP: Verify B hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify B hears ringback tone - PASSED\n";
    }

# Check C rings again after time out 
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing again - PASSED\n";
    }

# C off-hooks again
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# Check speed path between B and C
	%input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B and C");
        print FH "STEP: Verify speech path between B and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C again - PASSED\n";
    }
# Line A (LEA) monitors the speech path between B and C again
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C again");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C again - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_048 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_048 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove PRK from C
	if ($feature_added) {
        # Remove PRK from C
		unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[2]");
            print FH "STEP: Remove PRK from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove PRK from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_049 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_049");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_049";
	my $tcid = "ADQ1104_049";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################

# Create DNH group: C is pilot, B is member
	
	unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[2], -addMem => 'Yes', -listMemDN => [$list_dn[1]])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[1] and $list_dn[2]");
		print FH "STEP: Create group DNH with line $list_dn[2] is pilot and $list_dn[1] is member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Create group DNH with line $list_dn[2] is pilot and $list_dn[1] is member - PASSED\n";
    }

    unless(grep /PILOT OF DNH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot create DNH group for line $list_dn[1] and $list_dn[2]");
        print FH "STEP: Query DNH group with line $list_dn[2] is pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query DNH group with line $list_dn[2] is pilot - PASSED\n";
    }
    
	$feature_added = 1;

############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    $ses_core->execCmd("forceout cmtg");
	if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;

# C off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C to make it busy - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C to make it busy - PASSED\n";
    }
	sleep(1);
# Check C is CPB status
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
# D calls C, B rings and answers
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call C");
        print FH "STEP: D calls C, B answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls C, B answers - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_049 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_049 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DNH from line C and B
	if ($feature_added) {
        # Remove DNH from B
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[1]");
            print FH "STEP: Remove DNH from line $list_dn[1] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[1] - PASSED\n";
		}
		# Remove DNH from C
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[2]");
            print FH "STEP: Remove DNH from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_050 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_050");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_050";
	my $tcid = "ADQ1104_050";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $mlh_added = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
   
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
	
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Out C, D
	$ses_core->execCmd ("servord");
	if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[2] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[2] ");
            print FH "STEP: OUT line C $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: OUT line C $list_dn[2] - PASS\n";
        }
    
	if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[3] $list_len[3] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[3] ");
            print FH "STEP: OUT line D $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: OUT line D $list_dn[3] - PASS\n";
        }
    
	
	# Add MLH
	
    $ses_core->execCmd("est \$ MLH $list_dn[2] $list_line_info[2] \+");
	$ses_core->{conn}->print("$list_len[2] $list_len[3] ibn \+");
	$ses_core->{conn}->print(" \$ DGT \$ 3 y y");
    $ses_core->{conn}->print(" ");
	
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
   
    unless (grep /MLH/, $ses_core->execCmd("qdn $list_dn[2]")) {
        print FH "STEP: add MLH for line $list_dn[2] and $list_dn[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MLH for line $list_dn[2] and $list_dn[3] - PASS\n";
    }
	$mlh_added = 0;
	
	# Add feature AUL for line B 
	unless ($ses_core->callFeature(-featureName => "AUL $list_dn[2]", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add AUL for line $list_dn[1]");
		print FH "STEP: Add AUL for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add AUL for line B($list_dn[1]) - PASSED\n";
    }
	$add_feature_lineB = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	# Offhook line B
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
		print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
	
	sleep(2);
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	

	# Offhook line C
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
	my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	# remove MLH
    unless ($mlh_added) {
	    # $ses_core->execCmd("servord");
	    # $ses_core->execCmd("del \$ mlh $list_len[3] \$");
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("del \$ mlh $list_len[3] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after DEL fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot delete member $list_dn[3] from MLH group");
            print FH "STEP: delete member $list_dn[3] from MLH group - FAIL\n";
        } else {
            print FH "STEP: delete member $list_dn[3] from MLH group - PASS\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[2] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot out line $list_dn[1]");
            print FH "STEP: out line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: out line $list_dn[2] - PASS\n";
        }

       
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASS\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[3] $list_line_info[3] $list_len[3] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[3] ");
            print FH "STEP: NEW line $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[3] - PASS\n";
        }
    }
	
	# remove AUL feature for line B
  
     unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'AUL', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove AUL from line B $list_dn[1]");
            print FH "STEP: Remove AUL from line B $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove AUL from line B $list_dn[1] - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_051 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_051");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_051";
	my $tcid = "ADQ1104_051";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $monitor_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Out line C and D to create group DLH
	$ses_core->execCmd ("servord");
	for (my $i = 2; $i <= 3; $i++){
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[$i] $list_len[$i] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter the command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[$i]");
            print FH "STEP: OUT line $list_dn[$i] - FAILED\n";
        } else {
            print FH "STEP: OUT line $list_dn[$i] - PASSED\n";
        }
	}
# Create the DLH group with C be pilot and D be member
    $ses_core->execCmd("est \$ DLH $list_dn[2] $list_line_info[2] $list_len[2] \+");
    if (grep /ERROR/, $ses_core->execCmd("$list_len[3] IBN \$ DGT \$ 6 y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'est'");
		$ses_core->execCmd("abort");
		print FH "STEP: Create DLH group with C be pilot and D be member - FAILED \n";
		$result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: Create DLH group with C be pilot and D be member - PASSED \n";
	}	
   
    unless (grep /PILOT OF DLH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        print FH "STEP: Query to verify DLH created successfully - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query to verify DLH created successfully - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# C off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C to make it busy - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C to make it busy - PASSED\n";
    }
	sleep(1);
# Check C is CPB status
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
# B calls C, D answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, D answers - PASSED\n";
    }

# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_051 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_051 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|DLH/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DLH group and new line C, D
	if ($feature_added) {
        # Remove DLH group
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("del \$ dlh $list_len[3] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEL fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot delete member $list_dn[3] from DLH group");
            print FH "STEP: Remove member $list_dn[3] from DLH group - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove member $list_dn[3] from DLH group - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[2] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot out line $list_dn[2]");
            print FH "STEP: Out line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: Out line $list_dn[2] - PASSED\n";
        }

		# New line C and D for running TC
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2] ");
            print FH "STEP: NEW line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[3] $list_line_info[3] $list_len[3] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[3] ");
            print FH "STEP: NEW line $list_dn[3] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[3] - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_052 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_052");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_052";
	my $tcid = "ADQ1104_052";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################

# Create DNH group: C is pilot without members
	
	unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[2], -addMem => 'No', -listMemDN => ['None'])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[2]");
		print FH "STEP: Create group DNH with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Create group DNH with line $list_dn[2] be pilot - PASSED\n";
    }

    unless(grep /PILOT OF DNH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot create DNH group for line $list_dn[2]");
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - PASSED\n";
    }
	
# Add DCPU to line C
	unless ($ses_core->callFeature(-featureName => "DCPU", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCPU for line $list_dn[2]");
		print FH "STEP: Add DCPU for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DCPU for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    $ses_core->execCmd("forceout cmtg");
	if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get DCPU Acctive Code
	my $dcp_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'DCP');
    unless ($dcp_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DCPU access code for line $list_dn[2]");
		print FH "STEP: Get DCPU access code for line C ($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code DCPU is: $dcp_code \n";
        print FH "STEP: Get DCPU access code for line C($list_dn[2]) - PASSED\n";
    }
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;

# B calls D, D doesn't answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D, D doesn't answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D, D doesn't answers - PASSED\n";
    }
	
# C off-hooks to dial DCP to pickup call
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C to pickup call - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C to pickup call - PASSED\n";
    }
# C hears dial tone.
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 2000,
                -cas_timADQ1086ut => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
  
# C dials DCP Acctive Code + DN(D)
	
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# C dials DCP acc
	$dialed_num = "\*$dcp_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active DCPU - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: C dials $dialed_num to active DCPU - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hears confirmation tone after activating DCPU - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating DCPU - PASSED\n";
    }
	sleep (2);
# C dials DN(D) to pickup call
	($dialed_num) = ($list_dn[3] =~ /\d{3}(\d+)/);
	print FH "C dials: $dialed_num \n";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial DN(D) to pickup call");
        print FH "STEP: C dials DN(D) to pickup the call from B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: C dials DN(D) to pickup the call from B - PASSED\n";
    }
	sleep (2);
# Verify speech path between B and C
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B,C");
        print FH "STEP: Verify speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C - PASSED\n";
    }
# Line A (LEA) monitors the speech path between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_052 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_052 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DNH and DCPU from C
	if ($feature_added) {
        # Remove DNH from C
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[2]");
            print FH "STEP: Remove DNH from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[2] - PASSED\n";
		}
		# Remove DCPU from C
		unless ($ses_core->callFeature(-featureName => 'DCPU', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPU from line $list_dn[2]");
            print FH "STEP: Remove DCPU from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DCPU from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_053 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_053");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_053";
	my $tcid = "ADQ1104_053";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################

# Create DNH group: C is pilot without members
	
	unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[2], -addMem => 'No', -listMemDN => ['None'])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[2]");
		print FH "STEP: Create group DNH with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Create group DNH with line $list_dn[2] be pilot - PASSED\n";
    }

    unless(grep /PILOT OF DNH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot create DNH group for line $list_dn[2]");
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - PASSED\n";
    }
	
# Add CXR to line D
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[3]");
		print FH "STEP: Add CXR for line D($list_dn[3]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line D($list_dn[3]) - PASSED\n";
    }
	$feature_added = 1;
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    $ses_core->execCmd("forceout cmtg");
	if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;

# B calls D, D answers and flashs then
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D, D answers and flashs then - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D, D answers and flashs then - PASSED\n";
    }
	sleep (1);
# D calls C, D on-hooks, C off-hooks then
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA', 'offB'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call C");
        print FH "STEP: D calls C, D on-hooks, C off-hooks then - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls C, D on-hooks, C off-hooks then - PASSED\n";
    }
	sleep (2);
# Verify speech path between B and C
	%input = (
                -list_port => [$list_line[1], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B,C");
        print FH "STEP: Verify speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C - PASSED\n";
    }
# Line A (LEA) monitors the speech path between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_053 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_053 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CXR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DNH from C and CXR from D
	if ($feature_added) {
        # Remove DNH from C
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[2]");
            print FH "STEP: Remove DNH from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[2] - PASSED\n";
		}
		# Remove CXR from D
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[2]");
            print FH "STEP: Remove CXR from line $list_dn[3] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove CXR from line $list_dn[3] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_054 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_054");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_054";
	my $tcid = "ADQ1104_054";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################

# Create DNH group: C is pilot, D and E are members
	
	unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[2], -addMem => 'Yes', -listMemDN => [$list_dn[3], $list_dn[4]])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[2]");
		print FH "STEP: Create group DNH with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Create group DNH with line $list_dn[2] be pilot - PASSED\n";
    }

    unless(grep /PILOT OF DNH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot create DNH group for line $list_dn[2]");
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query DNH group with line $list_dn[2] be pilot - PASSED\n";
    }
	$feature_added = 1;
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    $ses_core->execCmd("forceout cmtg");
	if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;

# B calls D, D answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D, D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D, D answers - PASSED\n";
    }
	sleep (1);

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }
	
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep (4);
# B calls E, E answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[4],
                -dialed_number => $list_dn[4],
                -regionA => $list_region[1],
                -regionB => $list_region[4],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call E");
        print FH "STEP: B calls E, E answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls E, E answers - PASSED\n";
    }
	sleep (1);

# Line A (LEA) monitors the speech path between B and E
    %input = (
                -list_port => [$list_line[1],$list_line[4]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and E");
        print FH "STEP: Line A (LEA) monitors the speech path between B and E - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and E - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_054 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_054 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DNH from C, D, E 
	if ($feature_added) {
        # Remove DNH from E
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[4], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[4]");
            print FH "STEP: Remove DNH from line $list_dn[4] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[4] - PASSED\n";
		}
		# Remove DNH from D
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[3]");
            print FH "STEP: Remove DNH from line $list_dn[3] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[3] - PASSED\n";
		}
		# Remove DNH from C
		unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[2]");
            print FH "STEP: Remove DNH from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove DNH from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_055 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_055");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_055";
	my $tcid = "ADQ1104_055";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Out line C and D to create group DLH
	$ses_core->execCmd ("servord");
	for (my $i = 2; $i <= 3; $i++){
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[$i] $list_len[$i] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter the command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[$i]");
            print FH "STEP: OUT line $list_dn[$i] - FAILED\n";
        } else {
            print FH "STEP: OUT line $list_dn[$i] - PASSED\n";
        }
	}
# Create the DLH group with C be pilot and D be member
    $ses_core->execCmd("est \$ DLH $list_dn[2] $list_line_info[2] $list_len[2] \+");
    if (grep /ERROR/, $ses_core->execCmd("$list_len[3] IBN \$ DGT \$ 6 y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'est'");
		$ses_core->execCmd("abort");
		print FH "STEP: Create DLH group with C be pilot and D be member - FAILED \n";
		$result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: Create DLH group with C be pilot and D be member - PASSED \n";
	}
   
    unless (grep /PILOT OF DLH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[2]")) {
        print FH "STEP: Query to verify DLH created successfully - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query to verify DLH created successfully - PASSED\n";
    }
# Add LOD to line C
	unless ($ses_core->callFeature(-featureName => "$list_len[2] LOD $list_dn[4]", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LOD for line $list_dn[2]");
		print FH "STEP: Add LOD for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LOD for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
# C off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C to make it busy - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C to make it busy - PASSED\n";
    }
	sleep(1);
# Check C is CPB status
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
# D off-hooks to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D to make it busy - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D to make it busy - PASSED\n";
    }
	sleep(1);
# B calls C, E answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[4],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[4],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, E answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, E answers - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and E
    %input = (
                -list_port => [$list_line[1],$list_line[4]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and E");
        print FH "STEP: Line A (LEA) monitors the speech path between B and E - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and E - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_055 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_055 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|DLH/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove DLH group and new line C, D
	if ($feature_added) {
        # Remove DLH group
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("del \$ dlh $list_len[3] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEL fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot delete member $list_dn[3] from DLH group");
            print FH "STEP: Remove member $list_dn[3] from DLH group - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove member $list_dn[3] from DLH group - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[2] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot out line $list_dn[2]");
            print FH "STEP: Out line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: Out line $list_dn[2] - PASSED\n";
        }

		# New line C and D for running TC
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2] ");
            print FH "STEP: NEW line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[3] $list_line_info[3] $list_len[3] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[3] ");
            print FH "STEP: NEW line $list_dn[3] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[3] - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_056 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_056");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_056";
	my $tcid = "ADQ1104_056";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CWT CWI CCW to line C
	unless ($ses_core->callFeature(-featureName => "CWT CWI CCW", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CWT CWI CCW for line $list_dn[2]");
		print FH "STEP: Add CWT CWI CCW for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CWT CWI CCW for line C($list_dn[2]) - PASSED\n";
    }
# Add CXR to line B
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[1]");
		print FH "STEP: Add CXR for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - PASS\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get CCW active code
	my $ccw_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'CCW');
    unless ($ccw_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CCW access code for line $list_dn[2]");
		print FH "STEP: Get CCW access code for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CCW is: $ccw_code \n";
        print FH "STEP: Get CCW access code for line C($list_dn[2]) - PASSED\n";
    }
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
	
# E calls C, C answers and C flashs
	%input = (
                -lineA => $list_line[4],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[4],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: E can't call C");
        print FH "STEP: E calls C, C answers and C flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: E calls C, C answers and C flashs - PASSED\n";
    }
# C dials CCW active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# C dials CCW acc
	$dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active CCW - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: C dials $dialed_num to active CCW - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hears confirmation tone after activating CCW - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating CCW - PASSED\n";
    }
	sleep (2);
# Check speech path between E & C again
	%input = (
                -list_port => [$list_line[4], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between E,C");
        print FH "STEP: Verify speech path between E and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between E and C again - PASSED\n";
    }
# D calls B, B answers and B flashs
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[3],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call B");
        print FH "STEP: D calls B, B answers and B flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls B, B answers and B flashs - PASSED\n";
    }
# B calls C and hear busy tone.
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C and hears BUSY tone - PASSED\n";
    }
	sleep (1);

# B flashs again
	%input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[1]");
    }
# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_056 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_056 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CXR|CWT|CWI|CCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove CWT CWI CCW group and new line C, CXR from line B
	if ($feature_added) {
		# Remove CWT CWI CCW from line C
		unless ($ses_core->callFeature(-featureName => 'CWT CWI CCW', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CWT CWI CCW from line $list_dn[2]");
            print FH "STEP: Remove CWT CWI CCW from line $list_dn[2] - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Remove CWT CWI CCW from line $list_dn[2] - PASSED\n";
		}
		# Remove CXR from line B
		unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[1]");
            print FH "STEP: Remove CXR from line $list_dn[1] - FAILED\n";
			$result = 0;
			
        } else {
            print FH "STEP: Remove CXR from line $list_dn[1] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_057 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_057");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_057";
	my $tcid = "ADQ1104_057";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - PASS\n";
    }
# Add CWT CWI CCW CFB to line C
	unless ($ses_core->callFeature(-featureName => "CWT CWI CCW CFB P", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CWT CWI CCW for line $list_dn[2]");
		print FH "STEP: Add CWT CWI CCW CFB for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CWT CWI CCW CFB for line C($list_dn[2]) - PASSED\n";
    }
# Active CFB to forward to D
	unless ($ses_core->execCmd ("changecfx $list_len[2] CFB $list_dn[3] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFB for line $list_dn[2]");
		print FH "STEP: Active CFB for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFB for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3], $list_dn[4]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get CCW active code
	my $ccw_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'CCW');
    unless ($ccw_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CCW access code for line $list_dn[1]");
		print FH "STEP: Get CCW access code for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CCW is: $ccw_code \n";
        print FH "STEP: Get CCW access code for line C($list_dn[2]) - PASSED\n";
    }
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
	
# E calls C, C answers and C flashs
	%input = (
                -lineA => $list_line[4],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[4],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: E can't call C");
        print FH "STEP: E calls C, C answers and C flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: E calls C, C answers and C flashs - PASSED\n";
    }
	sleep (2);
# C dials CCW active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# C dials CCW acc
	$dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active CCW - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num to active CCW - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hears confirmation tone after activating CCW - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating CCW - PASSED\n";
    }
	sleep (2);
# Check speech path between E & C again
	%input = (
                -list_port => [$list_line[4], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between E,C");
        print FH "STEP: Verify speech path between E and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between E and C again - PASSED\n";
    }
# B calls C, D answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, D answers - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
			goto CLEANUP;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_057 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_057 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CFB|CWT|CWI|CCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove CWT CWI CCW CFB group and new line C
	if ($feature_added) {
		# Remove CWT CWI CCW CFB from line C
		unless ($ses_core->callFeature(-featureName => 'CWT CWI CCW CFB', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CWT CWI CCW CFB from line $list_dn[2]");
            print FH "STEP: Remove CWT CWI CCW CFB from line $list_dn[2] - FAILED\n";
			$result = 0;
			goto CLEANUP;
        } else {
            print FH "STEP: Remove CWT CWI CCW CFB from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_058 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_058");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_058";
	my $tcid = "ADQ1104_058";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	# my $trunk_access_code = $db_trunk{'isup'}{-acc};
	# my $monitor_num;
	# ($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    # $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Datafill the table TMTCNTL
	unless($ses_core->execCmd("table TMTCNTL")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table TMTCNTL");
	}
	unless($ses_core->execCmd("pos lnt")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot pos lnt");
	}
	unless($ses_core->execCmd("sub")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot enter sub");
	}
	
		unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos busy")) {
        if (grep /ERROR/, $ses_core->execCmd("add BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep BUSY Y S BUSY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'BUSY'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /BUSY/, $ses_core->execCmd("pos busy")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple BUSY in table TMTCNTL - PASS\n";
    }
# Add CWT CWI CCW 3WC to line C
	unless ($ses_core->callFeature(-featureName => "CWT CWI CCW 3WC", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CWT CWI CCW 3WC for line $list_dn[2]");
		print FH "STEP: Add CWT CWI CCW 3WC for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CWT CWI CCW 3WC for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Get CCW active code
	my $ccw_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'CCW');
    unless ($ccw_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CCW access code for line $list_dn[1]");
		print FH "STEP: Get CCW access code for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CCW is: $ccw_code \n";
        print FH "STEP: Get CCW access code for line C($list_dn[2]) - PASSED\n";
    }
# Associate LEA and SURV
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	sleep (2);
# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks and hears C-Tone but GLCAS can't detect this tone so we will skip the detectting C-Tone on LEA line
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }
# Verify LEA asscociated successfully with SURV
	unless(grep /CCR ASSOC DONE/, $ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot associate $ccr_id and $surv_name'");
        print FH "STEP: Associate between $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;
	
# D calls C, C answers and C flashs
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call C");
        print FH "STEP: D calls C, C answers and C flashs - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls C, C answers and C flashs - PASSED\n";
    }
# C dials CCW active code
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);
	
	# C dials CCW acc
	$dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num to active CCW - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num to active CCW - PASSED\n";
    }
	# Stop detect hear confirmation tone
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hears confirmation tone after activating CCW - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears confirmation tone after activating CCW - PASSED\n";
    }
	sleep (2);
# Check speech path between D & C again
	%input = (
                -list_port => [$list_line[3], $list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between D,C");
        print FH "STEP: Verify speech path between D and C again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between D and C again - PASSED\n";
    }
# B calls C, B hears BUSY tone
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, B hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, B hears BUSY tone - PASSED\n";
    }

# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep (2);
# C flashs to call B
	%input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[2]");
    }
# C calls B, B answers and C flashs to initiate 3WC conf
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK', 'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call B");
        print FH "STEP: C calls B, B answers and C flashs to initiate 3WC conf - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls B, B answers and C flashs to initiate 3WC conf - PASSED\n";
    }
	sleep (2);
# Line A (LEA) monitors the speech path between B, C and D
    %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B, C and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B, C and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B, C and D - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
			goto CLEANUP;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_058 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_058 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
			
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|3WC|CWT|CWI|CCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
			
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove CWT CWI CCW 3WC group and new line C
	if ($feature_added) {
		# Remove CWT CWI CCW 3WC from line C
		unless ($ses_core->callFeature(-featureName => 'CWT CWI CCW 3WC', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CWT CWI CCW 3WC from line $list_dn[2]");
            print FH "STEP: Remove CWT CWI CCW 3WC from line $list_dn[2] - FAILED\n";
			$result = 0;
			goto CLEANUP;
        } else {
            print FH "STEP: Remove CWT CWI CCW 3WC from line $list_dn[2] - PASSED\n";
		}
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_059 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_059");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_059";
	my $tcid = "ADQ1104_059";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $fr_line = 0;
	my $add_surv = 0;
    my (@list_file_name, $dialed_num, %info, @cmd, @verify);
	
    
# Which logs need to get
	
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 lab for LI - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 lab for LI - PASSED\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status	
	my $lea_info = "302 212_IBN L212_IBN";
	# New Line A (list_dn[0]) with 1FR mode to make it LEA line
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: New Line A ($list_dn[0]) with 1FR mode to make it into LEA line - PASSED\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $fr_line = 1;
   for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
############################## LI provisioning ##################################
	my $agency = "AUTO";
	my $ccr_id = 91;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'SURV'. $surv_name;
	my $trunk_access_code = $db_trunk{'isup'}{-acc};
	my $monitor_num;
	($monitor_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $monitor_num = $trunk_access_code . $monitor_num;
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'USNBD'");
    }
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CASEID_S1 $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $monitor_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot execute command '$cmd[$i]'");
            print FH "STEP: Execute command '$cmd[$i]' - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Execute command '$cmd[$i]' - PASSED\n";
        }
    }
	$add_surv = 1;
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CXR to line C
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[2]");
		print FH "STEP: Add CXR for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1], $list_dn[2], $list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Associate LEA and SURV
    # $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	# sleep (3);
	unless(grep /CCR ASSOC DONE/, $ses_core_li->execCmd("CCR ASSOC $ccr_id $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'CCR ASSOC $ccr_id $surv_name'");
        print FH "STEP: Associate between  $ccr_id and $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Associate between  $ccr_id and $surv_name - PASSED\n";
    }
# Active SURV
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot enter command 'SURV ACT $surv_name'");
        print FH "STEP: Activate the surv $surv_name - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate the surv $surv_name - PASSED\n";
    }
	$add_surv = 1;

# B calls C, C answers
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C, C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, C answers - PASSED\n";
    }

# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A (LEA) does not ring");
        print FH "STEP: Check line A (LEA) rings - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A (LEA) rings - PASSED\n";
    }
# A off-hooks
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_dn[0]");
        print FH "STEP: Offhook line A (LEA) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A (LEA) - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and C");
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and C - PASSED\n";
    }
# C flashs to call D
	%input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[2]");
    }
	sleep (1);
# C calls D, D doesn't answer and C on-hook to transfer this call
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA','offB'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call D");
        print FH "STEP: C calls D, D doesn't answer and C on-hook to transfer this call - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls D, D doesn't answer and C on-hook to transfer this call - PASSED\n";
    }
	sleep (1);
# Verify speech path between B and D
	%input = (
                -list_port => [$list_line[1], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B and D");
        print FH "STEP: Verify speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and D - PASSED\n";
    }

# Line A (LEA) monitors the speech path between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line A (LEA) can't monitor the speech path between B and D");
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Line A (LEA) monitors the speech path between B and D - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
			goto CLEANUP;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1104_059 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1104_059 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
			
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SURV|CCR|CXR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
			
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	################### Remove features added ######################
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot enter command '$_'");
                print FH "STEP: Execute the command '$_' - FAILED\n";
            } else {
                print FH "STEP: Execute the command '$_' - PASSED\n";
            }
        }
    }

    # Change the LCC of line A to IBN mode
    if ($fr_line) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Can't change the LCC of line A to IBN mode");
            print FH "STEP: Change the LCC of line A to IBN mode - FAILED\n";
        } else {
            print FH "STEP: Change the LCC of line A to IBN mode - PASSED\n";
        }
    }
	# Remove CXR from C
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[2]");
            print FH "STEP: Remove CXR from line $list_dn[2] - FAILED\n";
			$result = 0;
			goto CLEANUP;
        } else {
            print FH "STEP: Remove CXR from line $list_dn[2] - PASSED\n";
		}	
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_060 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_060");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_060";
	my $tcid = "ADQ1104_060";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;
	

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineC = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# Change LCC of LEA into 1FR (Line B)
	
	%input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[1], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - PASS\n";
    }
	$change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 2; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	my ($dialed_num1) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num1 = $trunk_access_code . $dialed_num1;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[2] NILC NILLATA",
            "SURV ADD DN $list_dn[2] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE PAIRED LINE SW $dialed_num $dialed_num1 y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Add feature DTM for line C
  unless ($ses_core->callFeature(-featureName => 'DTM', -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DTM for line C $list_dn[2]");
		print FH "STEP: add DTM for line C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DTM for line C $list_dn[2] - PASS\n";
    }
     
    unless(grep /DTM/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add DTM for line $list_dn[2] ");
        print FH "STEP: Verify DTM was added for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP:  Verify DTM was added for line $list_dn[2] - PASS\n";
    }	 
	
	$add_feature_lineC = 0;	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
   	# D hears dial tone
	
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
	 unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line D $list_dn[3]");
        print FH "STEP: D hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASS\n";
    }
    	
	#########################################
	
	# D dials DN(C), D hears busy tone
	 %input = (
                -line_port => $list_line[3],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] ");
        print FH "STEP: D dials DN C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials DN C - PASS\n";
    }
	
	 # Check line D hears busy tone
    %input = (
                -line_port => $list_line[3], 
                -busy_tone_duration => 2000, 
                -cas_timeout => 50000,
                -wait_for_event_time => 30
                ); 
    unless ($ses_glcas->detectBusyToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot detect busy tone for line D");
        print FH "STEP: Check line D hears busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D hears busy tone - PASS\n";
    }
	
    # Onhook line D
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line D - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# C make call to line D, C hears ringback tone, A,B will ring
	 %input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] ");
        print FH "STEP: C dials DN D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials DN D - PASS\n";
    }

     # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }
	
	# Check line D ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line B ringing
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	
	# Offhook line D
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify speech path between C and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between C and D");
        print FH "STEP: Check speech path between C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and D - PASS\n";
    }
	
	# LEA A can monitor outgoing of line C
     %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA A can monitor outgoing of line C ");
        print FH "STEP: LEA A can monitor outgoing of line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A can monitor outgoing of line C  - PASS\n";
    }
	
	
	# LEA B can monitor incoming of line C
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA B can monitor incoming of line D");
        print FH "STEP: LEA B can monitor incoming of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA B can monitor incoming of line D - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        # @output = $ses_logutil->execCmd("open amab;back all");
        # unless ((grep /CALLING DN.*$list_dn[0]/, @output) and (grep /CALLED DN.*$list_dn[1]/, @output) and (grep /CALLED DN.*$list_dn[2]/, @output)) {
            # $logger->error(__PACKAGE__ . " $tcid: missing AMAB in logutil");
            # $result = 0;
            # print FH "STEP: Check AMAB - FAIL\n";
        # } else {
            # print FH "STEP: Check AMAB - PASS\n";
        # }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
					
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA A to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA A to IBN - PASS\n";
        }
    }
	
	 if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[1], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[1]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA B to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA B to IBN - PASS\n";
        }
    }
	#################################################################
	# remove DTM from line C
    unless ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DTM', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DTM from line $list_dn[2]");
            print FH "STEP: Remove DTM from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DTM from line $list_dn[2] - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_061 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_061");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_061";
	my $tcid = "ADQ1104_061";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $mlh_added = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[3] NILC NILLATA",
            "SURV ADD DN $list_dn[3] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

# Out B, C
	$ses_core->execCmd ("servord");
	if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[1] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[1] ");
            print FH "STEP: OUT line B $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: OUT line B $list_dn[1] - PASS\n";
        }
    
	if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[2] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot OUT line $list_dn[2] ");
            print FH "STEP: OUT line C $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: OUT line C $list_dn[2] - PASS\n";
        }
    
	
	# Add MLH
	
    $ses_core->execCmd("est \$ MLH $list_dn[1] $list_line_info[1] \+");
	$ses_core->{conn}->print("$list_len[1] $list_len[2] ibn \+");
    $ses_core->{conn}->print(" \$ DGT \$ 3 y y");
    $ses_core->{conn}->print(" ");
	
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
	
   
    unless (grep /MLH/, $ses_core->execCmd("qdn $list_dn[1]")) {
        print FH "STEP: add MLH for line $list_dn[1] and $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MLH for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
	$mlh_added = 0;
	
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	# Offhook line D
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }
	# D hears dial tone
	
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
	 unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line D $list_dn[3]");
        print FH "STEP: D hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASS\n";
    }
	
	# D dials DN(B), B ring and A will ring too
	 %input = (
                -line_port => $list_line[3],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: D dials DN B  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials DN B  - PASS\n";
    }
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	

	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify speech path between B and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and D");
        print FH "STEP: LEA can monitor the call between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and D - PASS\n";
    }
	
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	# remove MLH
    unless ($mlh_added) {
		# $ses_core->execCmd("servord");
	    # $ses_core->execCmd("del \$ mlh $list_len[2] \$");
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("del \$ mlh $list_len[2] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after DEL fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot delete member $list_dn[2] from MLH group");
            print FH "STEP: delete member $list_dn[2] from MLH group - FAIL\n";
        } else {
            print FH "STEP: delete member $list_dn[2] from MLH group - PASS\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[1] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot out line $list_dn[1]");
            print FH "STEP: out line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: out line $list_dn[1] - PASS\n";
        }

       
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2] ");
            print FH "STEP: NEW line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_062 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_062");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_062";
	my $tcid = "ADQ1104_062";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
   
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	# Add feature 3WC for line B
  unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line C $list_dn[1]");
		print FH "STEP: add 3WC for line C $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line C $list_dn[1] - PASS\n";
    }

	 $add_feature_lineB = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	
	# B dials DN(C), C ring and A will ring too
	 %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and check speech path");
        print FH "STEP: B calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and check speech path - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	# B flashes
	
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	# B hears dial tone
	
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears recall dial tone - PASS\n";
    }
	
	# # LEA A hears silent in this time
    # %input = (
                # -list_port => [$list_line[1],$list_line[2]],
                # -cas_timeout => 20000,
                # -lea_port => $list_line[0],
                # ); 
    # if ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        # print FH "STEP: LEA A hears silent in this time - FAIL\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: LEA A hears silent in this time - PASS\n";
    # }
		
	
	# B dials DN(D), but D doesn't answers
	($dialed_num) = $list_dn[3];
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] ");
        print FH "STEP: B dials DN D  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials DN D  - PASS\n";
    }
	
	
	# Check line D ring
	 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line D does not ring");
        print FH "STEP: Check line D ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ring - PASS\n";
    }
	

	# B flashes again
	
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash again - PASS\n";
		
    }
	
	 # Check Ringback tone line B
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }
	
	# LEA A still can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA A still can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A still can monitor the call between B and C - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	
	# remove 3WC from line B
    unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[1]");
            print FH "STEP: Remove 3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[1] - PASS\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_063 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_063");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_063";
	my $tcid = "ADQ1104_063";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;
	

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineC = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
   
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# Change LCC of LEA into 1FR (Line B)
	
	%input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[1], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA B into 1FR (Line $list_dn[1]) - PASS\n";
    }
	$change_lcc = 1;
	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	my ($dialed_num1) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num1 = $trunk_access_code . $dialed_num1;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[2] NILC NILLATA",
            "SURV ADD DN $list_dn[2] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE PAIRED LINE SW $dialed_num $dialed_num1 y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	
# Add CWT, CWI to line C
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[2]");
            print FH "STEP: add $_ for line $list_dn[2] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[2] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineC = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[3]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	# D dials DN(C), C ring then A,B will ring
	%input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls C via ISUP and check speech path");
        print FH "STEP: D calls C via ISUP and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls C via ISUP and check speech path - PASS\n";
    }
	
	# Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line B ringing
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
  
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	
	# LEA A can monitor outgoing of line C
     %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA A can monitor outgoing of line D ");
        print FH "STEP: LEA A can monitor outgoing of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A can monitor outgoing of line D  - PASS\n";
    }
	
	
	# LEA B can monitor incoming of line C 
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA B can monitor incoming of line D");
        print FH "STEP: LEA B can monitor incoming of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA B can monitor incoming of line D - PASS\n";
    }
	
	# E calls C and hear ringback tone, C hear CWT tone
	
	# Offhook line E
    unless($ses_glcas->offhookCAS(-line_port => $list_line[4], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[4]");
        print FH "STEP: Offhook line E - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line E - PASS\n";
    }
    
	# Check dials tone from line E
    %input = (
                -line_port => $list_line[4],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: E hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: E hears dial tone - PASS\n";
    }

    # E dials DN(C), C hears CWT tone
    %input = (
                -line_port => $list_line[4],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
        print FH "STEP: E dials C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: E dials C - PASS\n";
    }

    # Check CWT tone line C
    %input = (
                -line_port => $list_line[2],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C hears Call waiting tone");
        print FH "STEP: C hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears Call waiting tone - PASS\n";
    }
	# C flash to answer E
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash - PASS\n";
    }
    sleep(2);
	
	# Check speech path E and C
    %input = (
                -list_port => [$list_line[4],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between E and C");
        print FH "STEP: Check speech path between E and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between E and C - PASS\n";
    }
	
	# LEA A hears slient tone at  outgoing of line D
     %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    if ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA A hears slient tone at  outgoing of line D ");
        print FH "STEP: LEA A hears slient tone at  outgoing of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A hears slient tone at  outgoing of line D  - PASS\n";
    }
	
	
	# LEA B hears slient tone at incoming of line D
    %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    if ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA B hears slient tone at incoming of line D");
        print FH "STEP: LEA B hears slient tone at incoming of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA B hears slient tone at incoming of line D - PASS\n";
    }
	
	# C flash again to answer E
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash again - PASS\n";
    }
	
	# LEA A still can monitor outgoing of line C
     %input = (
                -list_port => [$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA A can monitor outgoing of line D ");
        print FH "STEP: LEA A can monitor outgoing of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A can monitor outgoing of line D  - PASS\n";
    }
	
	
	# LEA B still can monitor incoming of line C
    %input = (
                -list_port => [$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA B can monitor incoming of line D");
        print FH "STEP: LEA B can monitor incoming of line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA B can monitor incoming of line D - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        # @output = $ses_logutil->execCmd("open amab;back all");
        # unless ((grep /CALLING DN.*$list_dn[0]/, @output) and (grep /CALLED DN.*$list_dn[1]/, @output) and (grep /CALLED DN.*$list_dn[2]/, @output)) {
            # $logger->error(__PACKAGE__ . " $tcid: missing AMAB in logutil");
            # $result = 0;
            # print FH "STEP: Check AMAB - FAIL\n";
        # } else {
            # print FH "STEP: Check AMAB - PASS\n";
        # }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA A to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA A to IBN - PASS\n";
        }
    }
	
	 if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[1], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[1]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA B to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA B to IBN - PASS\n";
        }
    }
	#################################################################
	# Remove service from line C
    if ($add_feature_lineC) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_064 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_062");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_064";
	my $tcid = "ADQ1104_064";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn}, $db_line{$tc_line{$tcid}[4]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line}, $db_line{$tc_line{$tcid}[4]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region}, $db_line{$tc_line{$tcid}[4]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len}, $db_line{$tc_line{$tcid}[4]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info}, $db_line{$tc_line{$tcid}[4]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
	
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
	
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	# Add feature 3WC for line B
  unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line C $list_dn[1]");
		print FH "STEP: add 3WC for line C $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line C $list_dn[1] - PASS\n";
    }

	 $add_feature_lineB = 0;
	 
	 # Add CFD to line C
    unless ($ses_core->callFeature(-featureName => "CFD N $list_dn[3]", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[2]");
		print FH "STEP: add CFD for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;
	
	# Activate CFD
    unless ($ses_core->execCmd("Servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    unless ($ses_core->execCmd("changecfx $list_len[2] CFD $list_dn[3] A")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'changecfx'");
    }

    unless (grep /CFD.*\sA\s/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFD for line $list_dn[2]");
        print FH "STEP: line C activate CFD for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: line C activate CFD for line $list_dn[2] - PASS\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2], $list_dn[4]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	
	# B dials DN(E), A stop C-tone
	 %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[4],
                -dialed_number => $list_dn[4],
                -regionA => $list_region[1],
                -regionB => $list_region[4],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls E and check speech path");
        print FH "STEP: B calls E and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls E and check speech path - PASS\n";
    }
	
		
	# LEA A can monitor the call between B and E
    %input = (
                -list_port => [$list_line[1],$list_line[4]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and E");
        print FH "STEP: LEA can monitor the call between B and E - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and E - PASS\n";
    }
	
	# B flashes
	
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	# B hears dial tone
	
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears recall dial tone - PASS\n";
    }
	
	# # LEA A hears silent in this time
    # %input = (
                # -list_port => [$list_line[1],$list_line[4]],
                # -cas_timeout => 20000,
                # -lea_port => $list_line[0],
                # ); 
    # if ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and E");
        # print FH "STEP: LEA A hears silent in this time - FAIL\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: LEA A hears silent in this time - PASS\n";
    # }
	
	# B dials DN(C), but C doesn't answers
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] ");
        print FH "STEP: B dials DN C  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials DN C  - PASS\n";
    }
	
	# Check line C ringing
	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C does not ring");
        print FH "STEP: Check line C ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ring - PASS\n";
    }
	
	# B flashes again
	
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash again - PASS\n";
		
    }
	
	 # Check Ringback tone line B
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }
	
	sleep(5);
	
	# Check line D ringging
	 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line D does not ring");
        print FH "STEP: Check line D rings - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D rings - PASS\n";
    }
    
	# Offhook line D
	
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }
	
	# Verify speech path between B and D,E
	 %input = (
                -list_port => [$list_line[1],$list_line[3],$list_line[4]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D,E");
        print FH "STEP: Check speech path between B and D,E - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D,E - PASS\n";
    }
	
	# LEA A still can monitor the call between B and E,D
    %input = (
                -list_port => [$list_line[1],$list_line[4],$list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and E,D");
        print FH "STEP: LEA A still can monitor the call between B and E,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A still can monitor the call between B and E,D - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
					
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	
	# remove 3WC from line B
    unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[1]");
            print FH "STEP: Remove 3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[1] - PASS\n";
        }
    }
	
	# remove CFD from line C
    unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[2]");
            print FH "STEP: Remove CFD from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[2] - PASS\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_065 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_065");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_065";
	my $tcid = "ADQ1104_065";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
   
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE DE $list_dn[0] y y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

	# Add feature CNF for line B
  unless ($ses_core->callFeature(-featureName => 'CNF C06', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line C $list_dn[1]");
		print FH "STEP: add CNF for line C $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line C $list_dn[1] - PASS\n";
    }

	 $add_feature_lineB = 0;
     # Get 6WC access code
	
   	 my $cnf_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CONF');
    unless ($cnf_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get 6WC access code for line B $list_dn[1]");
		print FH "STEP: get 6WC access code for line B $list_dn[1] is $cnf_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get 6WC access code for line B $list_dn[1] is $cnf_code - PASS\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[2]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
	#Check line A ringing
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }
    # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	
	# B dials DN(C), A stop C-tone
	 %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and check speech path");
        print FH "STEP: B calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and check speech path - PASS\n";
    }
	
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	# B flashes
	
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials acc_code 6WC - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials acc_code 6WC - PASS\n";
    }
	
	# Verify speech path between B and C
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
					
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	
	# remove CNF from line B
    unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[1]");
            print FH "STEP: Remove CNF from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[1] - PASS\n";
        }
    }
	
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_066 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_066");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_066";
	my $tcid = "ADQ1104_066";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify, $ses_core1, $ses_cli);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
	 unless ($ses_core1 = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_core1->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
	
	unless ($ses_cli = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CLISessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab with CLI mode - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 Lab with CLI mode - PASSED\n";
    }
    
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
  
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
		
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################


	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	
	# B dials DN(C), C ring and A will ring too
	 %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and check speech path");
        print FH "STEP: B calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and check speech path - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	# Using command "restart warm active" to perform warm restart core
	# Excute "restart warm active".
	unless (grep /CI/, $ses_core1 -> execCmd("quit all")) {
       $logger->error(__PACKAGE__ . ": Could not be in CI mode");
       print FH "STEP: Turn back CI mode - FAILED\n";
       $result = 0;	  
	   goto CLEANUP;
     } else {
	   print FH "STEP: Turn back CI mode - PASSED \n"; 
	}
	my @warm_restart;
	unless (grep /YES|Y|NO|N/, @warm_restart = $ses_core1 -> execCmd("restart warm active")) {
       $logger->error(__PACKAGE__ . ": Enter command 'restart warm active' incorrectly");
       print FH "STEP: Enter command 'restart warm active'  - FAILED\n";
       $result = 0;	  
	   goto CLEANUP;
     } else {
	   print FH "STEP: Enter command 'restart warm active' - PASSED \n"; 
	}
	if (grep /YES|Y|NO|N/, @warm_restart){
		unless ($ses_core1 -> execCmd("Y"))
		{
			$logger->debug(__PACKAGE__ . ": WARM RESTART CORE can't execute");
			print FH "STEP: Confirm Y to run restart Core - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			$logger->debug(__PACKAGE__ . ": WARM RESTART CORE is in-progress");
			print FH "STEP: Confirm Y to run restart Core - FAILED\n";
			}
	}
	sleep (1200);

# Verify the system is covered
    $ses_cli ->{conn}->prompt('/>/');
	unless (grep /cli/, $ses_cli -> execCmd("cli")){
		$logger->error(__PACKAGE__ . ": Can't be in cli mode");
		print FH "STEP: Turn back cli mode to verify system in-sync - FAILED\n";
	} else {
		print FH "STEP: Turn back cli mode to verify system in-sync - PASSED\n";
	}

	unless (grep /in-sync/, $ses_cli -> execCmd("sosAgent vca show VCA")){
		$logger->error(__PACKAGE__ . ": Can't enter command sosAgent vca show VCA");
		print FH "STEP: Verify system is recoverd successfully - FAILED\n";
	} else {
		print FH "STEP: Verify system is recoverd successfully - PASSED\n";
	}
	
	# Verify speech path between B and C
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A still can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA A still can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A still can monitor the call between B and C - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

sub ADQ1104_067 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1104_067");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1104_067";
	my $tcid = "ADQ1104_067";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1104");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $change_lcc = 0;
	my $add_surv = 0;
    my $flag = 1;
	my $add_feature_lineB = 1;
	my $gwc_id = 22;
    my (@list_file_name, $dialed_num,  %info, @cmd, @verify, $ses_core1, $ses_cli, $ses_cli1);
	my $lea_info = "302 212_IBN L212_IBN";
	my $agency = "TUYEN_AGENCY";
	my $ccr_id = 320;
	my ($surv_name) = ($list_dn[1] =~ /\d{6}(\d+)/);
    $surv_name = 'TUYEN'. $surv_name;
	
    my $trunk_access_code = $db_trunk{'isup_1'}{-acc};
	
	
# Which logs need to get
	#@log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA15 core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 for tapi trace- PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
		print FH "STEP: Login TMA15 core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASSED\n";
    }
    
	unless ($ses_cli = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CLISessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab with CLI mode - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 Lab with CLI mode - PASSED\n";
    }
	unless ($ses_cli1 = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CLISessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 Lab with CLI mode - FAILED\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 Lab with CLI mode - PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..8]], -password => [@{$core_account_li{-password}}[0..8]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core for LI");
		print FH "STEP: Login TMA15 LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 LI - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
   
	# Change LCC of LEA into 1FR (Line A)
    %input = (
                    -function => ['OUT','NEW'],
                    -lineDN => $list_dn[0], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $lea_info
                );
    unless ($ses_core->resetLine(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC into 1FR");
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Change LCC of LEA A into 1FR (Line $list_dn[0]) - PASS\n";
    }
	
	unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL");
            print FH "STEP: Check line $list_dn[0] IDL status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[0] IDL status - PASSED\n";
        }
    $change_lcc = 1;
	
	# New line with IBN mode
    for (my $i = 1; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

	
	# LI provisioning
    unless(grep /USNBD/, $ses_core_li->execCmd("USNBD")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'USNBD'");
    }
    $add_surv = 1;
    
	($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    
    @cmd = (
            "AGENCY ADD $agency 212 NYPUB L212 $list_dn[1] NILC NILLATA",
            "SURV ADD DN $list_dn[1] CaseId_TUYEN $surv_name Y Y N N N N $agency",
            "CCR ADD $ccr_id VOICE COMBINED LINE SW $dialed_num y $agency",
            );
    @verify = (
                'AGENCY ADD DONE',
                'SURV ADD DONE',
                'CCR ADD DONE',
            );
    for (my $i = 0; $i <= $#cmd; $i++) {
        unless(grep /$verify[$i]/, $ses_core_li->execCmd($cmd[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command '$cmd[$i]'");
            print FH "STEP: $cmd[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: $cmd[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################


	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..9]], 
					-password => [@{$core_account{-password}}[6..9]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Assoc and activate LI
    $ses_core_li->{conn}->print("CCR ASSOC $ccr_id $surv_name");
	
    unless($ses_core_li->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: cannot done command assoc");
        print FH "STEP: Assoc $ccr_id $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Assoc $ccr_id $surv_name - PASS\n";
    }
    	
    unless(grep /SURV ACT DONE/, $ses_core_li->execCmd("SURV ACT $surv_name")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'SURV ACT $surv_name'");
        print FH "STEP: Activate $surv_name - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Activate $surv_name - PASS\n";
    }
	
	#########################################
	
	
	# B dials DN(C), C ring and A will ring too
	 %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and check speech path");
        print FH "STEP: B calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and check speech path - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	
	# Offhook line A
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
		
	# LEA A can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between B and C - PASS\n";
    }
	
	# Check unit_active on GWC-22
	
	# Login cli mode from CLI session
	$ses_cli ->{conn}->prompt('/>/');
	unless (grep /cli/, $ses_cli -> execCmd("cli")){
		$logger->error(__PACKAGE__ . ": Can't login to cli mode");
		print FH "STEP: Login to cli mode from CLI session - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "STEP: Login to cli mode from CLI session - PASSED\n";
	}
	my @state_unit;
	unless (grep /active||standby/, @state_unit = $ses_cli -> execCmd("aim si-assignment show gwc$gwc_id")){
		$logger->error(__PACKAGE__ . ": Can't enter command aim si-assignment show gwc$gwc_id");
		print FH "STEP: Enter command aim si-assignment show gwc$gwc_id - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "STEP: Enter command aim si-assignment show gwc$gwc_id - PASSED\n";
	}
	# Determine unit active on GWC-3
	my $unit_active;
	foreach (@state_unit){
		if ($_ =~ /\s+(\d+)\s+SI_1\s+active/){
			$unit_active = $1;
			print FH "The unit active on GWC-$gwc_id is: $unit_active\n";
		} 
	}
	
	# Execue swact gwc for unit active  
	unless (grep /confirm/,$ses_cli -> execCmd("aim service-unit swact gwc$gwc_id $unit_active f")){
		$logger->error(__PACKAGE__ . ": Can't swact gwc$gwc_id");
		print FH "STEP: swact unit $unit_active active on gwc$gwc_id - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "STEP: swact unit $unit_active active on gwc$gwc_id - PASSED\n";
	}
	
	$ses_cli->{conn}->print("y");
	sleep (15);
	
	# Check status of unit active after swact 
	$ses_cli1 ->{conn}->prompt('/>/');
	unless (grep /cli/, $ses_cli1 -> execCmd("cli")){
		$logger->error(__PACKAGE__ . ": Can't login to cli mode");
		print FH "STEP: Login to cli mode from CLI session - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "STEP: Login to cli mode from CLI session - PASSED\n";
	}
	unless (grep /active/, $ses_cli1 -> execCmd("aim si-assignment show gwc$gwc_id")){
		$logger->error(__PACKAGE__ . ": Can't enter command aim si-assignment show gwc$gwc_id");
		print FH "STEP: Enter command aim si-assignment show gwc$gwc_id - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "STEP: Enter command aim si-assignment show gwc$gwc_id - PASSED\n";
	}
	
	sleep(5);
	# Verify speech path between B and C
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# LEA A still can monitor the call between B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[0],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and C");
        print FH "STEP: LEA A still can monitor the call between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA A still can monitor the call between B and C - PASS\n";
    }
	
################################## Cleanup Tuyen ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup Tuyen ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
     unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
			
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless ((grep /Log empty/, @output) or grep /MTCMAINP|SYSAUDP|USRSYSMG|CALLP|TDLDPR|CXNADDRV|TPCIPPR|NBDAUDIT|MTCAUXP|TPCIPPR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
			
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
			
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
			
        }
       
    }
	
	
	
	##############################################################
	
	# Rollback LI
    if ($add_surv) {
        @cmd = (
                "SURV DEACT $surv_name",
                "CCR DISASSOC $ccr_id",
                "CCR DEL $ccr_id",
                "SURV DEL $surv_name",
                "AGENCY DEL $agency",
                );
        foreach (@cmd) {
            unless($ses_core_li->execCmd($_)) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command '$_'");
                print FH "STEP: $_ - FAIL\n";
            } else {
                print FH "STEP: $_ - PASS\n";
            }
        }
    }

    # Rollback LCC of LEA to IBN
    if ($change_lcc) {
        %input = (
                        -function => ['OUT','NEW'],
                        -lineDN => $list_dn[0], 
                        -lineType => '', 
                        -len => '', 
                        -lineInfo => $list_line_info[0]
                    );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[2] cannot change LCC of LEA into IBN");
            print FH "STEP: Rollback LCC of LEA to IBN - FAIL\n";
        } else {
            print FH "STEP: Rollback LCC of LEA to IBN - PASS\n";
        }
    }
	
	################################################################
	
	################################################################
    close(FH);
    &ADQ1104_cleanup();
    &ADQ1104_checkResult($tcid, $result);
}

##################################################################################
sub AUTOLOAD {
  
    our $AUTOLOAD;
  
    my $warn = "$AUTOLOAD  ATTEMPT TO CALL $AUTOLOAD FAILED (INVALID TEST)";
  
    if( Log::Log4perl::initialized() ) {
        
        my $logger = Log::Log4perl->get_logger($AUTOLOAD);
        $logger->warn( $warn );
    }
    else {
        Log::Log4perl->easy_init($DEBUG);
        WARN($warn);
    }
}

1;