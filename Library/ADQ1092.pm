#**************************************************************************************************#
#FEATURE                : <CallP&Service International> 
#FEATURE ENGINEER       : <FEATURE ENGINEER NAME>
#AUTOMATION ENGINEER    : <Che Tuyen>
#**************************************************************************************************#

# Note: check in "table ofcvar XLAPLAN_RATEAREA_SERVORD_ENABLED OFF" to run DNH function


our %TESTBED;
our $TESTSUITE;

package QATEST::ADQ1092::ADQ1092;

use strict;
use Tie::File;
use File::Copy;
use Cwd qw(cwd);
use Data::Dumper;
use threads;
#********************************* LIST OF LIBRARIES***********************************************#

use ATS;
use SonusQA::Utils qw (:all);

#**************************************************************************************************#

use Log::Log4perl qw(get_logger :levels);
my $logger = Log::Log4perl->get_logger(__PACKAGE__);

##################################################################################
#  GLCAS::TEMPLATE                                                              #
##################################################################################
#  This package tests for the GL.                                                #
##################################################################################

##################################################################################
# SETUP                                                                          #
##################################################################################


# Required Testbed elements for this package

my %REQUIRED = ( 
        "C20" => [1],
        "GLCAS" => [1],
               );

################################################################################
# VARIABLES USED IN THE SUITE Defined HERE                                     #
################################################################################
our $dir = cwd;
our $user_name;
if ($dir =~ /home\/(\w\w*)\/ats_repos/ ) {
    $user_name = $1;
}

our ($sec,$min,$hour,$mday,$mon,$year,$wday, $yday,$isdst) = localtime(time);
our $datestamp = sprintf "%4d%02d%02d-%02d%02d%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;
our ($ses_core, $ses_glcas, $ses_logutil, $ses_tapi, $ses_tapi_1, $ses_tapi1, $ses_core_li, $ses_cli, $ses_calltrak);
our (%input, @output, $tcid);
our %core_account = ( 
                    -username => [
                                    'testshell1','testshell2','testshell3','testshell4','testshell5',
                                    'testshell6','testshell7','testshell8','testshell9','testshell10',
                                    'testshell11','testshell12','testshell13','testshell14','testshell15',
                                    'testshell16','testshell17','testshell18','testshell19','testshell20',],
                    -password => [
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation'],
                    );
# For LI
our %core_account_li = ( 
                    -username => ['liadmin', 'hoang', 'phuc', 'tuyen'], 
                    -password => ['liadmin', 'hoang', 'phuc', 'tuyen']
                    );
# Info for OSSGATE
our @ossgate = ('cmtg', 'cmtg');
# For GLCAS
our @cas_server = ('10.250.185.232', '10024');
our $sftp_user = 'gbautomation';
our $sftp_pass = '12345678x@X';
our $wait_for_event_time = 30;
our $tapilog_dir = '/home/ntthuyhuong/Tapi_hnphuc/';
our $li_user = 'liadmin';
our $pass_li = "123456";

my $alias_hashref = SonusQA::Utils::resolve_alias($TESTBED{"c20:1:ce0"});
our ($gwc_user) = $alias_hashref->{LOGIN}->{1}->{USERID};
our ($gwc_pwd) = $alias_hashref->{LOGIN}->{1}->{PASSWD};
our ($root_pass) = $alias_hashref->{LOGIN}->{1}->{ROOTPASSWD};

####################### Which logs need to get ########################################
our @log_type = (1, 1, 1, 1); # get logutil, pcm, tapi, calltrak respectively

# Line Info
our %db_line = (
                'V52_1' => {
                            -line => 35,
                            -dn => 1514004318,
                            -region => 'US',
                            -len => 'V52   00 0 00 18',
                            -info => 'IBN AUTO_GRP 0 0',
                            },
                'V52_2' => {
                            -line => 31,
                            -dn => 1514004316,
                            -region => 'US',
                            -len => 'V52   00 0 00 16',
                            -info => 'IBN AUTO_GRP 0 0',
                            },
                'V52_3' => {
                            -line => 9,
                            -dn => 1514004314,
                            -region => 'US',
                            -len => 'V52   00 0 00 14',
                            -info => 'IBN AUTO_GRP 0 0',
                            },
                'V52_4' => {
                            -line => 17,
                            -dn => 1514004315,
                            -region => 'US',
                            -len => 'V52   00 0 00 15',
                            -info => 'IBN AUTO_GRP 0 0',
                            },
                
                );

our %tc_line = (
                'ADQ1092_001' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_002' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_003' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_004' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_005' => ['V52_1','V52_2'],
				'ADQ1092_006' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_007' => ['V52_1','V52_2'],
				'ADQ1092_008' => ['V52_1','V52_2'],
                'ADQ1092_009' => ['V52_1','V52_2'],
				'ADQ1092_010' => ['V52_1','V52_2'],
				'ADQ1092_011' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_012' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_013' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_014' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_015' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_016' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_017' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_018' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_019' => ['V52_1','V52_2'],
				'ADQ1092_020' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_021' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_022' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_023' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_024' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_025' => ['V52_1','V52_2'],
				'ADQ1092_026' => ['V52_1','V52_2'],
				'ADQ1092_027' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_028' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_029' => ['V52_1','V52_2'],
				'ADQ1092_030' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_031' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_032' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_033' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_034' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_035' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_036' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_037' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_038' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_039' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_040' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_041' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_042' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_043' => ['V52_1','V52_2','V52_3','V52_4'],
                'ADQ1092_044' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_045' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_046' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_047' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_048' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_049' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_050' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_051' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_052' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_053' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_061' => ['V52_1','V52_2','V52_3'],
				'ADQ1092_062' => ['V52_1','V52_2','V52_3'],
				
				
				'ADQ1092_063' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_064' => ['V52_1','V52_2','V52_3','V52_4'],
				'ADQ1092_065' => ['V52_1','V52_2','V52_3','V52_4'],
				
				
);

#################### Trunk info ###########################
our %db_trunk = (
                'cas_r2' => {
                                -acc => 204,
                                -region => 'US',
                                -clli => 'T2MG9ETSIPRI2W',
                            },
				'sst' =>{
                                -acc => 388,
                                -region => 'US',
                                -clli => 'T2SSTETSIV2',
                            },
				'pri_1' => {
                                -acc => 202,
                                -region => 'US',
                                -clli => 'AUTOETSIPRIEN2W',
                            },		
                'tw_isup' =>{
                                -acc => 506,
                                -region => 'US',
                                -clli => 'AUTOG9C7ETSI2W',
                            },
				'g6_pri' =>{
                                -acc => 606,
                                -region => 'US',
                                -clli => 'G6STM1PRITEXT2W',
                            },
               
                );

##################################################################################
sub configured {
    # Check configured resources match REQUIRED
    if ( SonusQA::ATSHELPER::checkRequiredConfiguration ( \%REQUIRED, \%TESTBED ) ) {
        $logger->info(__PACKAGE__ . ": Found required devices in TESTBED hash"); 
    } else {
        $logger->error(__PACKAGE__ . ": Could not find required devices in TESTBED hash"); 
        return 0;
    }  
}

sub ADQ1092_cleanup {
    my $subname = "ADQ1092_cleanup";
    $logger->debug(__PACKAGE__ ." . $subname . DESTROYING OBJECTS");
    my @end_ses = (
                    $ses_core, $ses_glcas, $ses_logutil, $ses_calltrak, $ses_tapi, $ses_tapi_1, $ses_core_li
                    );
    foreach (@end_ses) {
        if (defined $_) {
            $_->DESTROY();
            undef $_;
        }
    }
    return 1;
}

sub ADQ1092_checkResult {
    my ($tcid, $result) = (@_);
    my $subname = "ADQ1092_checkResult";
    $logger->debug(__PACKAGE__ . ".$tcid: Test result : $result");
    if ($result) { 
        $logger->debug(__PACKAGE__ . ".$tcid  Test case passed ");
            SonusQA::ATSHELPER::printPassTest($tcid);
            return 1;
    } else {
        $logger->debug(__PACKAGE__ . ".$tcid  Test case failed ");
            SonusQA::ATSHELPER::printFailTest($tcid);
            return 0;
    }
}

##################################################################################
# TESTS                                                                          #
##################################################################################

our @TESTCASES = (
                    
					"ADQ1092_001",
					"ADQ1092_002",
					"ADQ1092_003",
					"ADQ1092_004",
					"ADQ1092_005",
					"ADQ1092_006",
					"ADQ1092_007",
					"ADQ1092_008",
					"ADQ1092_009",
					"ADQ1092_010",
					"ADQ1092_011",
					"ADQ1092_012",
					"ADQ1092_013",
                    "ADQ1092_014",
					"ADQ1092_015",
					"ADQ1092_016",
					"ADQ1092_017",   #---> Need to manual check CRK option in table "CUSTHEAD", B is hold and hears ringback tone set
					"ADQ1092_018",
					"ADQ1092_019",
					"ADQ1092_020",
					"ADQ1092_021",
					"ADQ1092_022",
					"ADQ1092_023",
					"ADQ1092_024",
					"ADQ1092_025",
                    "ADQ1092_026",
					"ADQ1092_027",   #-----> Need to manual check tuble SACB in table CUSTSTN : add auto_grp spp spp 2 y
					"ADQ1092_028",
					"ADQ1092_029",
					"ADQ1092_iservopt", # for run CEPT TCS
					"ADQ1092_030",
					"ADQ1092_031",
					"ADQ1092_032",
					"ADQ1092_033",
					"ADQ1092_034",
					"ADQ1092_035",
					"ADQ1092_036",
					"ADQ1092_037",
                    "ADQ1092_038",
					"ADQ1092_039",
                    "ADQ1092_040",
					"ADQ1092_041",
					"ADQ1092_042",
					"ADQ1092_043",
					"ADQ1092_044",
					"ADQ1092_045",
                    "ADQ1092_046",
					"ADQ1092_047",   
					"ADQ1092_048",
					"ADQ1092_049",
                    "ADQ1092_050",
					"ADQ1092_051",
                    "ADQ1092_052",   #sst 
					"ADQ1092_053",
					"ADQ1092_061",
					"ADQ1092_062",
				    # "ADQ1092_064",  #DRING with type=4
					# "ADQ1092_065",  #DRING with type=3
					
                );

############################### Run Test #####################################
sub runTests {
    unless ( &configured ) {
        $logger->error(__PACKAGE__ . ": Could not configure for test suite ".__PACKAGE__); 
        return 0;
    }

    $logger->debug(__PACKAGE__ . " ======: before Opening Harness");
    my $harness;
    unless($harness = SonusQA::HARNESS->new( -suite => __PACKAGE__, -release => "$TESTSUITE->{TESTED_RELEASE}", -variant => $TESTSUITE->{TESTED_VARIANT}, -build => $TESTSUITE->{BUILD_VERSION}, -path => "ats_repos/test/setup/work")){ # Use this for real SBX Hardware.
        $logger->error(__PACKAGE__ . ": Could not create harness object");
        return 0;
    }
    $logger->debug(__PACKAGE__ . " ======: Opened Harness");  
    my @tests_to_run;

    # If an array is passed in use that. If not run every test.
    if ( @_ ) {
        @tests_to_run = @_;
    }
    else {
        @tests_to_run = @TESTCASES;
    }

    $harness->{SUBROUTINE}= 1;    
    $harness->runTestsinSuite( @tests_to_run );
}

##################################################################################
# +------------------------------------------------------------------------------+
# |                     GL CAS and ATS integration                               |
# +------------------------------------------------------------------------------+
# |            		    Callp & Services - INTL                               |
# +------------------------------------------------------------------------------+
# +------------------------------------------------------------------------------+

############################ Che Tuyen ##########################
# Note: Here is the list of issue during testing:

# + The TCs have DNH group is failed due to this field :XLAPLAN_RATEAREA_SERVORD_ENABLED MANDATORY_PROMPTS in "table ofcvar"
# --> Disable it by command: rep XLAPLAN_RATEAREA_SERVORD_ENABLED OFF

# + TC ADQ1092_017: Need to manual check CRK option in table "CUSTHEAD", to make sure the line will hears ring back tone (ANNMUSIC= N).

# + TC ADQ1092_027: The tc is failed at step add "SACB" feature due to the tuble "auto_grp spp spp 2 y" doesn't exit in "CUSTSTN" table.
# --> Step add "auto_grp spp spp 2 y" tuble already included in test script.

# + TC ADQ1126_033: The tc is failed at step detect DRING tone because  frequency of the specific tone is not correct.--> Capture  PCM file and analyze duration of tone then input frequency of the tone and rerun.

# + For LI TCs:  Before run the test suite, please check acc liadmin/liadmin then access core LI  by user/pass is: dnbdord ->123456.

# + Please note: Need to manual check all trunks (which were inputted in script) are IDL before you are run test suite.

# + The total of test suite is 55 tcs, but there are two extra tcs were build for DRING with type= 4 and type= 6 (ADQ1126_63 & ADQ1126_64).

#################################################################

sub ADQ1092_001 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_001");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_001";
    my $tcid = "ADQ1092_001";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	my $trunk_access_code_isup = $db_trunk{'tw_isup'}{-acc};
    
    my $wait_for_event_time = 30;
	my $add_feature_lineB = 1;
	my $add_feature_lineD = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	# Which logs need to get
	
	 $log_type[0] = 1; #logutil
	 $log_type[1] = 1; #pcm
	 $log_type[2] = 0; #tapi
	 $log_type[3] = 0; #calltrack

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	
	
    # Add CWT and CWI to line B
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	 $add_feature_lineB = 0;
	 
	# Add ACB feature to line D
	 unless ($ses_core->callFeature(-featureName => "ACB NOAMA", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ACB for line $list_dn[3]");
		print FH "STEP: add ACB for line D $list_dn[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add ACB for line D $list_dn[3] - PASS\n";
    }
    $add_feature_lineD = 0;
	
	# Get access code ACB
	 my $acb_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[3], -lastColumn => 'ACBA');
    unless ($acb_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get ACB access code for line $list_dn[3]");
		print FH "STEP: get ACB access code for line $list_dn[3] is $acb_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get ACB access code for line $list_dn[3] is $acb_acc - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line B and LEA to line C   
	
	 my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "Lea num is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[1] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C $list_dn[2]- FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C $list_dn[2] - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}

# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	

   # Make A calls B, B rings and answers
   
   %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }

	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
		print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
	sleep(1);
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line C $list_dn[2]");
        print FH "STEP: C hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASS\n";
    }
	
	#  C calls B via ISUP trunk, B hears CWT tone  
	my ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code_isup . $dialed_num;
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: C dials B via ISUP trunk $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials B via ISUP trunk $dialed_num - PASS\n";
    }
	
	# Check line B hears CWT tone
	
	%input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and B hears Call waiting tone");
        print FH "STEP: C calls B and B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and B hears Call waiting tone - PASS\n";
    }
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	# D calls B, D hears busy tone then going onhook
	
	# Offhook line D
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		 print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# D calls B
	%input = (
                -line_port => $list_line[3],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
        print FH "STEP: D dials B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials B $list_dn[1] - PASS\n";
    }
	
    # D hears busy tone	
	sleep(2);
	 %input = (
                -line_port => $list_line[3],
                -busy_tone_duration => 2000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                ); 
    unless($ses_glcas->detectBusyToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect busy tone line $list_line[3]");
        print FH "STEP: D hears busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears busy tone - PASS\n";
    }
	
	# Onhook line D
	sleep(1);
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line D - PASS\n";
    }
	
	sleep(2);
	# Offhook line D
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		 print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
   
	sleep(2);
	 # D dials ACB accesscode
	
	%input = (
                -line_port => $list_line[3],
                -dialed_number => "\*$acb_acc\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $acb_acc successfully");
		print FH "STEP: D dials acb_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials acb_acc - PASS\n";
    }
 
	
	
	# Onhook line D
	sleep(1);
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line D - PASS\n";
    }

	
	# Onhook line C
	sleep(1);
	unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }


	# Onhook line A
	sleep(1);
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# Onhook line B
	sleep(1);
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	# Check line D ringing
	sleep(2);
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	sleep(1);
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		 print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# Check line B ringing
	sleep(2);
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line C ringing
	sleep(2);
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	

	# Offhook line B
	sleep(1);
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
		 print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Offhook line C
	sleep(1);
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
		 print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and D
	%input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	
	 # C still monitor B & D successfully
    %input = (
                -list_port => [$list_line[1], $list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and D ");
        print FH "STEP: LEA C still can monitor the call between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C still can monitor the call between B and D - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       
    }
	
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}

	  # remove CWT, CWI from line B
    unless ($add_feature_lineB) {
        foreach ('CWI','CWT'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line B $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line B $list_dn[1] - PASS\n";
            }
        }
    }
	
	# remove ACB from line D
    unless ($add_feature_lineD) {
        unless ($ses_core->callFeature(-featureName => 'ACB', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ACB from line $list_dn[3]");
            print FH "STEP: Remove ACB from line $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: Remove ACB from line $list_dn[3] - PASS\n";
        }
    }
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_002 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_002");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_002";
    my $tcid = "ADQ1092_002";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	
	
   # Add ACB feature to line B
	 unless ($ses_core->callFeature(-featureName => "ACB NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ACB for line $list_dn[1]");
		print FH "STEP: add ACB for line B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add ACB for line B $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 0;
	
	
	  # Add RAG feature to line C
	 unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add RAG for line $list_dn[2]");
		print FH "STEP: add RAG for line B $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add RAG for line B $list_dn[2] - PASS\n";
    }
	
    $add_feature_lineC = 0;
	
	# Add CND, CNAMD, CXR feature to line A    ADO $  PartyA_DN AR CXR CTALL Y 12 STD $ Y Y 
	
	 foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A $list_dn[0]");
		print FH "STEP: add CXR for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line A $list_dn[0] - PASS\n";
    }
	 
	$add_feature_lineA = 0;

# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	

    # Make A calls B, B rings and answers
   
   %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
	
	# A dials DN(C)
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
        print FH "STEP: A dials C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials C $list_dn[2] - PASS\n";
    }
	
	# A hears ring back tone
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
	unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_line[0] ");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }
    
	
	# Check line C ringing
	
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
    
	# A Onhook, C still rings
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# Check line C ringing
	
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C still ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C still ringing - PASS\n";
    }
	
	# Offhook line C
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
    }		
	
	# Verify B,C have speech path
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	

	
  
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
     
	 # Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	 
	  # remove CWT, CWI and CCW from line A
    unless ($add_feature_lineA) {
        foreach ('CND','CNAMD','CXR'){
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }
	
	# remove ACB from line B
    unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'ACB', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ACB from line $list_dn[1]");
            print FH "STEP: Remove ACB from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove ACB from line $list_dn[1] - PASS\n";
        }
    }
	
	# remove RAG from line C
    unless ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line $list_dn[1]");
            print FH "STEP: Remove RAG from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove RAG from line $list_dn[2] - PASS\n";
        }
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_003 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_003");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_003";
    my $tcid = "ADQ1092_003";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    ############################## line DB #####################################
	my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    ############################## Trunk DB #####################################

    my $trunk_access_code = $db_trunk{'g6_pri'}{-acc};
	
    my $wait_for_event_time = 30;
    my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
    my $flag = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	
	my (@list_file_name, @callTrakLogs, %info);
    
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }

    # Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
		sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	# Add CNDB, CNAB, NAME feature to line A
	
    # Add NAME and CNAB, CNDB to line A
    foreach ('NAME PUBLIC PUB4314 $','CNAB','CNDB NOAMA ') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 0;
	
	 # Get CNAB code
	
   	 my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line A $list_dn[0]");
		print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - PASS\n";
    }
	
	 # Get CNDB code
	
   	 my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	
    # Add ACRJ, CNAMD, CND feature to line B
	
   	  foreach ('ACRJ ACT','CNAMD NOAMA','CND NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 0;
	

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
	# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
# Call flow

    # start PCM trace

   if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   # Make A calls B, B rings and answers
   
   %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
    
	
	# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	 
	 sleep(2);
	 # Offhook line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
    }
	# 	A Start confirmtone 
	my %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A start confirm tone - PASS\n";
    }
	 sleep(2);
	# Active CNDB from line A to line B
	my $dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $cndb_code successfully");
		print FH "STEP: A dials cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials cndb_code - PASS\n";
    }
	
	# Stop confirmtone
	# A hears confirm tone 
  	  %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirm tone - PASS\n";
    }
	
	sleep(2);
	# 	A Start confirmtone 
     %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A start confirm tone - PASS\n";
    }
	
	# Active CNAB from line A to line B
	sleep(1);
    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $cnab_code successfully");
		print FH "STEP: Send digit to active CNAB - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Send digit to active CNAB - PASS\n";
    }
	
	# Stop confirmtone
	# A hears confirm tone 
  	  %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirm tone - PASS\n";
    }
	
	
	  # A dials B via PRI trunk
	
    ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code.$dialed_num;
	
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	print FH "dials num is $dialed_num \n";		
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: A dials  B via PRI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials  B via PRI - PASS\n";
    }
	
	 # Check line B doesn't ringing
    my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line B is not ringing ");
        print FH "STEP: Check line B doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line B doesn't ringing - PASS\n";
		
		
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	
	  # Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
      # Remove service from line A and B
    unless ($add_feature_lineA) {
        foreach ('CNAB','CNDB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line A $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line A $list_dn[1] - PASS\n";
            }
        }
    }
    
	  unless ($add_feature_lineB) {
        foreach ('ACRJ','CNAMD','CND') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line B $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line B $list_dn[1] - PASS\n";
            }
        }
    }
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_004 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_004");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_004";
	my $tcid = "ADQ1092_004";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################
# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }

# Add CNDB to line A
	unless ($ses_core->callFeature(-featureName => "cndb NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNDB for line $list_dn[0]");
		print FH "STEP: add CNDB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNDB for line $list_dn[0] - PASS\n";
    }
	
	
	 # Get CNDB code
	
   	 my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	
    $add_feature_lineA = 0;
# Add CND and ACRJ to line B
	
	foreach ('CND NOAMA','ACRJ ACT') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line B $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line B $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
    $add_feature_lineB = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls C, C answers and A flash
    # # ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    # # $dialed_num = $trunk_access_code . $dialed_num;
	# print FH "The dialed number through PRI on TMA2m: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C - PASSED\n";
    }
	
	
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	# $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
	# Check line B doesn't ring
	my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line B is not ringing ");
        print FH "STEP: Check line B doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line B doesn't ringing - PASS\n";
		
		
    }

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    # my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	
	# remove CXR and CNDB from line A
    unless ($add_feature_lineA) {
        foreach ('CXR','CNDB') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	# remove ACRJ and CND from line B
    unless ($add_feature_lineB) {
        foreach ('ACRJ','CND') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[1]");
                print FH "STEP: remove $_ for line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[1] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_005 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_005");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_005";
	my $tcid = "ADQ1092_005";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
    my $flag = 1;
	my $calltrak_start = 0;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

# Add CNDB, CNAB and NAME to line A
foreach ('NAME PUBLIC ABC PRIVATE ABC','CNAB','cndb NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
 
    $add_feature_lineA = 0;
	
	# Get CNDB code
	
   	 my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	
	 # Get CNAB code
	
   	 my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line A $list_dn[0]");
		print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - PASS\n";
    }
	
	 unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
	
# Add CND, CNAMD and ACRJ to line B
		
	 foreach ('CND NOAMA ACT','CNAMD NOAMA','ACRJ ACT') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line B $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line B $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
    $add_feature_lineB = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A activates CNAB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	$dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
	# ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    # $dialed_num = $trunk_access_code . $dialed_num;
	$dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
	# Check line B doesn't ring
	my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line B is not ringing ");
        print FH "STEP: Check line B doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line B doesn't ringing - PASS\n";
		
		
    }
	
	# Onhook A
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	sleep(2);
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
   	# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	# A off-hook and activates CNDB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	$dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
	


################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    # my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	
	# remove CXR and CNDB from line A
    unless ($add_feature_lineA) {
        foreach ('CNDB','CNAB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	# remove ACRJ, CND and CNAMD from line B
    unless ($add_feature_lineB) {
        foreach ('ACRJ','CND','CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[1]");
                print FH "STEP: remove $_ for line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[1] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_006 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_006");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_006";
	my $tcid = "ADQ1092_006";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
    
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

# Add CNDB, CNAB and NAME to line A
foreach ('NAME PUBLIC ABC PRIVATE ABC','CNAB','CNDB NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
	
    $add_feature_lineA = 0;
	
	# Get CNDB code
	
   	 my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	
	 # Get CNAB code
	
   	 my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line A $list_dn[0]");
		print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - PASS\n";
    }
# Add CND, CNAMD and ACRJ to line B
		
	foreach ('CND NOAMA','CNAMD NOAMA','ACRJ ACT') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
	# Add SCA to line B with A in list
	unless ($ses_core->callFeature(-featureName => "sca noama act $list_dn[0] 3 \$ n", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCA for line $list_dn[1]");
		print FH "STEP: Add SCA for line $list_dn[1] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SCA for line $list_dn[1] - PASSED\n";
    }
	# Add CFU to line B
	
	unless ($ses_core->callFeature(-featureName => 'CFU N', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line $list_dn[1]");
		print FH "STEP: add CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFU for line $list_dn[1] - PASS\n";
    }

    my $cfu_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CFWP');
    unless ($cfu_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CFU access code for line $list_dn[1]");
		print FH "STEP: get CFU access code for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CFU access code for line $list_dn[1] - PASS\n";
    }
		
    $add_feature_lineB = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A activates CNAB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	$dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
	# ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    # $dialed_num = $trunk_access_code . $dialed_num;
	$dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
	# Check line B doesn't ring
	my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line B is not ringing ");
        print FH "STEP: Check line B doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line B doesn't ringing - PASS\n";
		
		
    }
	
	# Onhook A
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# Activate CFU for B to line C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
    }
    $dialed_num = '*' . $cfu_acc . $list_dn[2] . '#';
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
    }
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
    }
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[1]");
        print FH "STEP: activate CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFU for line $list_dn[1] - PASS\n";
    }
	# A activates CNAB and calls B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and forward to C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B forward to C - PASSED\n";
    }
   	# Onhook A and C
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }
	# A off-hook and activates CNDB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	$dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and forward to C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B forward to C - PASSED\n";
    }


################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    # my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	
	# remove CNAB, NAME and CNDB from line A
    unless ($add_feature_lineA) {
        foreach ('CNDB','CNAB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	# remove ACRJ, CND and CNAMD from line B
    unless ($add_feature_lineB) {
        foreach ('ACRJ','CND','CNAMD','CFU','SCA') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[1]");
                print FH "STEP: remove $_ for line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[1] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_007 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_007");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_007";
	my $tcid = "ADQ1092_007";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 1;
	 $log_type[3] = 0;
	 
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_tapi1 = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_2")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	

################## Add feature or datafill table ###########################

# Add CNDB, CNAB and NAME to line A
  my ($dn) = ($list_dn[0] =~ /\d{3}(\d+)/);
	unless ($ses_core->callFeature(-featureName => "name PUBLIC PUB$dn \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line $list_dn[0]");
		print FH "STEP: add NAME for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add NAME for line $list_dn[0] - PASS\n";
    }
	foreach ('cndb NOAMA','cnab') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }	
    $add_feature_lineA = 0;
	
	# Get CNDB code
	
   	 my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line A $list_dn[0]");
		print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNDB access code for line A $list_dn[0] is $cndb_code - PASS\n";
    }
	
	 # Get CNAB code
	
   	 my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line A $list_dn[0]");
		print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - PASS\n";
    }
	
# Add CND, CNAMD to line B
	foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line B $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line B $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
    $add_feature_lineB = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	
   # Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace for scenario 1
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A activates CNAB and CNDB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	$dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
   	# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	# Stop tapi and verify NAME, DN for scenario 1
	
	my $exist1 = 0;
    my $exist2 = 0;
	my $exist3 = 0;
	
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4318
                    $exist2 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #dn: 4004318
                    $exist3 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
		 if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - PASSED\n";
            
        }
		if ($exist3) {
            print FH "STEP: Verify DN(A) doesn't display on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Verify DN(A) doesn't display on tapi log - PASSED\n";
        }
     }
	# Start tapi trace for scenario 2
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi1->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace for scenario 2");
			print FH "STEP: Start tapitrace for scenario 2 - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace for scenario 2- PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# A activates CNAB
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				# -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi for scenario 2
	
	$exist1 = 0;
    $exist2 = 0;
	$exist3 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi1->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace for scenario 2");
            print FH "STEP: Stop tapitrace for scenario 2 - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace for scenario 2- PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4318
                    $exist2 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #dn: 4004318
                    $exist3 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - PASSED\n";
            
        }
		if ($exist3) {
            print FH "STEP: Verify only DN(A) displays on tapi log - PASSED\n";
        } else {
            print FH "STEP: Verify only DN(A) displays on tapi log - FAILED\n";
			$result = 0;
        }
     }
	################### Remove features added ######################
	
	# remove CNAB NAME and CNDB from line A
    unless ($add_feature_lineA) {
        foreach ('CNDB','CNAB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	# remove CND and CNAMD from line B
    unless ($add_feature_lineB) {
        foreach ('CND','CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[1]");
                print FH "STEP: remove $_ for line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[1] - PASS\n";
            }
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_008 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_008");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_008";
	my $tcid = "ADQ1092_008";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 1;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	unless ($ses_tapi_1= SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_2")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace scenario 2- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace scenario 2 - PASSED\n";
    }
	
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# # Add name of DN A in the table DNATTRS
	# # Check login table DNATTRS
    # if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table DNATTRS")) {
        # $logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNATTRS");
		# print FH "STEP: Login to table DNATTRS - FAILED\n";
		# $result = 0;
        # goto CLEANUP;
    # } else {
		# print FH "STEP: Login to table DNATTRS - PASSED\n";
	# }
	# Verify whether there is the tuple of DN(A) and it will be add if there is not the tuple of DN(A)
	# (my $area_code) = ($list_dn[0] =~ /(\d{3})\d+/);
	# (my $office_code) = ($list_dn[0] =~ /\d{3}(\d{3})\d+/);
	# (my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	# if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos $area_code $office_code $dn")){
		# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) doesn't exist in the table DNATTRS");
		# print FH "DN($list_dn[0]) has no name so we need to add it\n";
		# if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $area_code $office_code $dn public name PUB$dn \$ \$ \$")){
			# if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				# if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					# print FH "STEP: The name of DN($list_dn[0]) is added - PASSED\n)";
				# } else {
					# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't add");
					# print FH "STEP: The name of DN($list_dn[0]) is added - FAILED\n";
					# $result = 0;
					# goto CLEANUP;
				# }
			# }
			
		# } elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $area_code $office_code $dn public name PUB$dn \$ \$ \$")){
			# if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				# print FH "STEP: The name of DN($list_dn[0]) is added - PASSED\n";
			# } else {
					# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't add");
					# print FH "STEP: The name of DN($list_dn[0]) is added - FAILED\n";
					# $result = 0;
					# goto CLEANUP;
			# }
		# }
		
	# }
	# unless (grep /PUB$dn/, $ses_core->execCmd("pos $area_code $office_code $dn")){
		# if (grep /Y TO CONTINUE/, $ses_core->execCmd("change")){
			# if (grep /PUBLIC/, $ses_core->execCmd("y")){
				# if (grep /DATA/, $ses_core->execCmd("public name PUB$dn")){
					# if (grep /SEL/, $ses_core->execCmd("\$")){
						# if (grep /Y TO CONFIRM/, $ses_core->execCmd("\$")){
							# if (grep /TUPLE CHANGED/, $ses_core->execCmd("y")){
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - PASSED";
							# } else {
								# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't change");
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - FAILED\n";
								# $result = 0;
								# goto CLEANUP;
							# }
						# }
					# }
				# }
			# }
		# } else {
			# $ses_core->execCmd("change");
				# if (grep /DATA/, $ses_core->execCmd("public name PUB$dn")){
					# if (grep /SEL/, $ses_core->execCmd("\$")){
						# if (grep /Y TO CONFIRM/, $ses_core->execCmd("\$")){
							# if (grep /TUPLE CHANGED/, $ses_core->execCmd("y")){
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - PASSED";
							# } else {
								# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't change");
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - FAILED\n";
								# $result = 0;
								# goto CLEANUP;
							# }
						# }
					# }
				# }
			
		# }
		
	# } else {
		# print FH "The name of $list_dn[0] is PUB$dn\n";
	# }

# Add name for DN(A)
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line A-$list_dn[0]");
		print FH "STEP: Add NAME for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line A($list_dn[0]) - PASSED\n";
    }
# Add CNDB, CNAB to line A and add CND&CNAMD to line B
    
	unless ($ses_core->callFeature(-featureName => "CNDB NOAMA CNAB", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNDB, CNAB for line A-$list_dn[0]");
		print FH "STEP: Add CNDB, CNAB for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CNDB, CNAB for line A($list_dn[0]) - PASSED\n";
    }
	unless ($ses_core->callFeature(-featureName => "CND NOAMA CNAMD NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CND, CNAMD for line B-$list_dn[1]");
		print FH "STEP: Add CND, CNAMD for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CND, CNAMD for line B($list_dn[1]) - PASSED\n";
    }
    $feature_added = 1;
# Get CNAB Access Code
	my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line $list_dn[0]");
		print FH "STEP: Get CNAB access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CNAB is: $cnab_code \n";
        print FH "STEP: Get CNAB access code for line A($list_dn[0]) - PASSED\n";
    }
# Get CNDB Access Code
	my $cndb_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNDB');
    unless ($cndb_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNDB access code for line $list_dn[0]");
		print FH "STEP: Get CNDB access code for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code CNDB is: $cndb_code \n";
        print FH "STEP: Get CNDB access code for line A($list_dn[0]) - PASSED\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace for scenario 1 - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace scenario 1 - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A dials CNAB code and hear confirmation tone then recall dial tone
    # A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
    # A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNAB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNAB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNAB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNAB - PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A dials CNDB code and hear confirmation tone then recall dial tone
   
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cndb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNDB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNDB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNDB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNDB - PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A calls B, B answers
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }

# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	# Stop tapi to verify scenario 1
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4318
                    $exist2 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check there isn't the message NAME on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check there isn't the message NAME on tapi log - PASSED\n";
            
        }
	}
	
	print FH "##################### Scenario 2: A actives CNAB again and B will display NAME's DN(A)#################\n";
# Start tapi trace for scenario 2
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi_1->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace again - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace again - PASSED\n";
		}
		$tapi_start = 1;
	}
# A dials CNAB code and hear confirmation tone then recall dial tone
    # A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A again to active CNDB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A again to active CNDB - PASSED\n";
    }
    # A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect hear confirmation tone
    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num to active CNAB - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num to active CNAB - PASSED\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone after activating CNAB again - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone after activating CNAB again- PASSED\n";
    }
	sleep (1);
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASSED\n";
    }

# A calls B, B answers
    
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B again - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B again - PASSED\n";
    }
# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
################################## Cleanup ADQ1092_008 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_008 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    $exist1 = 0;
    $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi_1->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check there is only DN(A) on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check there is only DN(A) on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove NAME from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'NAME', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove NAME from line A($list_dn[0])");
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_009 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_009");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_009";
	my $tcid = "ADQ1092_009";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 1;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_1")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	unless ($ses_tapi_1= SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog_Scenario_2")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace scenario 2- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace scenario 2 - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# # Add name of DN A in the table DNATTRS
	# # Check login table DNATTRS
    # if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table DNATTRS")) {
        # $logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNATTRS");
		# print FH "STEP: Login to table DNATTRS - FAILED\n";
		# $result = 0;
        # goto CLEANUP;
    # } else {
		# print FH "STEP: Login to table DNATTRS - PASSED\n";
	# }
	# Verify whether there is the tuple of DN(A) and it will be add if there is not the tuple of DN(A)
	# (my $area_code) = ($list_dn[0] =~ /(\d{3})\d+/);
	# (my $office_code) = ($list_dn[0] =~ /\d{3}(\d{3})\d+/);
	# (my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	# if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos $area_code $office_code $dn")){
		# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) doesn't exist in the table DNATTRS");
		# print FH "DN($list_dn[0]) has no name so we need to add it\n";
		# if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $area_code $office_code $dn public name PUB$dn \$ \$ \$")){
			# if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				# if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					# print FH "STEP: The name of DN($list_dn[0]) is added - PASSED\n)";
				# } else {
					# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't add");
					# print FH "STEP: The name of DN($list_dn[0]) is added - FAILED\n";
					# $result = 0;
					# goto CLEANUP;
				# }
			# }
			
		# } elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $area_code $office_code $dn public name PUB$dn \$ \$ \$")){
			# if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				# print FH "STEP: The name of DN($list_dn[0]) is added - PASSED\n";
			# } else {
					# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't add");
					# print FH "STEP: The name of DN($list_dn[0]) is added - FAILED\n";
					# $result = 0;
					# goto CLEANUP;
			# }
		# }
		
	# }
	# unless (grep /PUB$dn/, $ses_core->execCmd("pos $area_code $office_code $dn")){
		# if (grep /Y TO CONTINUE/, $ses_core->execCmd("change")){
			# if (grep /PUBLIC/, $ses_core->execCmd("y")){
				# if (grep /DATA/, $ses_core->execCmd("public name PUB$dn")){
					# if (grep /SEL/, $ses_core->execCmd("\$")){
						# if (grep /Y TO CONFIRM/, $ses_core->execCmd("\$")){
							# if (grep /TUPLE CHANGED/, $ses_core->execCmd("y")){
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - PASSED";
							# } else {
								# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't change");
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - FAILED\n";
								# $result = 0;
								# goto CLEANUP;
							# }
						# }
					# }
				# }
			# }
		# } else {
			# $ses_core->execCmd("change");
				# if (grep /DATA/, $ses_core->execCmd("public name PUB$dn")){
					# if (grep /SEL/, $ses_core->execCmd("\$")){
						# if (grep /Y TO CONFIRM/, $ses_core->execCmd("\$")){
							# if (grep /TUPLE CHANGED/, $ses_core->execCmd("y")){
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - PASSED";
							# } else {
								# $logger->error(__PACKAGE__ . " $tcid: The tuple of DN($list_dn[0]) can't change");
								# print FH "STEP: The name of $list_dn[0] is changed into PUB$dn - FAILED\n";
								# $result = 0;
								# goto CLEANUP;
							# }
						# }
					# }
				# }
			
		# }
		
	# } else {
		# print FH "The name of $list_dn[0] is PUB$dn\n";
	# }

# Add name for DN(A)
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line A-$list_dn[0]");
		print FH "STEP: Add NAME for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line A($list_dn[0]) - PASSED\n";
    }
# Add CND&CNAMD to line B
    
	foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line B $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line B $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace to make call via PRI Trunk
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace to make call via PRI Trunk - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace to make call via PRI Trunk - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls B via PRI Trunk, B answers
    ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through PRI on TMA2m: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
               # -dialed_number => $list_dn[1],
				-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B via PRI Trunk - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B via PRI Trunk - PASSED\n";
    }

# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	# Stop tapi to verify scenario 1
    my $exist1 = 0;
    my $exist2 = 0; #Verify NAME displays or not
	my $exist3 = 0; #Verify DN displays or not
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist2 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist3 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check there is the message NAME on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check there is the message NAME on tapi log - FAILED\n";
			$result = 0;
        }
		if ($exist3) {
            print FH "STEP: Check there is DN of DN(A) on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check there is DN of DN(A) on tapi log - FAILED\n";
			$result = 0;
        }
	}
	
	print FH "##################### Scenario 2: A calls B via ISUP Trunk #################\n";
# Start tapi trace for scenario 2
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi_1->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace again - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace again - PASSED\n";
		}
		$tapi_start = 1;
	}

# A calls B via ISUP Trunk, B answers
    ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code_1 . $dialed_num;
	print FH "The dialed number through ISUP on TMA2m: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                #-dialed_number => $list_dn[1],
                -dialed_number => $dialed_num,
				-regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B again - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B again - PASSED\n";
    }
# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
################################## Cleanup ADQ1092_009 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_009 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    $exist1 = 0;
    $exist2 = 0;
	$exist3 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi_1->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace for scenario 2 - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace for scenario 2 - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4138
                    $exist2 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) {#dn: 4004318
                    $exist3 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check there is the message NAME on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Check there is the message NAME on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist3) {
            print FH "STEP: Check there is DN of DN(A) on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check there is DN of DN(A) on tapi log - FAILED\n";
			$result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove NAME from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'NAME', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove NAME from line A($list_dn[0])");
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_010 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_010");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_010";
	my $tcid = "ADQ1092_010";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 1;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add NAME for line A
		unless ($ses_core->callFeature(-featureName => 'NAME', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Can't remove NAME from line A($list_dn[0])");
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - FAILED\n";
			$result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Remove NAME from line A ($list_dn[0]) - PASSED\n";
        }

# Add CND, CNAMD CNDB CNAB to line B
    
	foreach ('CND NOAMA','CNAMD NOAMA','CNDB NOAMA','CNAB') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line B $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line B $list_dn[1] - PASS\n";
        }
    }
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $feature_added = 1;

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				#-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }

# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	
################################## Cleanup ADQ1092_010 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_010 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
	my $exist3 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
				if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4318
                    $exist2 = 1;
                }
				if (grep /34303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #dn: 4004318
                    $exist3 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Verify NAME of DN(A) doesn't display on tapi log - PASSED\n";
            
        }
		if ($exist3) {
            print FH "STEP: Verify only DN(A) displays on tapi log - PASSED\n";
        } else {
            print FH "STEP: Verify only DN(A) displays on tapi log - FAILED\n";
			$result = 0;
        }
     }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove cnd cnamd cndb cnab from line B
	if ($feature_added) {
	foreach ('CND','CNAMD','CNDB','CNAB'){
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove cnd cnamd cndb cnab from line B($list_dn[1])");
            print FH "STEP: Remove cnd cnamd cndb cnab from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove cnd cnamd cndb cnab from line B ($list_dn[1]) - PASSED\n";
        }
		}
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_011 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_011");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_011";
    my $tcid = "ADQ1092_011";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	
    
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0; 
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

    # Add SUPPRESS, CNAB to line A
	
	  unless ($ses_core->callFeature(-featureName => "CNAB", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
	        $logger->error(__PACKAGE__ . " $tcid: Cannot add CNAB for line A $list_dn[1]");
	        print FH "STEP: Add CNAB for line A $list_dn[1] - FAILED\n";
	        $result = 0;
	        goto CLEANUP;
	    } else {
	        print FH "STEP: AddCNAB for line A $list_dn[1] - PASSED\n";
	    }
   
	 unless ($ses_core->callFeature(-featureName => "SUPPRESS PUBLIC Y Y \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		        $logger->error(__PACKAGE__ . " $tcid: Cannot add SUPPRESS for line A $list_dn[1]");
		        print FH "STEP: Add SUPPRESS for line A $list_dn[1] - FAILED\n";
	        $result = 0;
	        goto CLEANUP;
	    } else {
        print FH "STEP: SUPPRESS for line A $list_dn[1] - PASSED\n";
	    }
		
     $add_feature_lineA = 0;
	
	 # Get CNAB code
	
   	 my $cnab_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CNAB');
    unless ($cnab_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CNAB access code for line A $list_dn[0]");
		print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CNAB access code for line A $list_dn[0] is $cnab_code - PASS\n";
    }
		
    # Add ACRJ, CNAMD, CND feature to line B
	
   	  foreach ('ACRJ ACT','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 0;
	
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

   # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
    # Make a call from line A to line B use *cnab_num
    	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
		print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	sleep(1);
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line A $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	# A dials B use *cnab_num
	my ($dialed_num) = '*'.$cnab_code.$list_dn[1].'#';
	print FH "dialed_num is $dialed_num \n";
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: A dials B use $cnab_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B use $cnab_code - PASS\n";
    }
	
	 # Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
  
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove feature
	 unless ($add_feature_lineA) {
        foreach ('CNAB','SUPPRESS') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line A $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line A $list_dn[1] - PASS\n";
            }
        }
    } 
	
	unless ($add_feature_lineB) {
        foreach ('ACRJ','CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line B $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line B $list_dn[1] - PASS\n";
            }
        }
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_012 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_012");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_012";
    my $tcid = "ADQ1092_012";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# A has CXR - Blind Transfer
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A $list_dn[0]");
		print FH "STEP: add CXR for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line A $list_dn[0] - PASS\n";
    }
	
   
    $add_feature_lineA = 0;
	
	# B, C in SIMRING group, B has DRING and is V5.2 line
		
	# Add DRING to line B
    unless ($ses_core->callFeature(-featureName => "DRING Y 5 Y 2 ALL 2 N N N Y 4 N Y 5", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRING for line $list_dn[1]");
		print FH "STEP: add DRING for line B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DRING for line B $list_dn[1] - PASS\n";
    }
	
   	 
     # Add SIMRING group for line B and line C
	
   	 $ses_core->execCmd("servord");
	 sleep(1);
    @output = $ses_core->execCmd("est \$ SIMRING $list_dn[1] $list_dn[2] \$ ACT Y 123 y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
		}
		
		if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
	
	# Verify features added
    unless(grep /SIMRING/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SIMRING for line $list_dn[1] and $list_dn[2] ");
        print FH "STEP: add SIMRING for line $list_dn[1] and $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SIMRING for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
	unless(grep /Pilot DN/, @output = $ses_core->execCmd("qsimr $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot show pilot DN and member DN  ");
        print FH "STEP: Show pilot DN - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Show pilot DN - PASS\n";
    }	 
	  
    $add_feature_lineB = 0;
		
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line B and LEA to line C   
	
	 my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "Lea num is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[1] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C $list_dn[2]- FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C $list_dn[2] - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
        #act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls D, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls D and they have no speech path ");
        print FH "STEP: A calls D and they have speech path, A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls D and they have speech path, A flash - PASS\n";
    }
	# Check A hears dial tone
	sleep(1);
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line A $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	#  A dials B , B,C rings and B answers,  
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: A dials B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B $list_dn[1] - PASS\n";
    }
	
	# Check line B ringing
	
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify A,B have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	 # C still monitor A & B successfully
	 sleep(2);
    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA C can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C can monitor the call between A and B - PASS\n";
    }
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	 # Verify speech path between B and D
	 sleep(2);
	 %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
	 
	 # C still monitor B & D successfully
	 sleep(2);
    %input = (
                -list_port => [$list_line[1], $list_line[3]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between B and D ");
        print FH "STEP: LEA C still can monitor the call between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C still can monitor the call between B and D - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	 
	 # remove DRING group from line B&C
    
	if ($add_feature_lineB) {
	foreach ('SIMRING','DRING'){
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove cnd cnamd cndb cnab from line B($list_dn[1])");
            print FH "STEP: Remove SIMRING DRING from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove SIMRING DRING from line B ($list_dn[1]) - PASSED\n";
        }
		}
    }
	
	# Remove CXR from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    } 
	
	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_013 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_013");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_013";
    my $tcid = "ADQ1092_013";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# A has CXR - Blind Transfer
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A $list_dn[0]");
		print FH "STEP: add CXR for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line A $list_dn[0] - PASS\n";
    }
	
	unless(grep /CXR/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add CXR for line $list_dn[0] ");
        print FH "STEP: Verify add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify add CXR for line $list_dn[0] - PASS\n";
    }
   
    $add_feature_lineA = 0;
			 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls C, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path - PASS\n";
    }
	
	# Check A hears dial tone
	sleep(1);
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line A $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	# Check status of line C is CPB
	
	
   unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
	
	
	# A dials B, B rings
	
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: A dials B  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B  - PASS\n";
    }
	
	 # Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	
	# Verify speech path between A and B
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
		# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	 
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove CXR from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    } 
	
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_014 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_014");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_014";
    my $tcid = "ADQ1092_014";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# A has CXR - Blind Transfer
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A $list_dn[0]");
		print FH "STEP: add CXR for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line A $list_dn[0] - PASS\n";
    }
	
    $add_feature_lineA = 0;
 	
	# Add name for DN(A)   
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line A-$list_dn[0]");
		print FH "STEP: Add NAME for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line A $list_dn[0] - PASSED\n";
    }
	
	 $add_feature_lineA = 0;	
	# B has CNAMD
	unless ($ses_core->callFeature(-featureName => "CNAMD NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNAMD for line B $list_dn[1]");
		print FH "STEP: add CNAMD for line B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNAMD for line B $list_dn[1] - PASS\n";
    }	
	
	 $add_feature_lineB = 0;
	
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls C, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path, A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path, A flash - PASS\n";
    }

	
	# Check A hears dial tone
	sleep(1);
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line A $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	# Check status of line C is CPB
	
	
   unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
	
	# A dials B, B rings
	
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: A dials B  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B  - PASS\n";
    }
	
	 # Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
		
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Verify A,B have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	 # Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /50554234333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #name: pub4318
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
       if ($exist2) {
            print FH "STEP: Verify NAME of DN(A) display on tapi log - PASSED\n";
			
        } else {
            print FH "STEP: Verify NAME of DN(A) display on tapi log - FAILED\n";
            $result = 0;
        }  
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	 unless ($add_feature_lineA) {
        foreach ('CXR','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line A $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line A $list_dn[1] - PASS\n";
            }
        }
    } 
	
	unless ($add_feature_lineB) {
        foreach ('CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line B $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line B $list_dn[1] - PASS\n";
            }
        }
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_015 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_015");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_015";
    my $tcid = "ADQ1092_015";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# A has CXR - Blind Transfer
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A $list_dn[0]");
		print FH "STEP: add CXR for line A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line A $list_dn[0] - PASS\n";
    }
		
	 $add_feature_lineA = 0;
	
	# Add B, C into MADN group
   $ses_core->execCmd("servord");
   sleep(1);
   @output = $ses_core->execCmd("ado \$ $list_dn[1] mdn sca y y $list_dn[1] tone y 6 y nonprivate \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MADN to line $list_dn[0] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MADN to line $list_dn[0] as member - PASS\n";
    }
    $add_feature_lineB = 0;
	
	# Add C into MADN group
	@output = $ses_core->execCmd("ado \$ $list_dn[2] mdn sca n y $list_dn[1] bldn \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
	
	 $add_feature_lineC = 0;
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

   # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls D, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls D and they have no speech path ");
        print FH "STEP: A calls D and they have speech path, A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls D and they have speech path, A flash - PASS\n";
    }
	# Check A hears dial tone
	sleep(1);
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line A $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	# Check status of line D is CPB
	
	
   unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[3] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[3] is not CPB status");
        print FH "STEP: Check D is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check D is CPB status - PASSED\n";
	}
	
	
	
	# A dials B, B,C rings
	
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: A dials B  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials B  - PASS\n";
    }

	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line B
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	
	# Offhook line C
	 unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# Verify speech path between B and C,D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C,D");
        print FH "STEP: Check speech path between B and C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C,D - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove CXR from line A
	  unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    }
	
	
	# remove MADN from line B and C
	
    $ses_core->execCmd("servord");
    unless ($add_feature_lineB) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[1] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: remove line $list_dn[1] from MADN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[1] from MADN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[1] mdn $list_dn[1] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after Deo fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[1] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASS\n";
        }
    }
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_016 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_016");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_016";
    my $tcid = "ADQ1092_016";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	#############################################################
	 # Verify the tuple AUDIO1 CPARK RINGING exists or not
     # Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /RINGING/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
	####################################################
	# Add PRK  to line B
   
    unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[1]");
		print FH "STEP: add PRK for line B $list_dn[1]  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line B $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 0;
	
	 my $prk_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'PRKS');
    unless ($prk_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRK access code for line $list_dn[1]");
		print FH "STEP: get PRK access code for line $list_dn[1] is $prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get PRK access code for line $list_dn[1] is $prk_acc - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line D 
	
	 my ($lea_num) = ($list_dn[3] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "Lea num is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C $list_dn[2]- FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C $list_dn[2] - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
     #act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	   
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls B, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path, A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path, A flash - PASS\n";
    }
	
	# Check line D have ringing tone

	 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	 # D still monitor A & B successfully
	 sleep(2);
    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA D can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA D can monitor the call between A and B - PASS\n";
    }
	
	# B flash
	 %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B dials *prk_acc
	
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "\*$prk_acc\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $prk_acc successfully");
		print FH "STEP: B dials prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials prk_acc - PASS\n";
    }
	
	 # Verify A hears ringback tone after flash *prk_acc
	
	sleep(1);
    my %input = (
                -line_port => $list_line[0],
                -busy_tone_duration => 2000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                ); 
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;        
		goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }
	
	# Onhook B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	sleep(2);
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	
	#  B dials C , C rings and answers,  
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
		print FH "STEP: B dials C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials C $list_dn[2] - PASS\n";
    }
	
	# Check line C ringing
	
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
		
	
	# Verify speech path between B and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }
	
	# Onhook B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	sleep(30);		
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
		
	
	# Verify speech path between A and B
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	 # D still monitor A & B successfully
	
    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA D can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA D can monitor the call between A and B - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove PRK from line B
	  unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[1]");
            print FH "STEP: Remove PRK from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[1] - PASS\n";
        }
    }
	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
		
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_017 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_017");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_017";
    my $tcid = "ADQ1092_017";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	#############################################################
	 # Verify the tuple AUDIO1 CPARK RINGING exists or not
     # Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /RINGING/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
	
	# Add PRK  to line A
   
    unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: add PRK for line A $list_dn[0]  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line A $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 0;
	
	 my $prk_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'PRKS');
    unless ($prk_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRK access code for line $list_dn[0]");
		print FH "STEP: get PRK access code for line $list_dn[0] is $prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get PRK access code for line $list_dn[0] is $prk_acc - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line C   
	
	 my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "Lea num is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C $list_dn[2]- FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C $list_dn[2] - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
     #act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	   
	 
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# A calls B, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path, A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path, A flash - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	 # C still monitor A & B successfully
	 sleep(2);
    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA C can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C can monitor the call between A and B - PASS\n";
    }
	
	 # A flash
	 %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flash - PASS\n";
		
    }
	
	# A dials *prk_acc
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "\*$prk_acc\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $prk_acc successfully");
		print FH "STEP: A dials prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials prk_acc - PASS\n";
    }
	
	 # Verify B hears ringback tone after flash *prk_acc
	
	sleep(1);
    my %input = (
                -line_port => $list_line[1],
                -busy_tone_duration => 2000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                ); 
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;        
		goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	# Onhook C
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }
	
	sleep(30);		
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	
	
	# Verify speech path between A and B
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	 # C still monitor A & B successfully
	
    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA C can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C can monitor the call between A and B - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove PRK from line A
	  unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }
	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
		
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_018 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_018");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_018";
    my $tcid = "ADQ1092_018";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    #############################################################
	 # Verify the tuple AUDIO1 CPARK RINGING exists or not
     # Login to table AUDIO
	unless (grep /TABLE:\s+AUDIO/, $ses_core->execCmd("Table AUDIO")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table AUDIO");
		print FH "STEP: Login to table AUDIO - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table AUDIO - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUDIO1 CPARK RINGING 0 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /RINGING/, $ses_core->execCmd("pos AUDIO1 CPARK")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    } 
	
	# Add PRK  to line A
   
    unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: add PRK for line A $list_dn[0]  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line A $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 0;
	
	my $prk_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'PRKS');
    unless ($prk_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRK access code for line $list_dn[0]");
		print FH "STEP: get PRK access code for line $list_dn[0] is $prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get PRK access code for line $list_dn[0] is $prk_acc - PASS\n";
    }
	
	# C has CXR 
	
	unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line C $list_dn[2]");
		print FH "STEP: add CXR for line C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line C $list_dn[2] - PASS\n";
    }
	
	unless(grep /CXR/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add CXR for line $list_dn[2] ");
        print FH "STEP: Verify add CXR for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify add CXR for line $list_dn[2] - PASS\n";
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineC = 0;
	   
	 # Add A, B into MADN group
   $ses_core->execCmd("servord");
   sleep(1);
   @output = $ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MADN to line $list_dn[0] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MADN to line $list_dn[0] as member - PASS\n";
    }
    $add_feature_lineA = 0;
	
	# Add B into MADN group
	@output = $ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] bldn \$ y y");
    if (grep /NOT AN EXISTING OPTION|ALREADY EXISTS|INCONSISTENT DATA/, @output) {
        unless($ses_core->execCmd("N")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'N' to reject ");
        }
    }
    if (grep /Y OR N|Y TO CONFIRM/, @output) {
        @output = $ses_core->execCmd("Y");
        unless(@output) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
        }
        if (grep /Y OR N|Y TO CONFIRM/, @output) {
            unless ($ses_core->execCmd("Y")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'Y' to confirm ");
            }
        }
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
   
    $add_feature_lineB = 0; 
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

     # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
   	
	# C calls A, check speech path, A&B ring
    # Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	# C dials line A
	
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[0],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[0] successfully");
        print FH "STEP: C dials A $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials A $list_dn[0] - PASS\n";
    }
	
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	 # Verify speech path between A and C
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }
	
	 # C flash
	
	 %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash - PASS\n";
		
    }
	# C dials line D
	
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] successfully");
        print FH "STEP: C dials D $list_dn[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials D $list_dn[3] - PASS\n";
    }
	
	# Check line D have ringing tone

	 %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	 # Onhook C
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }
	
	 # Verify speech path between A and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and D");
        print FH "STEP: Check speech path between A and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and D - PASS\n";
    }
	
	 # A flash
	 %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flash - PASS\n";
		
    }
	
	# A dials *prk_acc
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "\*$prk_acc\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $prk_acc successfully");
		print FH "STEP: A dials prk_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials prk_acc - PASS\n";
    }
	
	
	# Onhook A 
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	
	sleep(30);		
	# Check line A have ringing tone

	 %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }
	
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	
	# Verify speech path between A and D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and D");
        print FH "STEP: Check speech path between A and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and D - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	
	
	# Verify speech path between A and B,D
	 sleep(1);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,D");
        print FH "STEP: Check speech path between A and B,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B,D - PASS\n";
    }
	
	 
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# remove MADN from line A and B
     $ses_core->execCmd("servord");
    unless ($add_feature_lineA) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: remove line $list_dn[0] from MADN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[0] from MADN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after Deo fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
    }
	
	
	# Remove PRK from line A
	  unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }
	
	# Remove CXR from line C
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[2]");
            print FH "STEP: Remove CXR from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[2] - PASS\n";
        }
    } 
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_019 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_019");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_019";
	my $tcid = "ADQ1092_019";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add DDN to line A.
	unless ($ses_core->callFeature(-featureName => "DDN NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DDN for line A-$list_dn[0]");
		print FH "STEP: Add DDN for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DDN for line A($list_dn[0]) - PASSED\n";
    }
	
# Add CNAMD to line B
    
	unless ($ses_core->callFeature(-featureName => "CNAMD NOAMA", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNAMD for line B-$list_dn[1]");
		print FH "STEP: Add CNAMD for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CNAMD for line B($list_dn[1]) - PASSED\n";
    }
    $feature_added = 1;
	
	# Check REVXLVER DDN DN(A) DN(B) b
	my @revxlver;
	unless (grep /SUCCESSFUL TRACE/,@revxlver = $ses_core->execCmd ("revxlver ddn $list_dn[0] $list_dn[1] b")) {
		$logger->error(__PACKAGE__ . " $tcid: Can't enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b'");
		print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b' - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'revxlver ddn $list_dn[0] $list_dn[1] b' - PASSED\n";
    }
	(my $area_code) = ($list_dn[1] =~ /(\d{3})\d+/);
	(my $office_code) = ($list_dn[1] =~ /\d{3}(\d{3})\d+/);
	(my $dn) = ($list_dn[1] =~ /\d{3}\d{3}(\d{4})/);
	my ($delivery, $rev);
	if (grep /$office_code$dn/, @revxlver){
		$logger->debug(__PACKAGE__ . " $tcid: Delivery the number with 7 digits");
		print FH "STEP: Verify the delivery number has only 7 digits - PASSED\n";
	} else {
		$logger->error(__PACKAGE__ . " $tcid: Can not delivery the number with 7 digits");
		print FH "STEP: Verify the delivery number has only 7 digits - FAILED\n";
		print FH "######## Must datafill the table DNREVXLA with tuple REV 151 151 (REV 3 N N) ####\n";
		$rev = 1;
	}
	
	
	# Verify table DNREGION and Table DNREVXLA to add new tuple.
	if ($rev){
		unless($ses_core->execCmd("table DNREGION")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNREGION");
		}
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add REV $area_code $area_code \$")){
				if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
					if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
						print FH "STEP: The tuple 'REV $area_code $area_code' is added - PASSED\n)";
					} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple 'REV $area_code $area_code' is existed\n";
						
					}
				}
				
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add REV $area_code $area_code \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: The tuple 'REV $area_code $area_code' is added - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
					print FH "The tuple 'REV $area_code $area_code' is existed\n";
					
			}
		}
	}	
	if ($rev){
		unless($ses_core->execCmd("table DNREVXLA")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNREVXLA");
		}
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add REV $area_code $area_code REV 3 N N \$")){
				if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
					if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
						print FH "STEP: The tuple 'REV $area_code $area_code REV 3 N N' is added - PASSED\n)";
					} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple 'REV $area_code $area_code REV 3 N N' is existed\n";
						
					}
				}
				
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add REV $area_code $area_code REV 3 N N \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: The tuple 'REV $area_code $area_code REV 3 N N' is added - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
					print FH "The tuple 'REV $area_code $area_code REV 3 N N' is existed\n";
					
			}
		}
	}
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				#-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }

# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
################################## Cleanup ADQ1092_019 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist3 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
               if (grep /31353134303034333138/, @{$tapiterm_out{$gwc_id}{$tn}}) { #dn: 1514004318
                    $exist3 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist3) {
            print FH "STEP: Verify DN(A) has only 7 digits on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Verify DN(A) has only 7 digits on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	###################Remove features added######################
	# Remove DDN from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'DDN', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DDN from line A($list_dn[0])");
            print FH "STEP: Remove DDN from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove DDN from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove cnamd from line B
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'cnamd', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove cnamd from line B($list_dn[1])");
            print FH "STEP: Remove cnamd from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove cnamd from line B ($list_dn[1]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_020 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_020");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_020";
    my $tcid = "ADQ1092_020";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'sst'}{-acc};
	 my $trunk_access_code_pri = $db_trunk{'g6_pri'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line DC
	
	 my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "Lea num is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C $list_dn[2]- FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C $list_dn[2] - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
     #act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	   
	# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[0], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number is $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number is $disa_num - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[0]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code is $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code is $authen_code - PASS\n";
    }
	
	   
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# A start hears confirm tone 
	my %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->startDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A start confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A start confirm tone - PASS\n";
    }
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
   	
	# A dials DISA DN 
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: A dials $disa_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $disa_num - PASS\n";
    }
	
	# A hears confirm tone 
  	  %input = (
                -line_port => $list_line[0],
                -cas_timeout => 50000,
                ); 
    unless($ses_glcas->stopDetectConfirmationToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect ConfirmationTone line $list_line[0]");
		print FH "STEP: A hears confirm tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirm tone - PASS\n";
    }
	
	sleep(4);

    # A dials authen code
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
        print FH "STEP: A dials authen code $authen_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials authen code $authen_code- PASS\n";
    }
    sleep(1);
	# A hears recall dials tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	 my ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code_pri . $dialed_num;
	
	# A dials DN(B) via PRI trunk 
	 %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] ");
        print FH "STEP: A dials DN B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN B - PASS\n";
    }
	
	# Check line B have ringing tone

	 %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Check line C have ringing tone

	 %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	 
		
	# Verify speech path between A and B

	 %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	
	
	# C  monitor A & B successfully

    %input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA C can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA C can monitor the call between A and B - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
        
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	# Out session
	
	unless(grep /CI/, $ses_core_li->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot quit session ");
        print FH "STEP: Quit session - FAIL\n";
        $result = 0;
       
    } else {
        print FH "STEP: Quit session - PASS\n";
    }
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_021 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_021");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_021";
	my $tcid = "ADQ1092_021";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $li_added = 0;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..10]], -password => [@{$core_account{-password}}[2..10]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	 # Verify the tuple AUTO_GRP exists or not
	 # Login to table MMCONF
	unless (grep /TABLE:\s+MMCONF/, $ses_core->execCmd("Table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table MMCONF");
		print FH "STEP: Login to table MMCONF - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table MMCONF - PASSED\n";
	}
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUTO_GRP 0 151 400 0000 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUTO_GRP 0'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUTO_GRP 0 151 400 0000 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUTO_GRP 0'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /FLASHONLY/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple AUTO_GRP 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple AUTO_GRP 0 in table MMCONF - PASS\n";
    }
	# Out session
	
	unless(grep /CI/, $ses_core_li->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot quit session ");
        print FH "STEP: Quit session - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Quit session - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	my ($lea_num) = ($list_dn[3] =~ /\d{3}(\d+)/);
	$lea_num = $trunk_access_code . $lea_num;
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord  ");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI  ");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line D
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SURV to line A  ");
        print FH "STEP: Add SURV to line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SURV to line A - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line D  ");
        print FH "STEP: Add LEA number to line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line D - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	$li_added = 1;
	


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A off-hooks, dials MMCONF number (1514000000) 
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A $list_dn[0] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A $list_dn[0] - PASSED\n";
    }
	# A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF 1514000000");
		print FH "STEP: A dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF 1514000000 - PASSED\n";
	}
	# Detect ring back tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
	# B off-hooks, dials MMCONF number (1514000000)
	# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B $list_dn[1] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B $list_dn[1] - PASSED\n";
    }
	# B hears dial tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
    
	#B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF - 1514000000");
		print FH "STEP: B dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF 1514000000 - PASSED\n";
	}
	
	sleep(5);
	#Check speech path between A and B in CONF
	%input = (
				-list_port => [$list_line[0], $list_line[1]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A & B");
        print FH "STEP: Check speech path between A & B - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A & B - PASSED\n";
	}
	# Check LEA D ring
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	# LEA D answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
        print FH "STEP: offhook LEA $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook LEA $list_line[3] - PASS\n";
    }
	# LEA D can monitor the call between A and B
	%input = (
                -list_port => [$list_line[0],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B");
        print FH "STEP: LEA can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and B - PASS\n";
    }
	# C dials MMCONF
	# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C($list_dn[2]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C($list_dn[2]) - PASSED\n";
    }
	# C hears dial tone
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
    
	#C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF 1514000000");
		print FH "STEP: C dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF 1514000000 - PASSED\n";
	}
	sleep(5);
	#Check speech path between A,B and C in CONF
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A B C");
        print FH "STEP: Check speech path between A B C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A B C - PASSED\n";
	}
	# LEA D can monitor the call between A B C
	%input = (
                -list_port => [$list_line[0],$list_line[1], $list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A B C");
        print FH "STEP: LEA can monitor the call between A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A B C - PASS\n";
    }
	$ses_glcas->startDetectSpecifiedToneCAS(-line_port => $list_line[3], -freq1 => 442, -freq2 => 350, -tone_duration => 25, -cas_timeout => 50000);
	
	# B onhook
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line B $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	
	# LEA D hear exit tone
	unless ($ses_glcas->stopDetectSpecifiedToneCAS(-line_port => $list_line[3], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect exit tone for line $list_dn[3]");
        print FH "STEP: D hears exit tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears exit tone - PASS\n";
    }
	
	
################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 0;
    # my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	# Deact LEA
	if ($li_added) {
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
		$logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
		print FH "STEP: Deact SURV - FAIL\n";
		$result = 0;
	} else {
		print FH "STEP: Deact SURV - PASS\n";
	}
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
		$logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
		print FH "STEP: Deact SURV - FAIL\n";
		$result = 0;
	} else {
		print FH "STEP: Deact SURV - PASS\n";
	}
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
		$logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
		print FH "STEP: Delete SURV - FAIL\n";
		$result = 0;
	} else {
		print FH "STEP: Delete SURV - PASS\n";
	}
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
		$logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
		print FH "STEP: Delete SURV - FAIL\n";
		$result = 0;
	} else {
		print FH "STEP: Delete SURV - PASS\n";
	}
}
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_022 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_022");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_022";
	my $tcid = "ADQ1092_022";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	  # Verify the tuple AUTO_GRP exists or not
	 # Login to table MMCONF
	unless (grep /TABLE:\s+MMCONF/, $ses_core->execCmd("Table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table MMCONF");
		print FH "STEP: Login to table MMCONF - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table MMCONF - PASSED\n";
	}
	
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUTO_GRP 0 151 400 0000 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUTO_GRP 0'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUTO_GRP 0 151 400 0000 0 Y Y N 150 FLASHONLY \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUTO_GRP 0'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /FLASHONLY/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple AUTO_GRP 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple AUTO_GRP 0 in table MMCONF - PASS\n";
    }
	# Out session
	
	unless(grep /CI/, $ses_core_li->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot quit session ");
        print FH "STEP: Quit session - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Quit session - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	my ($lea_num) = ($list_dn[3] =~ /\d{3}(\d+)/);
	$lea_num = $trunk_access_code . $lea_num;
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord  ");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI  ");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line D
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SURV to line A  ");
        print FH "STEP: Add SURV to line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SURV to line A - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line D  ");
        print FH "STEP: Add LEA number to line D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line D - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A off-hooks, dials MMCONF number (1514000000) 
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A $list_dn[0] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A $list_dn[0] - PASSED\n";
    }
	# A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF 1514000000");
		print FH "STEP: A dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF 1514000000 - PASSED\n";
	}
	# Detect ring back tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
	# B off-hooks, dials MMCONF number (1514000000)
	# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B $list_dn[1] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B $list_dn[1] - PASSED\n";
    }
	# B hears dial tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
    
	#B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF - 1514000000");
		print FH "STEP: B dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF 1514000000 - PASSED\n";
	}
	
	sleep(5);
	#Check speech path between A and B in CONF
	%input = (
				-list_port => [$list_line[0], $list_line[1]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A & B");
        print FH "STEP: Check speech path between A & B - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A & B - PASSED\n";
	}
	# Check LEA D ring
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	# LEA D answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[3]");
        print FH "STEP: offhook LEA $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook LEA $list_line[3] - PASS\n";
    }
	# LEA D can monitor the call between A and B
	%input = (
                -list_port => [$list_line[0],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B");
        print FH "STEP: LEA can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and B - PASS\n";
    }
	# C dials MMCONF
	# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C($list_dn[2]) - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C($list_dn[2]) - PASSED\n";
    }
	# C hears dial tone
	%input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[2]");
        print FH "STEP: C hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears dial tone - PASSED\n";
    }
    
	#C dials MMCONF number
	
	%input = (
                -line_port => $list_line[2],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF 1514000000");
		print FH "STEP: C dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials MMCONF 1514000000 - PASSED\n";
	}
	sleep(5);
	#Check speech path between A,B and C in CONF
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A B C");
        print FH "STEP: Check speech path between A B C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A B C - PASSED\n";
	}
	# LEA D can monitor the call between A B C
	%input = (
                -list_port => [$list_line[0],$list_line[1], $list_line[2]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A B C");
        print FH "STEP: LEA can monitor the call between A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A B C - PASS\n";
    }
	
################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 0;
    # my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_023 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_023");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_023";
	my $tcid = "ADQ1092_023";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
	my $add_feature_lineB = 1;
	my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
    # Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	 # Verify the tuple AUTO_GRP exists or not
	 # Login to table MMCONF
	unless (grep /TABLE:\s+MMCONF/, $ses_core->execCmd("Table MMCONF")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table MMCONF");
		print FH "STEP: Login to table MMCONF - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table MMCONF - PASSED\n";
	}
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        @output = $ses_core->execCmd("add AUTO_GRP 0 151 400 0000 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep AUTO_GRP 0 151 400 0000 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CODEADDON/, $ses_core->execCmd("pos AUTO_GRP 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill CODEADDON in table MMCONF");
        print FH "STEP: Datafill CODEADDON in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill CODEADDON in table MMCONF - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
   

	
     # B has 6WC 
	 unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[1]");
		print FH "STEP: add CNF for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 0;
      # Get 6WC access code
	
   	 my $acc_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CONF');
    unless ($acc_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get 6WC access code for line B $list_dn[1]");
		print FH "STEP: get 6WC access code for line B $list_dn[1] is $acc_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get 6WC access code for line B $list_dn[1] is $acc_code - PASS\n";
    }

############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################

#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A off-hooks, dials MMCONF number (1514000000) 
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A $list_dn[0] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A $list_dn[0] - PASSED\n";
    }
	# A hears dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
  
	# A dials MMCONF number
	
	%input = (
                -line_port => $list_line[0],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time,
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF 1514000000");
		print FH "STEP: A dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials MMCONF 1514000000 - PASSED\n";
	}
	# Detect ring back tone on A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ring back tone on line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
	# B off-hooks, dials MMCONF number (1514000000)
	# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B $list_dn[1] - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B $list_dn[1] - PASSED\n";
    }
	# B hears dial tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone on line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
    
	#B dials MMCONF number
	
	%input = (
                -line_port => $list_line[1],
               	-dialed_number => '1514000000',
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial MMCONF - 1514000000");
		print FH "STEP: B dials MMCONF 1514000000 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials MMCONF 1514000000 - PASSED\n";
	}
	
	sleep(4);
	#Check speech path between A and B in CONF
	%input = (
				-list_port => [$list_line[0], $list_line[1]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A & B");
        print FH "STEP: Check speech path between A & B - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A & B - PASSED\n";
	}
	
	 # B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B activates 6WC to DN(C)
	 $dialed_num = "\*$acc_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials dialed_num - PASS\n";
    }
	
	 # B flashes again
	 sleep(1);
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash again - PASS\n";
		
    }
	
	# B dials DN (C)
	sleep(2);
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial C successfully");
		print FH "STEP: B dials C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials C - PASS\n";
    }
	
	# Check line C rings 
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$acc_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials dialed_num - PASS\n";
    }
	
	
	# Verify A,B,C have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C");
        print FH "STEP: Check speech path between A and B,C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B,C - PASS\n";
    }
	
	############
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$acc_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials dialed_num - PASS\n";
    }
	
	 # B flashes again
	 
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash again - PASS\n";
		
    }
	
	# B dials DN (D)
	sleep(2);
	 %input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial C successfully");
		print FH "STEP: B dials C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials C - PASS\n";
    }
	
	# Check line D rings 
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# B flashes
	  %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line B $list_line[1]");
		print FH "STEP: B flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B flash - PASS\n";
		
    }
	
	# B activates 6WC to DN(C)
	sleep(1);
	$dialed_num = "\*$acc_code";
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: B dials dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials dialed_num - PASS\n";
    }
	
	
	# Verify A,B,C,D have speech path
	sleep(2);
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B,C,D");
        print FH "STEP: Check speech path between A and B,C,D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B,C,D - PASS\n";
    }
	
################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
	
    # Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	
	# Remove CNF from line B
	  unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[1]");
            print FH "STEP: Remove CNF from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[1] - PASS\n";
        }
    }
		

    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_024 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_024");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_024";
	my $tcid = "ADQ1092_024";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	# my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Verify there is the tuple AUTO_GRP RAGTIM RAGTIM or not
	unless($ses_core->execCmd("table CUSTSTN")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table CUSTSTN");
		}
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM doesn't exist in the table CUSTSTN");
		print FH "Must add the tuple AUTO_GRP RAGTIM RAGTIM into table CUSTSTN\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 30 0 \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 30 0 \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} elsif (grep /AUTO_GRP RAGTIM RAGTIM 30 0/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
			print FH "The tuple AUTO_GRP RAGTIM RAGTIM 30 0 is existed\n";
			last;
	} else {
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM need to be changed");
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("change")){
			if (grep /OPTION/, $ses_core->execCmd("Y")){
				if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
					if (grep /RAGCANTO/, $ses_core->execCmd("30")){
						if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
							if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - PASSED\n";
							} else {
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - FAILED\n";
								$result = 0;
							}
						}
					}
				}
			}
		} elsif (grep /OPTION/, $ses_core->execCmd("change")){
			if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
				if (grep /RAGCANTO/, $ses_core->execCmd("30")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
						if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - PASSED\n";
						} else {
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - FAILED\n";
							$result = 0;
						}
					}
				}
			}
		}
	}
# Add CXR to line A.
	unless ($ses_core->callFeature(-featureName => "CXR CTALL N STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line A-$list_dn[0]");
		print FH "STEP: Add CXR for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CXR for line A($list_dn[0]) - PASSED\n";
    }

# Add RAG to line D
    
	unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add RAG for line D-$list_dn[3]");
		print FH "STEP: Add RAG for line D($list_dn[3]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG for line D($list_dn[3]) - PASSED\n";
    }
    $feature_added = 1;

# Get RAG access code
	my $rag_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[3], -lastColumn => 'RAG');
    unless ($rag_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[3]");
		print FH "STEP: Get RAG access code for line $list_dn[3] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_acc \n";
        print FH "STEP: Get RAG access code for line $list_dn[3] - PASSED\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls C
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
				#-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C - PASSED\n";
    }

# A calls B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				#-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B - PASSED\n";
    }
# Onhook A

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }

# Check speech path between B and C
	%input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between C and B");
        print FH "STEP: Verify speech path between C and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between C and B - PASSED\n";
    }
# D calls B and hear busy tone.
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
				#-dialed_number => $dialed_num,
                -regionA => $list_region[3],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call B");
        print FH "STEP: D calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on D
	%input = (
				-line_port => $list_line[3],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[3]");
        print FH "STEP: D starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D starts detect confirmation tone - PASSED\n";
    } 
# After flash, D dials RAG access code.
	%input = (
                -line_port => $list_line[3],
                -dialed_number => '*'.$rag_acc,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: D dials RAG access code ($rag_acc) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials RAG access code ($rag_acc) - PASSED\n";
	}
# Stop detect Confirmation tone on D
	%input = (
				-line_port => $list_line[3],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[3]");
        print FH "STEP: D detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D detects Confirmation Tone - PASSED\n";
    }
# D on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line D - PASSED\n";
    }
	sleep(3);
# B, C on-hook
	unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASSED\n";
    }
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep (1);
# Detect D rings
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line D ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASSED\n";
    }
# D off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
# Detect ringback tone on D
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[3]");
        print FH "STEP: D hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears ringback tone - PASSED\n";
    }
# Detect B rings.
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# B off-hooks to answer D.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# Check speech path between B and D
	%input = (
                -list_port => [$list_line[3],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between D and B");
        print FH "STEP: Verify speech path between D and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between D and B - PASSED\n";
    }
# On-hook B and D.
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line D - PASSED\n";
    }
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
################################## Cleanup ADQ1092_024 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_024 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CXR from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line A($list_dn[0])");
            print FH "STEP: Remove CXR from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CXR from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove RAG from line D
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line D($list_dn[3])");
            print FH "STEP: Remove RAG from line D ($list_dn[3]) - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line D ($list_dn[3]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_025 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_025");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_025";
	my $tcid = "ADQ1092_025";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	# my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CND CNAMD to A & B
	
	foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line A $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[1] - PASS\n";
        }
    }
	
	 unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	 unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
# Add NAME for A & B.
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line A-$list_dn[0]");
		print FH "STEP: Add NAME for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line A($list_dn[0]) - PASSED\n";
    }
	
	($dn) = ($list_dn[1] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line B-$list_dn[1]");
		print FH "STEP: Add NAME for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line B($list_dn[1]) - PASSED\n";
    }
# Verify there is the tuple AUTO_GRP RAGTIM RAGTIM or not
	unless($ses_core->execCmd("table CUSTSTN")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table CUSTSTN");
		}
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM doesn't exist in the table CUSTSTN");
		print FH "Must add the tuple AUTO_GRP RAGTIM RAGTIM into table CUSTSTN\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 30 0 \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 30 0 \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} elsif (grep /AUTO_GRP RAGTIM RAGTIM 30 0/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
			print FH "The tuple AUTO_GRP RAGTIM RAGTIM 30 0 is existed\n";
			last;
	} else {
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM need to be changed");
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("change")){
			if (grep /OPTION/, $ses_core->execCmd("Y")){
				if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
					if (grep /RAGCANTO/, $ses_core->execCmd("30")){
						if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
							if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - PASSED\n";
							} else {
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - FAILED\n";
								$result = 0;
							}
						}
					}
				}
			}
		} elsif (grep /OPTION/, $ses_core->execCmd("change")){
			if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
				if (grep /RAGCANTO/, $ses_core->execCmd("30")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
						if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - PASSED\n";
						} else {
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 30 0 - FAILED\n";
							$result = 0;
						}
					}
				}
			}
		}
	}

# Add RAG to line A
    
	unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add RAG for line A-$list_dn[0]");
		print FH "STEP: Add RAG for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG for line A($list_dn[0]) - PASSED\n";
    }
    $feature_added = 1;

# Get RAG access code
	my $rag_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'RAG');
    unless ($rag_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[0]");
		print FH "STEP: Get RAG access code for line $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_acc \n";
        print FH "STEP: Get RAG access code for line $list_dn[0] - PASSED\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# B off-hook to make it busy.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	sleep (1);
# Check B is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not CPB status");
        print FH "STEP: Check B is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is CPB status - PASSED\n";
	}
# A calls B and hear busy tone.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
# After flash, A dials RAG access code.
	%input = (
                -line_port => $list_line[0],
                -dialed_number => '*'.$rag_acc,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: A dials RAG access code ($rag_acc) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials RAG access code ($rag_acc) - PASSED\n";
	}
# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep(3);

# Detect A rings
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASSED\n";
    }
# A off-hooks.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
# Detect ringback tone on A
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASSED\n";
    }
# Detect B rings.
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# B off-hooks to answer A.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
# Check speech path between B and A
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B - PASSED\n";
    }
# On-hook B and A.
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
################################## Cleanup ADQ1092_025 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_025 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove RAG from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line D($list_dn[0])");
            print FH "STEP: Remove RAG from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line A ($list_dn[0]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_026 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_026");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_026";
	my $tcid = "ADQ1092_026";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	# my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CND CNAMD to A & B
	foreach ('CND NOAMA ACT','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	 unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	
	foreach ('CND NOAMA ACT','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line A $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[1] - PASS\n";
        }
    }
	
	 unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
# Add NAME for A & B.
	(my $dn) = ($list_dn[0] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line A-$list_dn[0]");
		print FH "STEP: Add NAME for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line A($list_dn[0]) - PASSED\n";
    }
	
	($dn) = ($list_dn[1] =~ /\d{3}\d{3}(\d{4})/);
	unless ($ses_core->callFeature(-featureName => "NAME PUBLIC PUB$dn PRIVATE PUB$dn", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add NAME for line B-$list_dn[1]");
		print FH "STEP: Add NAME for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add NAME for line B($list_dn[1]) - PASSED\n";
    }
# Verify there is the tuple AUTO_GRP RAGTIM RAGTIM or not
	unless($ses_core->execCmd("table CUSTSTN")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table CUSTSTN");
		}
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM doesn't exist in the table CUSTSTN");
		print FH "Must add the tuple AUTO_GRP RAGTIM RAGTIM into table CUSTSTN\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 10 0 \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add AUTO_GRP RAGTIM RAGTIM 10 0 \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM can't be added");
					print FH "STEP: The tuple AUTO_GRP RAGTIM RAGTIM is added - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} elsif (grep /AUTO_GRP RAGTIM RAGTIM 10 0/, $ses_core->execCmd("pos AUTO_GRP RAGTIM RAGTIM")){
			print FH "The tuple AUTO_GRP RAGTIM RAGTIM 10 0 is existed\n";
			last;
	} else {
		$logger->error(__PACKAGE__ . " $tcid: The tuple AUTO_GRP RAGTIM RAGTIM need to be changed");
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("change")){
			if (grep /OPTION/, $ses_core->execCmd("Y")){
				if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
					if (grep /RAGCANTO/, $ses_core->execCmd("10")){
						if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
							if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 10 0 - PASSED\n";
							} else {
								print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 10 0 - FAILED\n";
								$result = 0;
							}
						}
					}
				}
			}
		} elsif (grep /OPTION/, $ses_core->execCmd("change")){
			if (grep /RAGRECTO/, $ses_core->execCmd("RAGTIM")){
				if (grep /RAGCANTO/, $ses_core->execCmd("10")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("0")){
						if (grep /TUPLE CHANGED/, $ses_core->execCmd("Y")){
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 10 0 - PASSED\n";
						} else {
							print FH "The tuple is changed to AUTO_GRP RAGTIM RAGTIM 10 0 - FAILED\n";
							$result = 0;
						}
					}
				}
			}
		}
	}

# Add RAG to line A
    
	unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add RAG for line A-$list_dn[0]");
		print FH "STEP: Add RAG for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add RAG for line A($list_dn[0]) - PASSED\n";
    }
    $feature_added = 1;

# Get RAG access code
	my $rag_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'RAG');
    unless ($rag_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get RAG access code for line $list_dn[0]");
		print FH "STEP: Get RAG access code for line $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code RAG is: $rag_acc \n";
        print FH "STEP: Get RAG access code for line $list_dn[0] - PASSED\n";
    }
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# B off-hook to make it busy.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	sleep (1);
# Check B is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not CPB status");
        print FH "STEP: Check B is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is CPB status - PASSED\n";
	}
# A calls B and hear busy tone.
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and hears BUSY tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and hears BUSY tone - PASSED\n";
    }
	sleep(2);
# Start detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
# After flash, A dials RAG access code.
	%input = (
                -line_port => $list_line[0],
                -dialed_number => '*'.$rag_acc,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial RAG access code successfully");
		print FH "STEP: A dials RAG access code ($rag_acc) - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials RAG access code ($rag_acc) - PASSED\n";
	}
# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	sleep(3);

# Detect A rings
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASSED\n";
    }
	sleep (10);
# Detect A rings again after timeout
	%input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    if ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A stops ringing after timeout - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A stops ringing after timeout - PASSED\n";
    }
	sleep (1);
# Check A and B are IDL again
	unless (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[0] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[0] is not IDL status");
        print FH "STEP: Check A is IDL status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check A is IDL status - PASSED\n";
	}
	unless (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not IDL status");
        print FH "STEP: Check B is IDL status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is IDL status - PASSED\n";
	}
################################## Cleanup ADQ1092_025 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_025 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove RAG from line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line D($list_dn[0])");
            print FH "STEP: Remove RAG from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove RAG from line A ($list_dn[0]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_027 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_027");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_027";
	my $tcid = "ADQ1092_027";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

################## Add feature or datafill table ###########################
#############################################################
	 # Verify the tuple AUDIO1 CPARK RINGING exists or not
     # Login to table CUSTSTN
	unless (grep /TABLE:\s+CUSTSTN/, $ses_core->execCmd("Table CUSTSTN")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table CUSTSTN");
		print FH "STEP: Login to table CUSTSTN - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table CUSTSTN - PASSED\n";
	}
		
	unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos AUTO_GRP SPP")) {
        if (grep /ERROR/, $ses_core->execCmd("add AUTO_GRP SPP SPP 2")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUTO_GRP SPP SPP'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep AUTO_GRP SPP SPP 2")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUTO_GRP SPP SPP'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /SPP/, $ses_core->execCmd("pos AUTO_GRP SPP")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUTO_GRP SPP SPP in table CUSTSTN - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUTO_GRP SPP SPP in table CUSTSTN - PASS\n";
    }

# Add CND CNAMD to A
	
	foreach ('CND NOAMA','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line A $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line A $list_dn[0] - PASS\n";
        }
    }
	
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add CFB to line B
    unless ($ses_core->callFeature(-featureName => "CFB P", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFB for line $list_dn[1]");
		print FH "STEP: Add CFB for line B ($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFB for line B($list_dn[1]) - PASSED\n";
    }
    
# Active CFB to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[1] CFB $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFB for line $list_dn[1]");
		print FH "STEP: Active CFB for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFB for line B($list_dn[1]) - PASSED\n";
    }
# Add ACB and SACB to line C.
		
	# Add ACB and SACB to line C.
	unless ($ses_core->callFeature(-featureName => "ACB NOAMA SACB ACT ALL 12345 N", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ACB, SACB for line $list_dn[2]");
		print FH "STEP: Add ACB, SACB for line C ($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ACB, SACB for line C ($list_dn[2]) - PASSED\n";
    }
	
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# B off-hook to make it busy.
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	sleep (1);
# Check B is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[1] is not CPB status");
        print FH "STEP: Check B is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check B is CPB status - PASSED\n";
	}
# A calls B via PRI Trunk, B answers
    ($dialed_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	print FH "The dialed number through PRI on TMA2m: $dialed_num\n";
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
               # -dialed_number => $list_dn[1],
				-dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B via PRI Trunk and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B via PRI Trunk and C answers - PASSED\n";
    }
	
# Onhook A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	
	unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
        print FH "STEP: Onhook line C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line C - PASSED\n";
    }
################################## Cleanup ADQ1092_027 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_027 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove ACB, SACB on line C
	
	unless ($feature_added) {
        foreach ('ACB','SACB') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[2]");
                print FH "STEP: Remove $_ from line B $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line B $list_dn[2] - PASS\n";
            }
        }
    }
	# Remove CFB on line B
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CFB', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line B($list_dn[1])");
            print FH "STEP: Remove CFB from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFB from line B ($list_dn[1]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_028 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_028");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_028";
	my $tcid = "ADQ1092_028";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $li_added = 0;
	my $ucd_act = 0;
    my (@list_file_name, $dialed_num, $ID, %info);
	# my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M lab for LI - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M lab for LI - PASSED\n";
    }
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
	unless ($ses_core_li->loginCore(-username => [@{$core_account_li{-username}}[0..3]], -password => [@{$core_account_li{-password}}[0..3]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core for LI");
		print FH "STEP: Login TMA2M LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add UCD, CXR to A
	
	unless ($ses_core->callFeature(-featureName => "ucd cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add UCD, CXRfor line A-$list_dn[0]");
		print FH "STEP: Add UCD, CXR for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add UCD, CXR for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table UCDGRP with AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 $
# This tuple must change in other lab by THROUTE parameter.
	my $dn_ucd_pri = 1514004111; # DN for UCD Primary
	(my $ucd_pri_area) = ($dn_ucd_pri =~ /(\d{3})\d+/);
	(my $ucd_pri_office) = ($dn_ucd_pri =~ /\d{3}(\d{3})\d+/);
	(my $ucd_pri_dn) = ($dn_ucd_pri =~ /\d{3}\d{3}(\d{4})/);
	
	my $dn_ucd_supp = 1514004222; # DN for UCD Supp
	(my $ucd_supp_area) = ($dn_ucd_supp =~ /(\d{3})\d+/);
	(my $ucd_supp_office) = ($dn_ucd_supp =~ /\d{3}(\d{3})\d+/);
	(my $ucd_supp_dn) = ($dn_ucd_supp =~ /\d{3}\d{3}(\d{4})/);
	my $ucdgrp;
	unless ($ses_core->execCmd("table UCDGRP")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table UCDGRP");
		}
	unless (grep /AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3/,$ses_core->execCmd("format pack; list all")) {
		$logger->error(__PACKAGE__ . " $tcid: Don't exist tuple AUTOUCD in the table UCDGRP");
		print FH "Need to add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 into table UCDGRP";
		$ucdgrp = 1;
	}
	if ($ucdgrp){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is existed\n";
						last;
				}
			}
	}
# Datafill the table DNROUTE with 151 400 4111 FEAT UCD AUTOUCD PRIM 0 & 151 400 4222 FEAT UCD AUTOUCD SUPP 1 1
	
	my $dnroute;
	unless ($ses_core->execCmd("table DNROUTE")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNROUTE");
	}
	unless (grep /FEAT UCD AUTOUCD PRIM/,$ses_core->execCmd("format pack; list all")) {
		$logger->error(__PACKAGE__ . " $tcid: Don't exist tuple UCD AUTOUCD PRIM in the table DNROUTE");
		print FH "Need to add '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 & $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' into table DNROUTE";
		$dnroute = 1;
	}
	if ($dnroute){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is existed\n";
						last;
				}
			}
		
	}
	if ($dnroute){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is existed\n";
						last;
				}
			}
		
	}
# Get ucd acctive code 
	my $ucda_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'UCDA');
	my $ucdd_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'UCDD');
    unless ($ucda_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get UCDA access code for line $list_dn[0]");
		print FH "STEP: Get UCDA access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code UCDA is: $ucda_code \n";
        print FH "STEP: Get UCDA access code for line A($list_dn[0]) - PASSED\n";
    }
# Add SURV and LEA to line A and D
	# Login to DNBDORDER
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord");
        print FH "STEP: Access to dnbdord mode - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord mode - PASSED\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI");
        print FH "STEP: Enter password to LI - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASSED\n";
    }
	
	# Add SURV to line A and LEA to line D   
	
	 my ($lea_num) = ($list_dn[3] =~ /\d{3}(\d+)/);  	 
     $lea_num = $trunk_access_code . $lea_num;
	 print FH "LEA num via trunk ISUP is $lea_num\n";
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line D  ");
        print FH "STEP: Add LEA number to line D $list_dn[3]- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line D $list_dn[3] - PASSED\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line D ");
        print FH "STEP: Add LEA number to line D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line D - PASSED\n";
    }

	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	# Active SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Enter cmd 'surv act $ID'");
        print FH "STEP: Enter cmd 'surv act $ID' - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter cmd 'surv act $ID' - PASSED\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Actived SURV - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Actived SURV - PASSED\n";
    }
	$li_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A actives UCD 
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A to active UCD - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A to active UCD - PASSED\n";
    }
	
	sleep (1);
	# Check A hears dial tone
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect Confirmation tone on line A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
	
	# A dials UCDA
	$dialed_num = '*' . $ucda_code . $dn_ucd_pri . '#';
	print FH " Print the dialed number to enable UCD: $dialed_num\n";
    %input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num ");
		print FH "STEP: A actives UCDA by DN - $dn_ucd_pri - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A actives UCDA by DN - $dn_ucd_pri - PASSED\n";
	}
	# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
	$ucd_act = 1;
# Onhook A
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B calls A by $dn_ucd_pri, A answers
    
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
               # -dialed_number => $list_dn[1],
				-dialed_number => $dn_ucd_pri,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: B calls A by $dn_ucd_pri and A answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls A by $dn_ucd_pri and A answers  - PASSED\n";
    }
	
# Detect D rings and monitor the call A and B
	%input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASSED\n";
    }
	# D off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
# Check speech path A&B again
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASSED\n";
    }
# D can hear speech between A&B
	%input = (
                -list_port => [$list_line[0], $list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[3],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B ");
        print FH "STEP: LEA (D) can monitor the call between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA (D) can monitor the call between A and B - PASSED\n";
    }
# A flashs to do consult tranfer to C
	 %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line A $list_line[0]");
		print FH "STEP: A flashs - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A flashs - PASSED\n";
    }
	sleep (1);
# A calls C
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C and C answers  - PASSED\n";
    }
# Onhook A to transfer
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A to transfer - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A to transfer - PASSED\n";
    }
	sleep (1);
# Check speech path C&B again
	%input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASSED\n";
    }
# # D can hear speech between C&B
	# %input = (
                # -list_port => [$list_line[2], $list_line[1]],
                # -cas_timeout => 20000,
                # -lea_port => $list_line[3],
                # ); 
    # unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between C and B ");
        # print FH "STEP: LEA (D) can monitor the call between C and B - FAILED\n";
        # $result = 0;
        # goto CLEANUP;
    # } else {
        # print FH "STEP: LEA (D) can monitor the call between C and B - PASSED\n";
    # }
# On-hook all line
	for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
	unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
# A off-hooks to deactive UCD 
	if ($ucd_act){
		unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
			print FH "STEP: Offhook line A to deactive UCD - FAILED\n";
			$result = 0;
        goto CLEANUP;
		} else {
			print FH "STEP: Offhook line A to deactive UCD - PASSED\n";
		}
		
		sleep (1);
		# Check A hears dial tone
		%input = (
					-line_port => $list_line[0],
					-dial_tone_duration => 1000,
					-cas_timeout => 50000,
					-wait_for_event_time => $wait_for_event_time
					);
		unless ($ses_glcas->detectDialToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone line $list_dn[0]");
			print FH "STEP: A hears dial tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A hears dial tone - PASSED\n";
		}
		# Start detect Confirmation tone on line A
		%input = (
					-line_port => $list_line[0],
					-cas_timeout => 50000,
					);
		unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
			print FH "STEP: A starts detect confirmation tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A starts detect confirmation tone - PASSED\n";
		} 
		
		# A dials UCDA
		$dialed_num = '*' . $ucdd_code;
		print FH " Print the dialed number to deactive UCD: $dialed_num\n";
		%input = (
					-line_port => $list_line[0],
					-dialed_number => $dialed_num,
					-digit_on => 300,
					-digit_off => 300,
					-wait_for_event_time => $wait_for_event_time
					); 
		
		unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
			$logger->error(__PACKAGE__ . ": Cannot dial $dialed_num ");
			print FH "STEP: A deactives UCD by DN - $dn_ucd_pri - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A deactives UCD by DN - $dn_ucd_pri - PASSED\n";
		}
		# Stop detect Confirmation tone on A
		%input = (
					-line_port => $list_line[0],
					-wait_for_event_time => $wait_for_event_time,
					);
		unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
			print FH "STEP: A detects Confirmation Tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A detects Confirmation Tone - PASSED\n";
		}
	# Onhook A
		unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
			print FH "STEP: Onhook line A to end scenario - FAILED\n";
			$result = 0;
            goto CLEANUP;
		} else {
			print FH "STEP: Onhook line A to end scenario - PASSED\n";
		}
	}
################################## Cleanup ADQ1092_028 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_028 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            # $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove UCD on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'UCD', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove UCD from line A($list_dn[0])");
            print FH "STEP: Remove UCD from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove UCD from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Deactive LEA
	if ($li_added){ 
		unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
			print FH "STEP: Enter cmd 'surv deact $ID' - FAILED\n";
			$result = 0;
		} else {
			print FH "STEP: Enter cmd 'surv deact $ID' - PASSED\n";
		}
		
		unless(grep /Done/, $ses_core_li->execCmd("y")) {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
			print FH "STEP: Deactive SURV - FAILED\n";
			$result = 0;
		} else {
			print FH "STEP: Deactive SURV - PASSED\n";
		}
		# Del LEA
		unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
			print FH "STEP: Enter cmd 'del $ID' - FAILED\n";
			$result = 0;
		} else {
			print FH "STEP: Enter cmd 'del $ID' - PASSED\n";
		}
		
		unless(grep /Done/, $ses_core_li->execCmd("y")) {
			$logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
			print FH "STEP: Delete SURV - FAILED\n";
			$result = 0;
		} else {
			print FH "STEP: Delete SURV - PASSED\n";
		}
	}
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}
sub ADQ1092_029 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_029");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_029";
	my $tcid = "ADQ1092_029";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
	my $ucd_act = 0;
    my (@list_file_name, $dialed_num, %info);
	# my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add UCD, CXR to A
	
	unless ($ses_core->callFeature(-featureName => "ucd cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add UCD, CXRfor line A-$list_dn[0]");
		print FH "STEP: Add UCD, CXR for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add UCD, CXR for line A($list_dn[0]) - PASSED\n";
    }
# Add PRK to line B
	unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line B-$list_dn[1]");
		print FH "STEP: Add PRK for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add PRK for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
# Datafill the table UCDGRP with AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 $
# This tuple must change in other lab by THROUTE parameter.
	my $dn_ucd_pri = 1514004111; # DN for UCD Primary
	(my $ucd_pri_area) = ($dn_ucd_pri =~ /(\d{3})\d+/);
	(my $ucd_pri_office) = ($dn_ucd_pri =~ /\d{3}(\d{3})\d+/);
	(my $ucd_pri_dn) = ($dn_ucd_pri =~ /\d{3}\d{3}(\d{4})/);
	
	my $dn_ucd_supp = 1514004222; # DN for UCD Supp
	(my $ucd_supp_area) = ($dn_ucd_supp =~ /(\d{3})\d+/);
	(my $ucd_supp_office) = ($dn_ucd_supp =~ /\d{3}(\d{3})\d+/);
	(my $ucd_supp_dn) = ($dn_ucd_supp =~ /\d{3}\d{3}(\d{4})/);
	my $ucdgrp;
	unless ($ses_core->execCmd("table UCDGRP")) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot find the table UCDGRP");
		}
	unless (grep /AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3/,$ses_core->execCmd("format pack; list all")) {
		$logger->error(__PACKAGE__ . " $tcid: Don't exist tuple AUTOUCD in the table UCDGRP");
		print FH "Need to add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 into table UCDGRP";
		$ucdgrp = 1;
	}
	if ($ucdgrp){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple 'AUTOUCD N AUTO_GRP 20 OFRT 151 OFRT 151 0 5 Y 0 0 30 3' is existed\n";
						last;
				}
			}
	}
# Datafill the table DNROUTE with 151 400 4111 FEAT UCD AUTOUCD PRIM 0 & 151 400 4222 FEAT UCD AUTOUCD SUPP 1 1
	
	my $dnroute;
	unless ($ses_core->execCmd("table DNROUTE")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot find the table DNROUTE");
	}
	unless (grep /FEAT UCD AUTOUCD PRIM/,$ses_core->execCmd("format pack; list all")) {
		$logger->error(__PACKAGE__ . " $tcid: Don't exist tuple UCD AUTOUCD PRIM in the table DNROUTE");
		print FH "Need to add '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 & $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' into table DNROUTE";
		$dnroute = 1;
	}
	if ($dnroute){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple '$ucd_pri_area $ucd_pri_office $ucd_pri_dn FEAT UCD AUTOUCD PRIM 0' is existed\n";
						last;
				}
			}
		
	}
	if ($dnroute){
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1 \$")){
					if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
						if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
							print FH "STEP: The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is added - PASSED\n)";
						} else {
							$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
							print FH "The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is existed\n";
							last;
						}
					}
					
			} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add $ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1 \$")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is added - PASSED\n";
				} else {
						$logger->error(__PACKAGE__ . " $tcid: The tuple is existed");
						print FH "The tuple '$ucd_supp_area $ucd_supp_office $ucd_supp_dn FEAT UCD AUTOUCD SUPP 1 1' is existed\n";
						last;
				}
			}
		
	}
# Get ucd acctive code 
	my $ucda_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'UCDA');
	my $ucdd_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'UCDD');
    unless ($ucda_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get UCDA access code for line $list_dn[0]");
		print FH "STEP: Get UCDA access code for line A ($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code UCDA is: $ucda_code \n";
        print FH "STEP: Get UCDA access code for line A($list_dn[0]) - PASSED\n";
    }
# Get PRKS Acctive code for line B
	my $prks_code = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'PRKS');
    unless ($prks_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get PRKS access code for line $list_dn[1]");
		print FH "STEP: Get PRKS access code for line B ($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
		print FH "The access code PRKS is: $prks_code \n";
        print FH "STEP: Get PRKS access code for line B ($list_dn[1]) - PASSED\n";
    }
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A actives UCD 
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A to active UCD - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A to active UCD - PASSED\n";
    }
	
	sleep (1);
	# Check A hears dial tone
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASSED\n";
    }
	# Start detect Confirmation tone on line A
	%input = (
				-line_port => $list_line[0],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
        print FH "STEP: A starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A starts detect confirmation tone - PASSED\n";
    } 
	
	# A dials UCDA
	$dialed_num = '*' . $ucda_code . $dn_ucd_pri . '#';
	print FH " Print the dialed number to enable UCD: $dialed_num\n";
    %input = (
                -line_port => $list_line[0],
               	-dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
	
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num ");
		print FH "STEP: A actives UCDA by DN - $dn_ucd_pri - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A actives UCDA by DN - $dn_ucd_pri - PASSED\n";
	}
	# Stop detect Confirmation tone on A
	%input = (
				-line_port => $list_line[0],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
        print FH "STEP: A detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A detects Confirmation Tone - PASSED\n";
    }
	$ucd_act = 1;
# Onhook A
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
# B calls A by $dn_ucd_pri, A answers, B flash
    ($dialed_num) = ($dn_ucd_pri =~ /\d{3}(\d+)/);
	$dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $dialed_num,
				#-dialed_number => $dn_ucd_pri,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: B calls A by $dn_ucd_pri and A answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls A by $dn_ucd_pri and A answers  - PASSED\n";
    }
	sleep (1);
# 
# Check B hears dial tone
    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASSED\n";
    }
# Start detect Confirmation tone on line B
	%input = (
				-line_port => $list_line[1],
				-cas_timeout => 50000,
				);
    unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[1]");
        print FH "STEP: B starts detect confirmation tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B starts detect confirmation tone - PASSED\n";
    } 
# B dials PRK access code
	%input = (
                -line_port => $list_line[1],
				#-dialed_number => $list_dn[1],
				-dialed_number => '*'.$prks_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial B successfully");
		print FH "STEP: A dials B - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials B - PASSED\n";
	}
# Stop detect Confirmation tone on B
	%input = (
				-line_port => $list_line[1],
				-wait_for_event_time => $wait_for_event_time,
				);
    unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[1]");
        print FH "STEP: B detects Confirmation Tone - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B detects Confirmation Tone - PASSED\n";
    }
# Onhook B
		unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
			print FH "STEP: Onhook line B for PRK - FAILED\n";
			$result = 0;
            goto CLEANUP;
		} else {
			print FH "STEP: Onhook line B for PRK - PASSED\n";
		}
# sleep about 30s
	sleep (60);
# Detect B rings again
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASSED\n";
    }
# B off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
			print FH "STEP: Offhook line B to answer A - FAILED\n";
			$result = 0;
            goto CLEANUP;
		} else {
			print FH "STEP: Offhook line B to answer A - PASSED\n";
		}
# Verify speech path between A & B
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASSED\n";
    }
# On-hook all line
	for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
	
# A off-hooks to deactive UCD 
	if ($ucd_act){
		unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
			print FH "STEP: Offhook line A to deactive UCD - FAILED\n";
			$result = 0;
            goto CLEANUP;
		} else {
			print FH "STEP: Offhook line A to deactive UCD - PASSED\n";
		}
		
		sleep (1);
		# Check A hears dial tone
		%input = (
					-line_port => $list_line[0],
					-dial_tone_duration => 1000,
					-cas_timeout => 50000,
					-wait_for_event_time => $wait_for_event_time
					);
		unless ($ses_glcas->detectDialToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Cannot detect dial tone line $list_dn[0]");
			print FH "STEP: A hears dial tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A hears dial tone - PASSED\n";
		}
		# Start detect Confirmation tone on line A
		%input = (
					-line_port => $list_line[0],
					-cas_timeout => 50000,
					);
		unless ($ses_glcas->startDetectConfirmationToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Can't start detect ConfirmationTone $list_dn[0]");
			print FH "STEP: A starts detect confirmation tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A starts detect confirmation tone - PASSED\n";
		} 
		
		# A dials UCDA
		$dialed_num = '*' . $ucdd_code;
		print FH " Print the dialed number to deactive UCD: $dialed_num\n";
		%input = (
					-line_port => $list_line[0],
					-dialed_number => $dialed_num,
					-digit_on => 300,
					-digit_off => 300,
					-wait_for_event_time => $wait_for_event_time
					); 
		
		unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
			$logger->error(__PACKAGE__ . ": Cannot dial $dialed_num ");
			print FH "STEP: A deactives UCD by DN - $dn_ucd_pri - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A deactives UCD by DN - $dn_ucd_pri - PASSED\n";
		}
		# Stop detect Confirmation tone on A
		%input = (
					-line_port => $list_line[0],
					-wait_for_event_time => $wait_for_event_time,
					);
		unless ($ses_glcas->stopDetectConfirmationToneCAS(%input)){
			$logger->error(__PACKAGE__ . ".$tcid: Can't stop detect Confirmation Tone $list_dn[0]");
			print FH "STEP: A detects Confirmation Tone - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: A detects Confirmation Tone - PASSED\n";
		}
	# Onhook A
		unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
			$logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
			print FH "STEP: Onhook line A to end scenario - FAILED\n";
			$result = 0;
            goto CLEANUP;
		} else {
			print FH "STEP: Onhook line A to end scenario - PASSED\n";
		}
	}
################################## Cleanup ADQ1092_029 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_029 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            # $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove UCD on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'UCD', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove UCD from line A($list_dn[0])");
            print FH "STEP: Remove UCD from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove UCD from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove PRK from B
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line B($list_dn[1])");
            print FH "STEP: Remove PRK from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove PRK from line B ($list_dn[1]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}



sub ADQ1092_iservopt {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_iservopt");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_iservopt";
	my $tcid = "ADQ1092_iservopt";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }

	unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[1..20]], -password => [@{$core_account{-password}}[1..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to datafill table ISERVOPT - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to datafill table ISERVOPT - PASSED\n";
    }
  
################## Add feature or datafill table ###########################

	# Check login table iservopt
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table iservopt")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot find the table iservopt");
		print FH "STEP: Login to table iservopt - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: Login to table iservopt - PASSED\n";
	}
	# Verify tuple I3WC I3WC N
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos I3WC I3WC N")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple I3WC I3WC N doesn't exist in the table iservopt");
		print FH "Need to add the tuple 'I3WC I3WC N'\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add I3WC I3WC N \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: Add the tuple 'I3WC I3WC N' - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'I3WC I3WC N' can't add");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Add the tuple 'I3WC I3WC N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add I3WC I3WC N \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: Add the tuple 'I3WC I3WC N' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'I3WC I3WC N' can't add");
					print FH "STEP: Add the tuple 'I3WC I3WC N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} else {
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("rep I3WC I3WC N \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
					print FH "STEP: Replaced the tuple 'I3WC I3WC N' - PASSED\n";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'I3WC I3WC N' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'I3WC I3WC N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("rep I3WC I3WC N \$")){
			if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
				print FH "STEP: Replaced the tuple 'I3WC I3WC N' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'I3WC I3WC N' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'I3WC I3WC N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
	}
	# Verify ICT ICT ALLOW_BOTH ALLOW_BOTH
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos ICT ICT ALLOW_BOTH ALLOW_BOTH")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple ICT ICT ALLOW_BOTH ALLOW_BOTH doesn't exist in the table iservopt");
		print FH "Need to add the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH'\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add ICT ICT ALLOW_BOTH ALLOW_BOTH \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: Add the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' can't add");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Add the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add ICT ICT ALLOW_BOTH ALLOW_BOTH \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: Add the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' can't add");
					print FH "STEP: Add the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} else {
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("rep ICT ICT ALLOW_BOTH ALLOW_BOTH \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
					print FH "STEP: Replaced the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - PASSED\n";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("rep ICT ICT ALLOW_BOTH ALLOW_BOTH \$")){
			if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
				print FH "STEP: Replaced the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICT ICT ALLOW_BOTH ALLOW_BOTH' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
	}
	# Verify ICT ICT ALLOW_BOTH ALLOW_BOTH
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos ICWT ICWT N N N 45 BUSY N N")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple ICWT ICWT N N N 45 BUSY N N doesn't exist in the table iservopt");
		print FH "Need to add the tuple 'ICWT ICWT N N N 45 BUSY N N'\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add ICWT ICWT N N N 45 BUSY N N \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: Add the tuple 'ICWT ICWT N N N 45 BUSY N N' - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICWT ICWT N N N 45 BUSY N N' can't add");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Add the tuple 'ICWT ICWT N N N 45 BUSY N N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add ICWT ICWT N N N 45 BUSY N N \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: Add the tuple 'ICWT ICWT N N N 45 BUSY N N' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICWT ICWT N N N 45 BUSY N N' can't add");
					print FH "STEP: Add the tuple 'ICWT ICWT N N N 45 BUSY N N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} else {
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("rep ICWT ICWT N N N 45 BUSY N N \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
					print FH "STEP: Replaced the tuple 'ICWT ICWT N N N 45 BUSY N N' - PASSED\n";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICWT ICWT N N N 45 BUSY N N' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICWT ICWT N N N 45 BUSY N N - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("rep ICWT ICWT N N N 45 BUSY N N \$")){
			if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
				print FH "STEP: Replaced the tuple 'ICWT ICWT N N N 45 BUSY N N' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICWT ICWT N N N 45 BUSY N N' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICWT ICWT N N N 45 BUSY N N' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
	} 
	# Verify ICONF ICONF Y Y N Y Y
	if (grep /TUPLE NOT FOUND/, $ses_core->execCmd("pos ICONF ICONF Y Y N Y Y")){
		$logger->error(__PACKAGE__ . " $tcid: The tuple ICONF ICONF Y Y N Y Y doesn't exist in the table iservopt");
		print FH "Need to add the tuple 'ICONF ICONF Y Y N Y Y'\n";
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("add ICONF ICONF Y Y N Y Y \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
					print FH "STEP: Add the tuple 'ICONF ICONF Y Y N Y Y' - PASSED\n)";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICONF ICONF Y Y N Y Y' can't add");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Add the tuple 'ICONF ICONF Y Y N Y Y' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
			
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("add ICONF ICONF Y Y N Y Y \$")){
			if (grep /TUPLE ADDED/, $ses_core->execCmd("Y")){
				print FH "STEP: Add the tuple 'ICONF ICONF Y Y N Y Y' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICONF ICONF Y Y N Y Y' can't add");
					print FH "STEP: Add the tuple 'ICONF ICONF Y Y N Y Y' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
		
	} else {
		if (grep /Y TO CONTINUE/, $ses_core->execCmd("rep ICONF ICONF Y Y N Y Y \$")){
			if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")){
				if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
					print FH "STEP: Replaced the tuple 'ICONF ICONF Y Y N Y Y' - PASSED\n";
				} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICONF ICONF Y Y N Y Y' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICONF ICONF Y Y N Y Y' - FAILED\n";
					$result = 0;
					goto CLEANUP;
				}
			}
		} elsif (grep /Y TO CONFIRM/, $ses_core->execCmd("rep ICONF ICONF Y Y N Y Y \$")){
			if (grep /TUPLE REPLACED/, $ses_core->execCmd("Y")){
				print FH "STEP: Replaced the tuple 'ICONF ICONF Y Y N Y Y' - PASSED\n";
			} else {
					$logger->error(__PACKAGE__ . " $tcid: The tuple 'ICONF ICONF Y Y N Y Y' can't replace");
					unless ($ses_core->execCmd("abort")) {
						$logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
					}
					print FH "STEP: Replaced the tuple 'ICONF ICONF Y Y N Y Y' - FAILED\n";
					$result = 0;
					goto CLEANUP;
			}
		}
	}
	
	# Verify RCODE RCODE (RCODE1 DISC_ACT RCODE2 XFER RCODE3 CON_3WC RCODE6 CON_6WC)
	if (grep /NOT FOUND/, $ses_core->execCmd("pos RCODE RCODE")) {
        if (grep /ERROR/, $ses_core->execCmd("add RCODE RCODE  RCODE2 TOGGLE RCODE3 CON_3WC RCODE4 XFER RCODE6 CON_6WC \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep RCODE RCODE  RCODE2 TOGGLE RCODE3 CON_3WC RCODE4 XFER RCODE6 CON_6WC \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'AUDIO1 CPARK'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
	
	unless (grep /RCODE/, $ses_core->execCmd("pos RCODE RCODE")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos AUTO_GRP 0'");
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill tuple pos AUDIO1 CPARK in table AUDIO - PASS\n";
    }
	

################################## Cleanup ADQ1092_iservopt ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_iservopt ##################################");
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_030 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_030");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_030";
    my $tcid = "ADQ1092_030";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	

	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, @cat, $logutil_path, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }
	

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature CEFT, CDND  for line A 
	unless ($ses_core->callFeature(-featureName => "CEPT CDND ACTIVE", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CDND for line A-$list_dn[0]");
		print FH "STEP: Add CDND for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CDND for line A($list_dn[0]) - PASSED\n";
    }
	$add_feature_lineA = 0;
	
	# Add feature DTM for line B
	unless ($ses_core->callFeature(-featureName => "CEPT DTM", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DTM for line A-$list_dn[1]");
		print FH "STEP: Add DTM for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DTM for line B($list_dn[1]) - PASSED\n";
    }
	$add_feature_lineB = 0;
				
	 # Add feature CFU for line C 
     unless ($ses_core->callFeature(-featureName => "CEPT CFU N", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line A-$list_dn[2]");
		print FH "STEP: Add CFU for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFU for line C($list_dn[2]) - PASSED\n";
    }
	 
	 
	 $add_feature_lineC = 0;
	 
	 # Datafill in table CDANNS
    unless (grep/IBNXLA/, $ses_core->execCmd("table CDANNS")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos 00")) {
        
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
			
    } else {
        @output = $ses_core->execCmd("del 00");
        if (grep/\00/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }
	
	 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# B hears  dials tone
	%input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears dial tone - PASS\n";
    }
   	
	# B dials DN A
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $list_dn[0],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[0] successfully");
		print FH "STEP: B dials $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $list_dn[0] - PASS\n";
    }
		
	# B hears busy tone
     my %input = (
                -line_port => $list_line[1],
                -busy_tone_duration => 2000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                ); 
    unless($ses_glcas->detectBusyToneCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot detect busy tone line $list_line[1]");
		print FH "STEP: B hears busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears busy tone - PASS\n";
    }	
		
	# Check line A doesn't ringing tone

	 my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[0] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line A is not ringing ");
        print FH "STEP: Check line A doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line A doesn't ringing - PASS\n";		
    }
	
	# B on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASSED\n";
    }
	
	# Verify treatment on logutil
	sleep(7);
	if ($logutil_start) {
    unless ($ses_logutil->stopLogutil()) {
    $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
    }
    $logutil_start = 0;

    $logutil_path = $ses_logutil->{sessionLog2};
    @cat = `cat $logutil_path`;
    # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
    unless (grep /TREATMENT SET = BUSY .* CALLED NO .* $list_dn[0]/, @cat) {
        $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
        print FH "STEP: Check busy treatment in logutil - FAIL\n";
        $result = 0;
		goto CLEANUP;       
    } else {
        print FH "STEP: Check busy treatment in logutil - PASS\n";
    }

    $ses_logutil->{conn}->cmd("start");
    unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
       $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
       } else {
       $logutil_start = 1;
    }
    }
	
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# A hears  dials tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
   	
	# A dials DN B
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
		print FH "STEP: A dials $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $list_dn[1] - PASS\n";
    }
			
	# Check line B doesn't ringing tone
 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[1] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line B is not ringing ");
        print FH "STEP: Check line B doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line B doesn't ringing - PASS\n";		
    }
	
	# A on-hooks
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	
	
	
	# Activate CFU of line C
    unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
	 unless ($ses_core->execCmd("changecfx $list_len[2] CFU $list_dn[1] A \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot change CFU for line $list_dn[2]");
		 print FH "STEP:  Ativate CFU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP:  Activate CFU for line $list_dn[2] - PASS\n";
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
	# Verify CFU was added successfully
	
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[2]");
        print FH "STEP: Verify activate CFU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify activate CFU for line $list_dn[2] - PASS\n";
    }
	
	# Remove feature DTM for line B 
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DTM', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DTM from line $list_dn[0]");
            print FH "STEP: Remove DTM from line B $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DTM from line B $list_dn[0] - PASS\n";
        }
    }
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# A hears  dials tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	
	# A dials DN C
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
		print FH "STEP: A dials C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials C $list_dn[2] - PASS\n";
    }
	
	# B ring

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	
	# Offhook line B
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line B $list_line[1]");
        print FH "STEP: offhook line B $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line B $list_line[1] - PASS\n";
    }
	
	# check speech path between A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B ");
        print FH "STEP: check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: check speech path between A and B - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
		
		$logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));    .* CALLED NO .* $list_dn[1]
        unless (grep /TREATMENT SET = DNTR .* CALLED NO .* $list_dn[1]/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
            print FH "STEP: Check busy treatment in logutil - FAIL\n";
            $result = 0;          
       } else {
            print FH "STEP: Check busy treatment in logutil - PASS\n";
       }
       }
		
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# remove CDND from line A
    unless ($add_feature_lineA) {
        foreach ('CDND','CEPT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line A $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line A $list_dn[0] - PASS\n";
            }
        }
    }
	
	# remove DTM from line B
     unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DTM CEPT', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CEPT from line $list_dn[0]");
            print FH "STEP: Remove CEPT from line B $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CEPT from line B $list_dn[0] - PASS\n";
        }
    }
	
	
	# remove DTM from line C
    unless ($add_feature_lineC) {
        foreach ('CFU', 'CEPT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[2]");
                print FH "STEP: Remove $_ from line C $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line C $list_dn[2] - PASS\n";
            }
        }
    }
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_031 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_031");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_031";
	my $tcid = "ADQ1092_031";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn},$db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add DNH group: B is pilot, C is member; 

    unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[1], -addMem => 'Yes', -listMemDN => [$list_dn[2]])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[1] and $list_dn[2]");
		print FH "STEP: Create group DNH with line $list_dn[1] is pilot and $list_dn[2] is member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Create group DNH with line $list_dn[1] is pilot and $list_dn[2] is member - PASSED\n";
    }

    unless(grep /PILOT OF DNH HUNT GROUP/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot create DNH group for line $list_dn[1] and $list_dn[2] ");
        print FH "STEP: Query DNH group with line $list_dn[1] is pilot - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Query DNH group with line $list_dn[1] is pilot - PASS\n";
    }
    
# Add CFU to line B
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFU Y", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line B-$list_dn[1]");
		print FH "STEP: Add CFU for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFU for line B($list_dn[1]) - PASSED\n";
    }
# Active CFU to forward to D
	unless ($ses_core->execCmd ("changecfx $list_len[1] CFU $list_dn[3] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFU for line $list_dn[1]");
		print FH "STEP: Active CFU for line B($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFU for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# A calls B, D answers
%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and D answers - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_031 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_031 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove DNH on line C
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line C($list_dn[2])");
            print FH "STEP: Remove DNH from line C ($list_dn[2]) - FAILED\n";
        } else {
            print FH "STEP: Remove DNH from line C ($list_dn[2]) - PASSED\n";
        }
    # Remove DNH on line B
        unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line B($list_dn[1])");
            print FH "STEP: Remove DNH from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove DNH from line B ($list_dn[1]) - PASSED\n";
        }
	# Remove CFU on line B
        unless ($ses_core->callFeature(-featureName => 'CEPT CFU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFU from line B($list_dn[1])");
            print FH "STEP: Remove CFU from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFU from line B ($list_dn[1]) - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_032 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_032");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_032";
    my $tcid = "ADQ1092_032";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	

	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
		
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature CEPT for line A
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line A-$list_dn[0]");
		print FH "STEP: Add I3WC for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line A $list_dn[0]  - PASSED\n";
    }
	 
	 $add_feature_lineA = 0;
				
	 # Add feature CEPT for line B
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CEPT for line B-$list_dn[1]");
		print FH "STEP: Add CEPT for line B $list_dn[1] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CEPT for line B $list_dn[1] - PASSED\n";
    }
	 
	 $add_feature_lineB = 0;
	 
	  # Add feature CEPT for line C
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CEPT for line B-$list_dn[2]");
		print FH "STEP: Add CEPT for line C $list_dn[2] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CEPT for line C $list_dn[2] - PASSED\n";
    }
	 
	 $add_feature_lineC = 0;
		 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# A calls B, check speech path

	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls B and they have no speech path ");
        print FH "STEP: A calls B and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and they have speech path - PASS\n";
    }
	
	
	# A dials C, C rings
	
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path - PASS\n";
    }
	
	# A dials number "3"
	
	my $dial_num = "3";
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $dial_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
		print FH "STEP: A dials number 3  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials number 3  - PASS\n";
    }
	
	# Verify speech path between A,B and C
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and C");
        print FH "STEP: Check speech path between A,B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and C - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove I3WC from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line $list_dn[0]");
            print FH "STEP: Remove I3WC from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove I3WC from line $list_dn[0] - PASS\n";
        }
    } 
	
	# Remove CEPT from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CEPT', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CEPT from line $list_dn[1]");
            print FH "STEP: Remove CEPT from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CEPT from line $list_dn[1] - PASS\n";
        }
    } 
	
	# Remove CEPT from line C
	 unless ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'CEPT', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CEPT from line $list_dn[2]");
            print FH "STEP: Remove CEPT from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove CEPT from line $list_dn[2] - PASS\n";
        }
    } 
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_033 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_033");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_033";
    my $tcid = "ADQ1092_033";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	

	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
		
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature DRING for line A
	 
	 unless ($ses_core->callFeature(-featureName => "DRING Y 5 Y 2 ALL 2 N N N Y 4 N Y 5", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRING for line A-$list_dn[0]");
		print FH "STEP: Add DRING for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DRING for line A $list_dn[0]  - PASSED\n";
    }
	 
	 $add_feature_lineA = 0;
				
	 # Add feature I3WC for line B
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line B-$list_dn[1]");
		print FH "STEP: Add I3WC for line B $list_dn[1] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line B $list_dn[1] - PASSED\n";
    }
	 
	 $add_feature_lineB = 0;
	 
		 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# B calls C, check speech path

	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C and they have no speech path ");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }
	
	# B flash, B dials A 
	
	
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [2000,2000,2000],
                -ring_off => [6000,6000,6000],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls A and they have no speech path ");
        print FH "STEP: B calls A and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls A and they have speech path - PASS\n";
    }
	
	# B dials number "3"
	
	my $dial_num = "3";
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $dial_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dial_num successfully");
		print FH "STEP: B dials number 3  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials number 3  - PASS\n";
    }
	
	# Verify speech path between A,B and C
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and C");
        print FH "STEP: Check speech path between A,B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and C - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak		
		if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove I3WC from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DRING', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DRING from line $list_dn[0]");
            print FH "STEP: Remove DRING from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DRING from line $list_dn[0] - PASS\n";
        }
    } 
	
	# Remove I3WC from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC ', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line $list_dn[1]");
            print FH "STEP: Remove I3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove I3WC from line $list_dn[1] - PASS\n";
        }
    } 
	
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_034 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_034");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_034";
	my $tcid = "ADQ1092_034";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add ICWT to line C
	
	unless ($ses_core->callFeature(-featureName => "CEPT ICWT Y", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICWT for line C-$list_dn[2]");
		print FH "STEP: Add ICWT for line C($list_dn[2]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICWT for line C($list_dn[2]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace', 'pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls C, C answers
	
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: A calls C and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C and C answers - PASSED\n";
    }
 
# B calls C, B hears ringback tone
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C and B hears ringback tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C and B hears ringback tone - PASSED\n";
    }
# # C hears waiting tone
	# %input = (
                # -line_port => $list_line[2],
                # -callwaiting_tone_duration => 300,
                # -cas_timeout => 20000,
                # -wait_for_event_time => $wait_for_event_time
                # );
    # unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        # $logger->error(__PACKAGE__ . " $tcid: Failed at C hears Call waiting tone");
        # print FH "STEP: C hears Call waiting tone - FAILED\n";
        # $result = 0;
        # #goto CLEANUP;
    # } else {
        # print FH "STEP:  C hears Call waiting tone - PASSED\n";
    # }
# C flashs
	%input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[2]");
		print FH "STEP: C flashs  - FAILED\n";
        $result = 0;
      goto CLEANUP;
    } else {
        print FH "STEP: C flashs  - PASSED\n";
    }

# C dials 2
	%input = (
                -line_port => $list_line[2],
				-dialed_number => 2,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": C cannot dial digit 2");
		print FH "STEP: C dials 2 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials 2 - PASSED\n";
	}
	sleep (1);
# Check speech path between B and C
	%input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between B and C");
        print FH "STEP: Verify speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between B and C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_034 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_034 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove ICWT on line C
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'ICWT', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICWT from line C($list_dn[2])");
            print FH "STEP: Remove ICWT from line C ($list_dn[2]) - FAILED\n";
        } else {
            print FH "STEP: Remove ICWT from line C ($list_dn[2]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_035 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_035");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_035";
	my $tcid = "ADQ1092_035";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add ICWT to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT ICWT Y", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICWT for line A-$list_dn[0]");
		print FH "STEP: Add ICWT for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICWT for line A($list_dn[0]) - PASSED\n";
    }

# Add ICT to line B
    unless ($ses_core->callFeature(-featureName => "CEPT ICT", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICT for line $list_dn[1]");
		print FH "STEP: Add ICT for line B ($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICT for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# B calls C, C answers, then B flashs
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call C");
        print FH "STEP: B calls C and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C and C answers - PASSED\n";
    }
 
# B calls A, A answers, then B flashs again
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call D");
        print FH "STEP: A calls D and D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls D and D answers - PASSED\n";
    }

# B dials 4
	%input = (
                -line_port => $list_line[1],
				-dialed_number => 4,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial 4 successfully");
		print FH "STEP: B dials 4 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials 4 - PASSED\n";
	}

# Check speech path between A and C
	%input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and C");
        print FH "STEP: Verify speech path between A and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and C - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_035 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_035 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove ICWT on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'ICWT', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICWT from line A($list_dn[0])");
            print FH "STEP: Remove ICWT from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove ICWT from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove ICT on line B
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'ICT', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICT from line B($list_dn[1])");
            print FH "STEP: Remove ICT from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove ICT from line B ($list_dn[1]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}
sub ADQ1092_036 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_036");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_036";
	my $tcid = "ADQ1092_036";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add I3WC to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line A-$list_dn[0]");
		print FH "STEP: Add I3WC for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Off-hook C to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
	sleep (1);
# Check C is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
# A calls B, B answers, then A flashs
	
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and B answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and B answers - PASSED\n";
    }
 
# A calls C, A hears busy tone, then A flashs again
	
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call C");
        print FH "STEP: A calls C and A hears busy tone - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C and A hears busy tone - PASSED\n";
    }

# A dials 3
	%input = (
                -line_port => $list_line[0],
				-dialed_number => 3,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": A cannot dial digit 3");
		print FH "STEP: A dials digit 3 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: A dials digit 3 - PASSED\n";
	}

# Check speech path between A and B
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A and B");
        print FH "STEP: Verify speech path between A and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A and B - PASSED\n";
    }

# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_036 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_036 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove I3WC on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line A($list_dn[0])");
            print FH "STEP: Remove I3WC from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove I3WC from line A ($list_dn[0]) - PASSED\n";
        }
    }

	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_037 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_037");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_037";
	my $tcid = "ADQ1092_037";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add 3WC to line A
	
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line A-$list_dn[0]");
		print FH "STEP: Add 3WC for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line A($list_dn[0]) - PASSED\n";
    }

# Add ICT to line B
    unless ($ses_core->callFeature(-featureName => "CEPT ICT", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICT for line $list_dn[1]");
		print FH "STEP: Add ICT for line B ($list_dn[1]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICT for line B($list_dn[1]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace', 'pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# A calls B, B answers, A flashs 
	
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A can't call B");
        print FH "STEP: A calls B and B answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls B and B answers - PASSED\n";
    }

# A calls C, C answers, A flashs
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call B");
        print FH "STEP: A calls C and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: A calls C and C answers - PASSED\n";
    }
# Check speech path between A,B and C
	%input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,B and C");
        print FH "STEP: Verify speech path between A,B and C- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A,B and C - PASSED\n";
    }
# B flashs to calls D
	%input = (
                -line_port => $list_line[1], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_line[1]");
    }
# B calls D, D answers, B flashs
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D and D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D and D answers - PASSED\n";
    }
# B dials digit 4 to transfer
	%input = (
                -line_port => $list_line[1],
				-dialed_number => 4,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": B cannot dial digit 4");
		print FH "STEP: B dials digit 4 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: B dials digit 4 - PASSED\n";
	}
# Check speech path between A,C and D
	%input = (
                -list_port => [$list_line[0],$list_line[2], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between A,C and D");
        print FH "STEP: Verify speech path between A,C and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between A,C and D - PASSED\n";
    }
# Onhook A, B, C and D
    
	for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}

################################## Cleanup ADQ1092_037 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_037 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 0;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		if ($exist2) {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			$result = 0;
        } else {
            print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove 3WC on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line A($list_dn[0])");
            print FH "STEP: Remove 3WC from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove 3WC from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove ICT on line B
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT ICT', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICWT from line B($list_dn[1])");
            print FH "STEP: Remove ICT from line B ($list_dn[1]) - FAILED\n";
        } else {
            print FH "STEP: Remove ICT from line B ($list_dn[1]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_038 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_038");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_038";
	my $tcid = "ADQ1092_038";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFB to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFB P", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFB for line A-$list_dn[0]");
		print FH "STEP: Add CFB for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFB for line A($list_dn[0]) - PASSED\n";
    }
# Active CFB to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[0] CFB $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFB for line $list_dn[0]");
		print FH "STEP: Active CFB for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFB for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Off-hook A to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	sleep (1);
# Check A is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[0] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[0] is not CPB status");
        print FH "STEP: Check A is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check A is CPB status - PASSED\n";
	}
# B calls A, C answers
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: B calls A and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls A and C answers - PASSED\n";
    }
 
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_038 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_038 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CFB on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFB', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line A($list_dn[0])");
            print FH "STEP: Remove CFB from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFB from line A ($list_dn[0]) - PASSED\n";
        }
    }

	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_039 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_039");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_039";
	my $tcid = "ADQ1092_039";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFB to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFB P", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFB for line A-$list_dn[0]");
		print FH "STEP: Add CFB for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFB for line A($list_dn[0]) - PASSED\n";
    }
# Active CFB to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[0] CFB $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFB for line $list_dn[0]");
		print FH "STEP: Active CFB for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFB for line A($list_dn[0]) - PASSED\n";
    }
# Add ICT to line D
	
	unless ($ses_core->callFeature(-featureName => "CEPT ICT", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICT for line D-$list_dn[3]");
		print FH "STEP: Add ICT for line D($list_dn[3]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICT for line D($list_dn[3]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# Off-hook A to make it busy
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	sleep (1);
# Check A is CPB
	unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[0] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[0] is not CPB status");
        print FH "STEP: Check A is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check A is CPB status - PASSED\n";
	}
# B calls D, D answers, D flashs
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D and D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D and D answers - PASSED\n";
    }
	sleep (1);
# D calls A, C answers, D flashs
	
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call A");
        print FH "STEP: D calls A and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls A and C answers - PASSED\n";
    }
# D dials 4
	%input = (
                -line_port => $list_line[3],
				-dialed_number => 4,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": D cannot dial digit 4");
		print FH "STEP: D dials digit 4 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials digit 4 - PASSED\n";
	}
# D on-hooks to transfer to B
	unless($ses_glcas->onhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[3]");
        print FH "STEP: Onhook line D to transfer - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line D to transfer - PASSED\n";
    }
	sleep (1);
# Verify speech path between B and C
	%input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between C and B");
        print FH "STEP: Verify speech path between C and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between C and B - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_039 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_039 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CFB on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFB', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line A($list_dn[0])");
            print FH "STEP: Remove CFB from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFB from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove ICT on line D
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT ICT', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICT from line D($list_dn[3])");
            print FH "STEP: Remove ICT from line D ($list_dn[3]) - FAILED\n";
        } else {
            print FH "STEP: Remove ICT from line D ($list_dn[3]) - PASSED\n";
        }
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_040 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_040");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_040";
	my $tcid = "ADQ1092_040";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFD to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFD P", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line A-$list_dn[0]");
		print FH "STEP: Add CFD for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFD for line A($list_dn[0]) - PASSED\n";
    }
# Active CFD to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[0] CFD $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFD for line $list_dn[0]");
		print FH "STEP: Active CFD for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFD for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# B calls A, A does't answers, 
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['none'],
                -send_receive => ['none','none'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: B calls A and A doesn't answer - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls A and A doesn't answer - PASSED\n";
    }
	#sleep (12);

# Detect C rings after timeout of CFD
	
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    
	for (my $i = 0; $i <= 10; $i++){
		unless ($ses_glcas->detectRingingSignalCAS(%input)) {
			print FH "Waiting for line C ringing \n";
			sleep (2);
		} else {
			print FH "STEP: Check line C ringing - PASSED\n";
			last;
		}
	}
# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
# Verify speech path between B and C
	%input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between C and B");
        print FH "STEP: Verify speech path between C and B - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between C and B - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_040 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CFD on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFD', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line A($list_dn[0])");
            print FH "STEP: Remove CFD from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFD from line A ($list_dn[0]) - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_041 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_041");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_041";
	my $tcid = "ADQ1092_041";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFU to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFU Y", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line A-$list_dn[0]");
		print FH "STEP: Add CFU for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFU for line A($list_dn[0]) - PASSED\n";
    }
# Active CFU to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[0] CFU $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFU for line $list_dn[0]");
		print FH "STEP: Active CFU for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFU for line A($list_dn[0]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}

# B calls A, C answers, 
	
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: B calls A and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls A and C answers - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_040 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CFU on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFU', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line A($list_dn[0])");
            print FH "STEP: Remove CFU from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFU from line A ($list_dn[0]) - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_042 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_042");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_042";
	my $tcid = "ADQ1092_042";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn},$db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $feature_added = 0;
    my (@list_file_name, $dialed_num, %info);
	#my $trunk_access_code = $db_trunk{'pri_1'}{-acc};
	# my $trunk_access_code_1 = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    #Initialize CORE session
	unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
	#Initialize GLCAS session
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
	# Initialize LOGUTIL session
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	# Initialize Tapitrace session
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }
	# Login CORE
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
################## Add feature or datafill table ###########################
# Add CFU to line A
	
	unless ($ses_core->callFeature(-featureName => "CEPT CFU Y", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line A-$list_dn[0]");
		print FH "STEP: Add CFU for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFU for line A($list_dn[0]) - PASSED\n";
    }
# Active CFU to forward to C
	unless ($ses_core->execCmd ("changecfx $list_len[0] CFU $list_dn[2] A")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot active CFU for line $list_dn[0]");
		print FH "STEP: Active CFU for line A($list_dn[0]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Active CFU for line A($list_dn[0]) - PASSED\n";
    }
#	Add I3WC to line D
	unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line D-$list_dn[3]");
		print FH "STEP: Add I3WC for line D($list_dn[3]) - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line D($list_dn[3]) - PASSED\n";
    }
	$feature_added = 1;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace','pgmtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1], $list_dn[2], $list_dn[3]],
				);
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";
			$calltrak_start = 1;
		}
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: Cannot start record PCM");
		}
		$pcm_start = 1;
	}
# B calls D, D answers and D flashs
%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call D");
        print FH "STEP: B calls D and D answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls D and D answers - PASSED\n";
    }
# D calls A, C answers, D flash again
	
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS 123_456'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: D can't call A");
        print FH "STEP: D calls A and C answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: D calls A and C answers - PASSED\n";
    }
# D dials 3
	%input = (
                -line_port => $list_line[3],
				-dialed_number => 3,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": D cannot dial digit 3");
		print FH "STEP: D dials 3 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: D dials 3 - PASSED\n";
	}
# Check speech path between C, B and D
	%input = (
                -list_port => [$list_line[1],$list_line[2], $list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to verify speech path between C, D and B");
        print FH "STEP: Verify speech path between C, B and D - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify speech path between  C, B and D - PASSED\n";
    }
# Onhook all line
    for (my $j = 0; $j <= $#list_line; $j++){
        unless($ses_glcas->onhookCAS(-line_port => $list_line[$j], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[$j]");
			print FH "STEP: Onhook line $list_dn[$j] - FAILED\n";
			$result = 0;
            last;
        } else {
            print FH "STEP: Onhook line $list_dn[$j] - PASSED\n";
        }
	}
################################## Cleanup ADQ1092_040 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092_040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/PCM_hnphuc/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
    # Stop Logutil
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core");
            $result = 0;
            print FH "STEP: Check Trap - FAILED\n";
        } else {
            print FH "STEP: Check Trap - PASSED\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        unless (grep /Log empty/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAILED\n";
        } else {
            print FH "STEP: Check SWERR - PASSED\n";
        }
    }
	# Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start){
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}){
                    $exist2 = 1;
                }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
		# if ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
			# $result = 0;
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # }
    }
# Stop calltrak
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	###################Remove features added######################
	# Remove CFU on line A
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFU', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFB from line A($list_dn[0])");
            print FH "STEP: Remove CFU from line A ($list_dn[0]) - FAILED\n";
        } else {
            print FH "STEP: Remove CFU from line A ($list_dn[0]) - PASSED\n";
        }
    }
	# Remove I3WC on line D
	if ($feature_added) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line D($list_dn[3])");
            print FH "STEP: Remove I3WC from line D ($list_dn[3]) - FAILED\n";
        } else {
            print FH "STEP: Remove I3WC from line D ($list_dn[3]) - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}
sub ADQ1092_043 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_043");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_043";
    my $tcid = "ADQ1092_043";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, @cat, $logutil_path, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }
	

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature CEFT, CFU  for line A 
	unless ($ses_core->callFeature(-featureName => "CEPT CFU N", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line A-$list_dn[0]");
		print FH "STEP: Add CFU for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFU for line A $list_dn[0] - PASSED\n";
    }
	$add_feature_lineA = 0;
	
				
	 # Add feature ICWT for line C 
     unless ($ses_core->callFeature(-featureName => "CEPT ICWT Y", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ICWT for line A-$list_dn[2]");
		print FH "STEP: Add ICWT for line C $list_dn[2] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add ICWT for line C $list_dn[2] - PASSED\n";
    }
	 
	 
	 $add_feature_lineC = 0;
	 	
	 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# Offhook line A
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line A $list_line[0]");
        print FH "STEP: offhook line A $list_line[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line A $list_line[0] - PASS\n";
    }
	
	# Activate CFU of line A
    unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
	 unless ($ses_core->execCmd("changecfx $list_len[0] CFU $list_dn[2] A \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot change CFU for line $list_dn[2]");
		 print FH "STEP:  Ativate CFU for line C $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP:  Activate CFU for lineC  $list_dn[2] - PASS\n";
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
	# Verify CFU was added successfully
	
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[2]");
        print FH "STEP: Verify activate CFU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Verify activate CFU for line $list_dn[2] - PASS\n";
    }
	
	# Onhook line A 
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	# B calls C, check speech path

	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C and they have no speech path ");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }
	
	# Offhook line D
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line D $list_line[3]");
        print FH "STEP: offhook line D $list_line[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line D $list_line[3] - PASS\n";
    }
	
	# D hears  dials tone
	%input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect dial tone line $list_dn[3]");
        print FH "STEP: D hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears dial tone - PASS\n";
    }
   	
	# D dials DN A via ISUP trunk
	
	my ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	%input = (
                -line_port => $list_line[3],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: D dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials $dialed_num - PASS\n";
    }
		
	
	# C hears CWT tones
	
	%input = (
                -line_port => $list_line[2],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls C and C hears Call waiting tone");
        print FH "STEP: D calls C and C hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls C and C hears Call waiting tone - PASS\n";
    }
	
	# C flash 
	sleep(1);
	 %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line C $list_line[2]");
		print FH "STEP: C flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C flash - PASS\n";
		
    }
	
	# C dials 2
	%input = (
                -line_port => $list_line[2],
				-dialed_number => 2,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": C cannot dial digit 2");
		print FH "STEP: C dials 2 - FAILED\n";
		$result = 0;
        goto CLEANUP;
    } else {
		print FH "STEP: C dials 2 - PASSED\n";
	}
	
	# check speech path between C and D
    %input = (
                -list_port => [$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and D ");
        print FH "STEP: check speech path between C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: check speech path between C and D - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
		
       }
		
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# remove CFU from line A
   unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFU', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFU from line $list_dn[0]");
            print FH "STEP: Remove CFU from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CFU from line $list_dn[0] - PASS\n";
        }
    } 
	
	
	# remove ICWT from line C
   unless ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'CEPT ICWT ', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ICWT from line $list_dn[2]");
            print FH "STEP: Remove ICWT from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove ICWT from line $list_dn[2] - PASS\n";
        }
    } 
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_044 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_044");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_044";
    my $tcid = "ADQ1092_044";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});
	
    
	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineD = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, @cat, $logutil_path, $ID, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }
	

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
	
	
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature CEFT, CFD  for line A 
	unless ($ses_core->callFeature(-featureName => "CEPT CFD N $list_dn[2]", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line A-$list_dn[0]");
		print FH "STEP: Add CFD for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add CFD for line A $list_dn[0] - PASSED\n";
    }
	
	unless(grep /CFD/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add CFD for line $list_dn[0] ");
        print FH "STEP: add CFD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[0] - PASS\n";
    }
	$add_feature_lineA = 0;
	
				
	 # Add feature I3WC for line D
     unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[3], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line D $list_dn[3]");
		print FH "STEP: Add I3WC for line D $list_dn[3] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line D $list_dn[3] - PASSED\n";
    }
	 
	 
	 $add_feature_lineD = 0;
	 	
	 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

   # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			#goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# B calls D, check speech path

	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls D and they have no speech path ");
        print FH "STEP: B calls D and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls D and they have speech path - PASS\n";
    }
   	
	# D dials DN A via ISUP trunk
	
	
	%input = (
                -line_port => $list_line[3],
                -dialed_number => $list_dn[0],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[0] successfully");
		print FH "STEP: D dials $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials $list_dn[0] - PASS\n";
    }
		
	# Check line A rings

    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }	
		
	sleep(12);
	# Check line C rings

    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	
	# Offhook line C
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line C $list_line[2]");
        print FH "STEP: offhook line C $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook line C $list_line[2] - PASS\n";
    }
	
	# check speech path between C and D
    %input = (
                -list_port => [$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and D ");
        print FH "STEP: check speech path between C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: check speech path between C and D - PASS\n";
    }
	
	
	# D flash 
	sleep(1);
	 %input = (
                -line_port => $list_line[3], 
                -flash_duration => 600, 
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line D $list_line[3]");
		print FH "STEP: D flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D flash - PASS\n";
		
    }
	
	# D dials number "3"
	
	my $dial_num = "3";
	%input = (
                -line_port => $list_line[3],
                -dialed_number => $dial_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] successfully");
		print FH "STEP: D dials number 3  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials number 3  - PASS\n";
    }
	
	# check speech path between B,C and D
    %input = (
                -list_port => [$list_line[2],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 2000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between B,C and D ");
        print FH "STEP: check speech path between B,C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: check speech path between B,C and D - PASS\n";
    }
	
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
		
       }
		
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak
   if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# remove CFD from line A
   unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CEPT CFD', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[0]");
            print FH "STEP: Remove CFD from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[0] - PASS\n";
        }
    } 
	
	
	# remove I3WC from line D
   unless ($add_feature_lineD) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC ', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line $list_dn[3]");
            print FH "STEP: Remove I3WC from line $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: Remove I3WC from line $list_dn[3] - PASS\n";
        }
    } 
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_045 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_045");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_045";
	my $tcid = "ADQ1092_045";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	# my $add_feature_lineA = 1;
	# my $add_feature_lineB = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[0], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[0]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code - PASS\n";
    }
	
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
	$lea_num = $trunk_access_code . $lea_num;
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord  ");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI  ");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line B and LEA to line C
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[1] +");
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SURV to line B  ");
        print FH "STEP: Add SURV to line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SURV to line B - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A dials DISA number via ISUP trunk
    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
    }
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: A dials DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DISA number - PASS\n";
    }
	unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }
	sleep(3);

    # A dials authen code
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
		print FH "STEP: A dials authen code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials authen code - PASS\n";
    }
	sleep(1);
		# A hears recall dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect recall dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
        print FH "STEP: A dials B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials B - PASS\n";
    }
	sleep(1);
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
				
	
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1])) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	# Check LEA C ring
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line LEA C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line LEA C ringing - PASS\n";
    }
	
	# LEA C answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook LEA $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook LEA $list_line[2] - PASS\n";
    }
	# LEA C can monitor the call between A and B
	%input = (
                -list_port => [$list_line[0],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B");
        print FH "STEP: LEA can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and B - PASS\n";
    }
	

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_046 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_046");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_046";
	my $tcid = "ADQ1092_046";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	# my $add_feature_lineB = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'tw_isup'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
	# Initialize LI session
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
	# Just in case "liadmin" account is in use
    $ses_core->execCmd("forceout $li_user");
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[0], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[0]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code - PASS\n";
    }
	# Add CXR to line A
	unless ($ses_core->callFeature(-featureName => "cxr ctall n std", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
    
    $add_feature_lineA = 0;
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	my ($lea_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
	$lea_num = $trunk_access_code . $lea_num;
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord  ");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI  ");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line B and LEA to line C
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[1] +");
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SURV to line B  ");
        print FH "STEP: Add SURV to line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SURV to line B - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line C  ");
        print FH "STEP: Add LEA number to line C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line C - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A calls D, D rings and answers
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE','DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls D ");
        print FH "STEP: A calls D and answer - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls D and answer - PASS\n";
	}
	# A dials DISA number via ISUP trunk
    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: A dials DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DISA number - PASS\n";
    }
	unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }
	sleep(3);

    # A dials authen code
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
		print FH "STEP: A dials authen code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials authen code - PASS\n";
    }
	sleep(1);
		# A hears recall dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect recall dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	# A calls B
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[1] successfully");
        print FH "STEP: A dials B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials B - PASS\n";
    }
	sleep(1);
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
				
	
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1])) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
	%input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
	# Check LEA C ring
	%input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line LEA C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line LEA C ringing - PASS\n";
    }
	
	# LEA C answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
        print FH "STEP: offhook LEA $list_line[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook LEA $list_line[2] - PASS\n";
    }
	# LEA C can monitor the call between A and B
	%input = (
                -list_port => [$list_line[0],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and B");
        print FH "STEP: LEA can monitor the call between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and B - PASS\n";
    }
	# Onhook A
	  
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	sleep (5);
	%input = (
                -list_port => [$list_line[3],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between D and B");
        print FH "STEP: Check speech path between D and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and B - PASS\n";
    }
	# LEA C can monitor the call between D and B
	%input = (
                -list_port => [$list_line[3],$list_line[1]],
                -cas_timeout => 20000,
                -lea_port => $list_line[2],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between D and B");
        print FH "STEP: LEA can monitor the call between D and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between D and B - PASS\n";
    }
	
	

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 0;
    # my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	# remove CXR from line A
    unless ($add_feature_lineA) {
        foreach ('CXR') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
	}	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_047 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_047");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_047";
	my $tcid = "ADQ1092_047";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	# my $add_feature_lineB = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
	my $trunk_access_codepri = $db_trunk{'g6_pri'}{-acc};
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
		unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_core_li = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLogLI")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }
	
    unless ($ses_core_li->loginCore(%core_account_li)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M LI - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[0], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[0]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code - PASS\n";
    }
	# Add CFD to line A
	unless ($ses_core->callFeature(-featureName => "CFD P", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[0]");
		print FH "STEP: add CFD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[0] - PASS\n";
    }
    my $cfd_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CFDP');
    unless ($cfd_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CFD access code for line $list_dn[0]");
		print FH "STEP: get CFD access code for line $list_dn[0] is $cfd_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CFD access code for line $list_dn[0] is $cfd_acc- PASS\n";
    }
	
    $add_feature_lineA = 0;
	# Add SURV and LEA to line ACT
	# Login to DNBDORDER
	my ($lea_num) = ($list_dn[1] =~ /\d{3}(\d+)/);
	$lea_num = $trunk_access_code . $lea_num;
	
	unless(grep /\?/, $ses_core_li->execCmd("dnbdord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot access to dnbdord  ");
        print FH "STEP: Access to dnbdord - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Access to dnbdord - PASS\n";
    }
	 
	unless(grep /DNBDORDER/, $ses_core_li->execCmd("$pass_li")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter password to LI  ");
        print FH "STEP: Enter password to LI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Enter password to LI - PASS\n";
    }
	
	# Add SURV to line A and LEA to line B
	$ses_core_li->execCmd("add TMA2M YES FTPV4 047 135 041 070 021 ibn $list_dn[0] +");
	unless(grep /Please confirm/, $ses_core_li->execCmd("10 151515 yes $lea_num yes PXAUTO px 515151 NONE no speech no YES yes 1")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add SURV to line A  ");
        print FH "STEP: Add SURV to line A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SURV to line A - PASS\n";
    }
	unless(grep /Done/, @output = $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add LEA number to line B  ");
        print FH "STEP: Add LEA number to line B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add LEA number to line B - PASS\n";
    }
	
	foreach (@output) {
        if (/Monitor Order ID:\s+(\d+)/ ) {
			$ID = $1;
        print FH "Monitor Order ID is: $ID\n";
        }
	}
	
	#act SURV to line 
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv act $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot act SURV ");
        print FH "STEP: Act SURV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Act SURV - PASS\n";
    }


############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# Activate CFD from line A to line D
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
    }
     $dialed_num = '*' . $cfd_acc . $list_dn[3] . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: Send digit to active CFD - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Send digit to active CFD - PASS\n";
    }
    
    unless (grep /CFD.*\sA\s/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFD for line $list_dn[0]");
        print FH "STEP: activate CFD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFD for line $list_dn[0] - PASS\n";
    }
	# Onhook line A
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	my $deact_cfd_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[0], -lastColumn => 'CFDC');
    unless ($deact_cfd_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get deactive CFD access code for line $list_dn[0]");
		print FH "STEP: get deactive CFD access code for line $list_dn[0] is $deact_cfd_acc - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get deactive CFD access code for line $list_dn[0] is $deact_cfd_acc- PASS\n";
    }
	# Deactivate CFD for line A
	
   	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
    $dialed_num = '*' . $deact_cfd_acc;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
		print FH "STEP: Send digit to deactive CFD - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Send digit to deactive CFD - PASS\n";
    }
    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }
    unless (grep /CFD.*\sI\s/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot deactivate CFU for line $list_dn[0]");
        print FH "STEP: deactivate CFD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: deactivate CFD for line $list_dn[0] - PASS\n";
    }
	# Onhook line A
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
    }
	
	
	
	# A dials DISA number via ISUP trunk
    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_codepri . $dialed_num;
	sleep(1);
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: A dials DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DISA number - PASS\n";
    }
	sleep(1);
	unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }
	sleep(3);

    # A dials authen code
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
		print FH "STEP: A dials authen code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials authen code - PASS\n";
    }
	sleep(1);
		# A hears recall dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect recall dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	
	# A calls C via ISUP
	($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_codepri . $dialed_num;
	%input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 10','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: A calls C and they have no speech path ");
        print FH "STEP: A calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and they have speech path - PASS\n";
    }
	# Check LEA B ring
	%input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line B does not ring");
        print FH "STEP: Check line LEA B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line LEA B ringing - PASS\n";
    }
	
	# LEA B answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
        print FH "STEP: offhook LEA $list_line[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: offhook LEA $list_line[1] - PASS\n";
    }
	
	# LEA B can monitor the call between A and C
	%input = (
                -list_port => [$list_line[2],$list_line[0]],
                -cas_timeout => 20000,
                -lea_port => $list_line[1],
                ); 
    unless ($ses_glcas->detectSpeechPathOneWayLI(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at LEA monitor the call between A and C");
        print FH "STEP: LEA can monitor the call between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: LEA can monitor the call between A and C - PASS\n";
    }
	
	
	

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 0;
    # my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	# remove CFD from line A
    unless ($add_feature_lineA) {
        foreach ('CFD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
	}	
	# Deact LEA
	unless(grep /Do You want to ACT/, $ses_core_li->execCmd("surv deact $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Deact SURV ");
        print FH "STEP: Deact SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Deact SURV - PASS\n";
    }
	
	# Del LEA
	unless(grep /Delete MON ORDER ID/, $ses_core_li->execCmd("del $ID")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	
	unless(grep /Done/, $ses_core_li->execCmd("y")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot Delete SURV ");
        print FH "STEP: Delete SURV - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Delete SURV - PASS\n";
    }
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_048 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_048");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_048";
	my $tcid = "ADQ1092_048";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

     my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	# my $add_feature_lineB = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
		unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	 unless ($ses_core->execCmd("ado \$ $list_dn[2] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[2]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$add_feature_lineA = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A calls D. D rings and doesn't answer
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[3],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[3] successfully");
        print FH "STEP: A dials D - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials D - PASS\n";
    }
	sleep(1);
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
				
	
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line D does not ring");
        print FH "STEP: Check line D ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line D ringing - PASS\n";
    }
	# B off-hook
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }

	# C off-hook
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[2]");
        print FH "STEP: Offhook line C - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C - PASSED\n";
    }
	
	# D off-hook
	unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[3]");
        print FH "STEP: Offhook line D - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line D - PASSED\n";
    }
	# Verify speech path between A, B , C and D
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2], $list_line[3]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B C D");
        print FH "STEP: Check speech path between A, B C D - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, B C D - PASSED\n";
	}

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($add_feature_lineA) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[2] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line C $list_dn[2] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line C $list_dn[2] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[2] $list_line_info[2] $list_len[2] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[2]");
            print FH "STEP: NEW line $list_dn[2] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[2] - PASSED\n";
        }
    }
		
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_049 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_049");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_049";
	my $tcid = "ADQ1092_049";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

     my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $add_feature_lineA = 1;
	my $add_feature_lineC = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$add_feature_lineA = 0;
	# Add 3WC for line C
	unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[2]");
		print FH "STEP: Add 3WC for line $list_dn[2] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add 3WC for line $list_dn[2] - PASSED\n";
    }
	$add_feature_lineC = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# C calls A. A rings
	
	
	   %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: C calls A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls A - PASSED\n";
    }
	
	%input = (
                -lineA => $list_line[2],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[3],
                -regionA => $list_region[2],
                -regionB => $list_region[3],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: C can't call D");
        print FH "STEP: C calls D - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls D - PASSED\n";
    }
	# Verify speech path between A, D and C
	%input = (
				-list_port => [$list_line[0], $list_line[3], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, D & C");
        print FH "STEP: Check speech path between A, D & C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, D & C - PASSED\n";
	}
	# B off-hooks to join CONF
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	# Verify speech path between A, D and C B
	%input = (
				-list_port => [$list_line[0], $list_line[3], $list_line[2], $list_line[1]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, D & C B");
        print FH "STEP: Check speech path between A, D & C B - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, D & C B - PASSED\n";
	}

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($add_feature_lineA) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	unless ($add_feature_lineC) {
        foreach ('3WC') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[2]");
                print FH "STEP: remove $_ for line $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[2] - PASS\n";
            }
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_050 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_050");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_050";
	my $tcid = "ADQ1092_050";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

   my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $feature_added = 1;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$feature_added = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# C calls A. A rings
	
	
	   %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B can't call A");
        print FH "STEP: C calls A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: C calls A - PASSED\n";
    }
	
	# B off-hooks to join CONF
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	# Verify speech path between A B C
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B and C");
        print FH "STEP: Check speech path between A B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A B and C - PASSED\n";
	}
	#A onhook
	unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line A - PASSED\n";
    }
	# Verify speech path between B C
	%input = (
				-list_port => [$list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between B and C - PASSED\n";
	}

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($feature_added) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}
sub ADQ1092_051 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_051");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_051";
	my $tcid = "ADQ1092_051";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

     my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
    my $flag = 1;
	my $dnh_added = 1;
	my $add_feature_lineA = 1;
	# my $cndb_code = 67;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$add_feature_lineA = 0;
	 # Add DNH group: C is pilot, D is member; 

    unless ($ses_core->addLineGroupDNH(-pilotDN => $list_dn[2], -addMem => 'Yes', -listMemDN => [$list_dn[3]])) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DNH for line $list_dn[2] and $list_dn[3]");
		print FH "STEP: create group DNH for line $list_dn[2] and $list_dn[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group DNH for line $list_dn[2] and $list_dn[3] - PASS\n";
    }
    

    unless(grep /DNH/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add DNH for line $list_dn[2] and $list_dn[3] ");
        print FH "STEP: add DNH for line $list_dn[2] and $list_dn[3] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DNH for line $list_dn[2] and $list_dn[3] - PASS\n";
    }
    $dnh_added = 0;
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	
	
	# C off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
# Check status of line C is CPB
		
   unless (grep /\sCPB\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[2] print"))
	{
		$logger->error(__PACKAGE__ . ".$tcid: Line $list_dn[2] is not CPB status");
        print FH "STEP: Check C is CPB status - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
		print FH "STEP: Check C is CPB status - PASSED\n";
	}
	#  B calls C, D rings and answers
	
	
	   %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[3],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C, D rings and answers");
        print FH "STEP: B calls C, D rings and answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C, D rings and answers - PASSED\n";
    }
	# A off-hooks
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
	# Verify speech path between A, D and B
	%input = (
				-list_port => [$list_line[0], $list_line[3], $list_line[1]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, D & B");
        print FH "STEP: Check speech path between A, D & B - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, D & B - PASSED\n";
	}
	# Onhook line B
	unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
	sleep(3);
	# Verify speech path between A, D
	%input = (
				-list_port => [$list_line[0], $list_line[3]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, D");
        print FH "STEP: Check speech path between A, D - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, D - PASSED\n";
	}

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($add_feature_lineA) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	# remove DNH group
    unless ($dnh_added) {
	     unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[3], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[3]");
            print FH "STEP: Remove DNH from line $list_dn[3] - FAIL\n";
        } else {
            print FH "STEP: Remove DNH from line $list_dn[3] - PASS\n";
        }
        unless ($ses_core->callFeature(-featureName => 'DNH', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DNH from line $list_dn[2]");
            print FH "STEP: Remove DNH from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DNH from line $list_dn[2] - PASS\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_052 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_052");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_052";
	my $tcid = "ADQ1092_052";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

   my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	
    my $initialize_done = 0;
    my $logutil_start = 1;
	my $calltrak_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $feature_added = 1;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	my $trunk_access_code = $db_trunk{'sst'}{-acc};
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..5]], -password => [@{$core_account{-password}}[2..5]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Get DISA number and authencation code
    my $disa_num = $ses_core->getDISAnMONAnumber(-lineDN => $list_dn[0], -featureName => 'DISA');
    unless ($disa_num) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get DISA number");
		print FH "STEP: get DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get DISA number - PASS\n";
    }
    my $authen_code = $ses_core->getAuthenCode($list_dn[0]);
    unless ($authen_code) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get authencation code");
		print FH "STEP: get authencation code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get authencation code - PASS\n";
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$feature_added = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# A off-hook
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	
	# A dials DISA number via SIP trunk
    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
	$ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);
	
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $disa_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $disa_num successfully");
		print FH "STEP: A dials DISA number - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DISA number - PASS\n";
    }
	unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }
	sleep(3);

    # A dials authen code
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $authen_code,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $authen_code successfully");
		print FH "STEP: A dials authen code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials authen code - PASS\n";
    }
	sleep(1);
		# A hears recall dial tone
	%input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect recall dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }
	
	
	# A calls C
	%input = (
                -line_port => $list_line[0],
                -dialed_number => $list_dn[2],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $list_dn[2] successfully");
        print FH "STEP: A dials C - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: A dials C- PASS\n";
    }
	sleep(1);
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
				-ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
				
	
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$tcid: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$tcid: Line C does not ring");
        print FH "STEP: Check line C ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing - PASS\n";
    }
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2])) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
	%input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }
	
	# B off-hooks to join CONF
	unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[1]");
        print FH "STEP: Offhook line B - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line B - PASSED\n";
    }
	# Verify speech path between A B C
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B and C");
        print FH "STEP: Check speech path between A B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A B and C - PASSED\n";
	}

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
    
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($feature_added) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_053 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_053");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_053";
	my $tcid = "ADQ1092_053";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

   my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $feature_added = 1;
    my $flag = 1;
	my $gwc_id = 3;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info, $ID);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_cli = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CLISessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab with CLI mode - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab with CLI mode - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add MADN to line A and B with Pilot A
	 unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot be in 'servord' mode");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 6 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[0]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[0] as primary - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[0] as primary - PASSED\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] BLDN \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot add MADN for line $list_dn[1]");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' ");
    }
	
    unless(grep /PRIMARY\: N/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'qdn $list_dn[0]' ");
        print FH "STEP: Add MDN to line $list_dn[1] as member - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add MDN to line $list_dn[1] as member - PASSED\n";
    }
	$feature_added = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	# B calls C , C rings and answers
	
	
	   %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C , C rings and answers");
        print FH "STEP: B calls C , C rings and answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C , C rings and answers - PASSED\n";
    }
	
	# A off-hooks to join CONF
	unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . "$tcid: Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Offhook line A - PASSED\n";
    }
	# Verify speech path between A B C
	%input = (
				-list_port => [$list_line[1], $list_line[2], $list_line[0]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B and C");
        print FH "STEP: Check speech path between A B and C - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A B and C - PASSED\n";
	}
	# Execute warm swact GWC during 3WC
	
	unless ($ses_cli -> warmSwactGWC(-gwc_id => -$gwc_id, -timeout => 120)){
		$logger->error(__PACKAGE__ . ": Could not warm swact GWC");
		print FH "STEP: Execute WARM Swact GWC - FAILED\n";
		$result = 0;	  
		goto CLEANUP;
	} else {
		print FH "Execute WARM Swact GWC - PASSED\n";
	}
	
# Verify speech path between A, B, C again after WARM SWACT GWC
	%input = (
				-list_port => [$list_line[0], $list_line[1], $list_line[2]], 
				-checking_type => ['TESTTONE'], 
				-tone_duration => 2000, 
				-cas_timeout => 50000
			);
	unless ($ses_glcas->checkSpeechPathCAS(%input)) {
		$logger->error(__PACKAGE__ . ".$sub_name: Could not detect speech path between A, B & C after WARM SWACT GWC");
        print FH "STEP: Check speech path between A, B & C after WARM SWACT GWC - FAILED\n";
        $result = 0;
        goto CLEANUP;
	} else {
        print FH "STEP: Check speech path between A, B & C after WARM SWACT GWC - PASSED\n";
	}
################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	unless ($feature_added) {
         if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[0] from MADN group");
            print FH "STEP: Remove line B $list_dn[1] from MADN group - FAILED\n";
        } else {
            print FH "STEP: Remove line B $list_dn[1] from MADN group - PASSED\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort' after DEO fail");
            }
            print FH "STEP: Remove MADN from line $list_dn[0] - FAILED\n";
        } else {
            print FH "STEP: Remove MADN from line $list_dn[0] - PASSED\n";
        }
		if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot enter command 'abort'");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1]");
            print FH "STEP: NEW line $list_dn[1] - FAILED\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASSED\n";
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}


sub ADQ1092_061 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_061");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_061";
	my $tcid = "ADQ1092_061";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

   my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
    my $initialize_done = 0;
    my $logutil_start = 1;
	my $calltrak_start = 0;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $add_feature_lineA = 1;
	my $add_feature_lineC = 1;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add SCA to line A with B in list
	unless ($ses_core->callFeature(-featureName => "sca noama act $list_dn[1] 3 \$ n", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCA for line $list_dn[0]");
		print FH "STEP: Add SCA for line $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SCA for line $list_dn[0] - PASSED\n";
    }
	$add_feature_lineA = 0;
	# Add CFU to line C
	
	unless ($ses_core->callFeature(-featureName => 'CFU N', -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line $list_dn[2]");
		print FH "STEP: add CFU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFU for line $list_dn[2] - PASS\n";
    }

    my $cfu_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[2], -lastColumn => 'CFWP');
    unless ($cfu_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CFU access code for line $list_dn[2]");
		print FH "STEP: get CFU access code for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CFU access code for line $list_dn[2] - PASS\n";
    }
	
    $add_feature_lineC = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
 # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	
	
	# Activate CFU for C to line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
    }
    $dialed_num = '*' . $cfu_acc . $list_dn[0] . '#';
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
    }
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
    }
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[2]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[2]");
        print FH "STEP: activate CFU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFU for line $list_dn[2] - PASS\n";
    }
	# B calls C. A rings and answers
	
	
	   %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C. A rings and answers");
        print FH "STEP: B calls C. A rings and answers - FAILED\n";
        $result = 0;
		goto CLEANUP;
    } else {
		print FH "STEP: B calls C. A rings and answers - PASSED\n";
    }

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	 unless ($add_feature_lineA) {
        foreach ('SCA') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	unless ($add_feature_lineC) {
        foreach ('CFU') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[2]");
                print FH "STEP: remove $_ for line $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[2] - PASS\n";
            }
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_062 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_062");

########################### Variables Declaration #############################
    my $sub_name = "ADQ1092_062";
	my $tcid = "ADQ1092_062";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

   my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
    my $initialize_done = 0;
    my $logutil_start = 1;
	my $pcm_start = 0;
	my $tapi_start = 0;
	my $calltrak_start = 0;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
    my $flag = 1;
	my (@cat,$logutil_path);
    my (@list_file_name, $dialed_num,  %info);
	
    
# Which logs need to get
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0; 

################################# LOGIN #######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m Lab - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m Lab - PASSED\n";
    }
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASSED\n";
    }
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for Logutil - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for Logutil - PASSED\n";
    }
		unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CalltrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak- PASSED\n";
    }
	
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
		$result = 0;
		goto CLEANUP;
	} else {
		print FH "STEP: Login TMA2m core - PASSED\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
    unless ($ses_core->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core - PASSED\n";
    }
	
############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] Cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASSED\n";
        }
		sleep (1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
	# Add SCA to line A with B in list
	unless ($ses_core->callFeature(-featureName => "sca noama act $list_dn[1] 3 \$ n", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCA for line $list_dn[0]");
		print FH "STEP: Add SCA for line $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add SCA for line $list_dn[0] - PASSED\n";
    }
	$add_feature_lineA = 0;
	# Add CFU to line B
	
	unless ($ses_core->callFeature(-featureName => 'CFU N', -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line $list_dn[1]");
		print FH "STEP: add CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFU for line $list_dn[1] - PASS\n";
    }

    my $cfu_acc = $ses_core->getAccessCode(-table => 'IBNXLA', -dialNumber => $list_dn[1], -lastColumn => 'CFWP');
    unless ($cfu_acc) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot get CFU access code for line $list_dn[1]");
		print FH "STEP: get CFU access code for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: get CFU access code for line $list_dn[1] - PASS\n";
    }
	
    $add_feature_lineB = 0;
	
############################################################################
# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASSED\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: Set region for line $list_line[$i] - FAILED\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Set region for line $list_line[$i] - PASSED\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
# Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
###################### Call flow ###########################
#Start PCM trace
    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	
	
	# Activate CFU for B to line A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[1]");
    }
    $dialed_num = '*' . $cfu_acc . $list_dn[0] . '#';
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
    }
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[2]");
    }
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[1]");
        print FH "STEP: activate CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFU for line $list_dn[1] - PASS\n";
    }
	# C calls B
	
	unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[2]");
    }
	%input = (
                -line_port => $list_line[2],
                -dialed_number => $list_dn[1],
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": C dials B $list_dn[1]");
		print FH "STEP: C dials B $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials B $list_dn[1] - PASS\n";
    }
	# Check line A doesn't ring
	my $index; 
    for ($index = 0; $index < 10; $index++) {
        if (grep /\sIDL\s/, $ses_core->execCmd("mapci nodisp; mtc; lns; ltp; post d $list_dn[0] print")) {
            last;
        }
        sleep(5);
    }
    unless ($index < 10) {
	$logger->error(__PACKAGE__ . " $tcid: line A is not ringing ");
        print FH "STEP: Check line A doesn't ringing - FAIL\n";
		$result = 0;
        goto CLEANUP;
        
    } else {
        print FH "STEP: Check line A doesn't ringing - PASS\n";
		
		
    }

################################## Cleanup ADQ1092 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ADQ1092 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: Cleanup GLCAS - FAILED\n";
        } else {
            print FH "STEP: Cleanup GLCAS - PASSED\n";
        }
    }
	# Get PCM trace
    if ($pcm_start){
		%input = (
				-remoteip => $cas_server[0],
				-remoteuser => $sftp_user,
				-remotepasswd => $sftp_pass,
				-localDir => '/home/ntthuyhuong/Hoang_PCM/',
				-remoteFilePath => [@list_file_name]
				);
		if (@list_file_name) {
			unless(&SonusQA::Utils::sftpFromRemote(%input)) {
				$logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
				print FH "STEP: Get PCM trace - FAILED\n";
			} else {
				print FH "STEP: Get PCM trace - PASSED\n";
			}
		}
	}
	# Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
    if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	# Stop tapi
    my $exist1 = 1;
    my $exist2 = 1;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 0;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        unless ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        # unless ($exist2) {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - PASSED\n";
        # } else {
            # print FH "STEP: Check the message srvtn\/rdt on tapi log - FAILED\n";
            # $result = 0;
        # }
    }
	################### Remove features added ######################
	 unless ($add_feature_lineA) {
        foreach ('SCA') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[0]");
                print FH "STEP: remove $_ for line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[0] - PASS\n";
            }
        }
    }
	unless ($add_feature_lineB) {
        foreach ('CFU') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Cannot remove $_ for line $list_dn[1]");
                print FH "STEP: remove $_ for line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: remove $_ for line $list_dn[1] - PASS\n";
            }
        }
    }
	
	################################################################
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}



sub ADQ1092_064 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_064");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_064";
    my $tcid = "ADQ1092_064";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	

	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
		
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature DRING for line A
	 
	 unless ($ses_core->callFeature(-featureName => "DRING Y 4 Y 2 ALL 2 N N N Y 4 N Y 5", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRING for line A-$list_dn[0]");
		print FH "STEP: Add DRING for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DRING for line A $list_dn[0]  - PASSED\n";
    }
	 
	 $add_feature_lineA = 0;
				
	 # Add feature I3WC for line B
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line B-$list_dn[1]");
		print FH "STEP: Add I3WC for line B $list_dn[1] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line B $list_dn[1] - PASSED\n";
    }
	 
	 $add_feature_lineB = 0;
	 
		 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# B calls C, check speech path

	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C and they have no speech path ");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }
	
	# B flash, B dials A 
	
	
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [2000,2000,2000],
                -ring_off => [5000,5000,5000],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls A and they have no speech path ");
        print FH "STEP: B calls A and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls A and they have speech path - PASS\n";
    }
	
	# B dials number "3"
	
	my $dial_num = "3";
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $dial_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dial_num successfully");
		print FH "STEP: B dials number 3  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials number 3  - PASS\n";
    }
	
	# Verify speech path between A,B and C
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and C");
        print FH "STEP: Check speech path between A,B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and C - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak		
		if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove I3WC from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DRING', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DRING from line $list_dn[0]");
            print FH "STEP: Remove DRING from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DRING from line $list_dn[0] - PASS\n";
        }
    } 
	
	# Remove I3WC from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC ', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line $list_dn[1]");
            print FH "STEP: Remove I3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove I3WC from line $list_dn[1] - PASS\n";
        }
    } 
	
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

sub ADQ1092_065 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ1092_065");
    
############ Variables Declaration ####################################################
    my $sub_name = "ADQ1092_065";
    my $tcid = "ADQ1092_065";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ1092");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});
	

	
    my $wait_for_event_time = 30;
	my $add_feature_lineA = 1;
	my $add_feature_lineB = 1;
	my $add_feature_lineC = 1;
    my $initialize_done = 1;
    my $logutil_start = 1;
	my $calltrak_start = 0;
    my $flag = 1;	
	my $pcm_start = 0;
	my $tapi_start = 0;
	my (@list_file_name, @callTrakLogs, %info);
    
	
	# Which logs need to get
	
	 $log_type[0] = 1;
	 $log_type[1] = 1;
	 $log_type[2] = 0;
	 $log_type[3] = 0;
	
   
################## LOGIN ##############

    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M - PASS\n";
    }

    unless ($ses_core->loginCore(%core_account)) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2M core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M core - PASS\n";
    }

    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2M for Logutil- FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2M for Logutil- PASS\n";
    }

    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => 1, - output_record_separator => "\n")){
		$logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
		print FH "STEP: Login Server 53 - FAIL\n";
        $result = 0;
		goto CLEANUP;
    } else {
        print FH "STEP: Login Server 53 - PASS\n";
    }
	unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiTraceSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for tapi trace- FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for tapi trace- PASSED\n";
    }
		
	# Initialize Calltrak session
	unless ($ses_calltrak = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CallTrakSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA2m for calltrak - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m for calltrak - PASSED\n";
    }
	unless ($ses_calltrak->loginCore(-username => [@{$core_account{-username}}[2..20]], -password => [@{$core_account{-password}}[2..20]])) {
		$logger->error(__PACKAGE__ . " $tcid: Unable to access TMA2m Core");
		print FH "STEP: Login TMA2m core to run calltrak function - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA2m core to run calltrak function - PASSED\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        sleep(1);
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    
	# Add feature DRING for line A
	 
	 unless ($ses_core->callFeature(-featureName => "DRING Y 3 Y 2 ALL 2 N N N Y 4 N Y 5", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRING for line A-$list_dn[0]");
		print FH "STEP: Add DRING for line A $list_dn[0] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add DRING for line A $list_dn[0]  - PASSED\n";
    }
	 
	 $add_feature_lineA = 0;
				
	 # Add feature I3WC for line B
	 
	 unless ($ses_core->callFeature(-featureName => "CEPT I3WC", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add I3WC for line B-$list_dn[1]");
		print FH "STEP: Add I3WC for line B $list_dn[1] - FAILED\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Add I3WC for line B $list_dn[1] - PASSED\n";
    }
	 
	 $add_feature_lineB = 0;
	 
		 
# Initialize call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 0;

    # Start logutil
    if ($log_type[0]){
	   %input = (
					-username => [@{$core_account{-username}}[6..20]], 
					-password => [@{$core_account{-password}}[6..20]], 
					-logutilType => ['SWERR', 'TRAP', 'AMAB'],
				 );
		unless ($ses_logutil->startLogutil(%input)) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
			print FH "STEP: Start logutil - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start logutil - PASSED\n";
		}
		$logutil_start = 0;
	}

    # Start tapi trace
    if ($log_type[2]){
		%input = (
					-username => [@{$core_account{-username}}[10..14]],
					-password => [@{$core_account{-password}}[10..14]],
					-testbed => $TESTBED{"c20:1:ce0"},
					-gwc_user => $gwc_user,
					-gwc_pwd => $gwc_pwd,
					-list_dn => [$list_dn[0], $list_dn[1], $list_dn[2]],
					-list_trk_clli => [],
				);
		%info = $ses_tapi->startTapiTerm(%input);
		unless(%info) {
			$logger->error(__PACKAGE__ . " $tcid: Cannot start tapitrace");
			print FH "STEP: Start tapitrace - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start tapitrace - PASSED\n";
		}
		$tapi_start = 1;
	}
	
	# Start Calltrak
	if ($log_type[3]){
		%input = (
					-traceType => ['msgtrace'],
					-trunkName => [],
					-dialedNumber => [$list_dn[0], $list_dn[1]],
				);
		
		unless ($ses_calltrak->SonusQA::SST::startCalltrak(%input)){
			$logger->error(__PACKAGE__ . " $tcid: Cannot start calltrak");
			print FH "STEP: Start calltrak - FAILED\n";
			$result = 0;
			goto CLEANUP;
		} else {
			print FH "STEP: Start calltrak - PASSED\n";			
		}
		$calltrak_start = 1;
	}
	
###################### Call flow ###########################
  	
    # start PCM trace

    if ($log_type[1]){
		@list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
		unless(@list_file_name) {
			$logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
		}
		$pcm_start = 1;
	}
	
	# B calls C, check speech path

	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls C and they have no speech path ");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }
	
	# B flash, B dials A 
	
	
	%input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['RINGBACK','RINGING'],
                -ring_on => [2000,2000,2000],
                -ring_off => [4000,4000,4000],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: B calls A and they have no speech path ");
        print FH "STEP: B calls A and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls A and they have speech path - PASS\n";
    }
	
	# B dials number "3"
	
	my $dial_num = "3";
	%input = (
                -line_port => $list_line[1],
                -dialed_number => $dial_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dial_num successfully");
		print FH "STEP: B dials number 3  - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials number 3  - PASS\n";
    }
	
	# Verify speech path between A,B and C
	 %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A,B and C");
        print FH "STEP: Check speech path between A,B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A,B and C - PASS\n";
    }
	
################################## Cleanup ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup ##################################");

    # Cleanup call
    unless ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }
	
	# Get PCM trace
    if ($pcm_start){
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ntthuyhuong/PCM_hnphuc',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }
	}
	
    # Stop Logutil
    sleep(5);
    unless ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open trap")) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        unless (grep /Log empty/, $ses_logutil->execCmd("open swerr")) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        if (grep /Log empty/, $ses_logutil->execCmd("open amab")) {
            $logger->error(__PACKAGE__ . " $tcid: AMAB is not generated on core after the call");
        }
    }
	
	
    
	 # Stop tapi
    my $exist1 = 0;
    my $exist2 = 0;
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: Stop tapitrace - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop tapitrace - PASSED\n";
        }
        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                if (grep /cg\/dt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    $exist1 = 1;
                }
                # if (grep /srvtn\/rdt/, @{$tapiterm_out{$gwc_id}{$tn}}) {
                    # $exist2 = 0;
                # }
            }
        }
        if ($exist1) {
            print FH "STEP: Check the message cg\/dt on tapi log - PASSED\n";
        } else {
            print FH "STEP: Check the message cg\/dt on tapi log - FAILED\n";
            $result = 0;
        }
        
    }
    
	# Stop CallTrak		
		if ($calltrak_start){
		my @calltrak_out = $ses_calltrak->SonusQA::SST::stopCalltrak();
		unless (grep /Tracing: Stopped/, @calltrak_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop calltrak");
            print FH "STEP: Stop calltrak - FAILED\n";
            $result = 0;
        } else {
            print FH "STEP: Stop calltrak - PASSED\n";
        }
	}
	
	# Remove I3WC from line A
	 unless ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DRING', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DRING from line $list_dn[0]");
            print FH "STEP: Remove DRING from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DRING from line $list_dn[0] - PASS\n";
        }
    } 
	
	# Remove I3WC from line B
	 unless ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CEPT I3WC ', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove I3WC from line $list_dn[1]");
            print FH "STEP: Remove I3WC from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove I3WC from line $list_dn[1] - PASS\n";
        }
    } 
	
	
	
    close(FH);
    &ADQ1092_cleanup();
    &ADQ1092_checkResult($tcid, $result);
}

##################################################################################
sub AUTOLOAD {
  
    our $AUTOLOAD;
  
    my $warn = "$AUTOLOAD  ATTEMPT TO CALL $AUTOLOAD FAILED (INVALID TEST)";
  
    if( Log::Log4perl::initialized() ) {
        
        my $logger = Log::Log4perl->get_logger($AUTOLOAD);
        $logger->warn( $warn );
    }
    else {
        Log::Log4perl->easy_init($DEBUG);
        WARN($warn);
    }
}

1;