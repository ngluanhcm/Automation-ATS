 #**************************************************************************************************#
#FEATURE                : <ADQ767> 
#FEATURE ENGINEER       : <FEATURE ENGINEER NAME>
#AUTOMATION ENGINEER    : <Tai Nguyen Huu>
#**************************************************************************************************#

our %TESTBED;
our $TESTSUITE;

package QATEST::C20_EO::ADQ767::ADQ767; 

use strict;
use Tie::File;
use File::Copy;
use Cwd qw(cwd);
use Data::Dumper;
use threads;
#********************************* LIST OF LIBRARIES***********************************************#

use ATS;
use SonusQA::Utils qw (:all);

#**************************************************************************************************#

use Log::Log4perl qw(get_logger :levels);
my $logger = Log::Log4perl->get_logger(__PACKAGE__);

##################################################################################
#  GLCAS::TEMPLATE                                                              #
##################################################################################
#  This package tests for the GL.                                                #
##################################################################################

##################################################################################
# SETUP                                                                          #
##################################################################################


# Required Testbed elements for this package

my %REQUIRED = ( 
        "C20" => [1],
        "GLCAS" => [1],
               );

################################################################################
# VARIABLES USED IN THE SUITE Defined HERE                                     #
################################################################################
our $dir = cwd;
our $user_name;
if ($dir =~ /home\/(\w\w*)\/ats_repos/ ) {
    $user_name = $1;
}

our ($sec,$min,$hour,$mday,$mon,$year,$wday, $yday,$isdst) = localtime(time);
our $datestamp = sprintf "%4d%02d%02d-%02d%02d%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;
our ($ses_core, $ses_glcas, $ses_logutil, $ses_tapi);
our (%input, @output, $tcid);
our %core_account = ( 
                    -username => [
                                    'testshell1','testshell2','testshell3','testshell4','testshell5',
                                    'testshell6','testshell7','testshell8','testshell9','testshell10',
                                    'testshell11','testshell12','testshell13','testshell14','testshell15',
                                    'testshell16','testshell17','testshell18','testshell19','testshell20',],
                    -password => [
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation',
                                    'automation','automation','automation','automation','automation'],
                    );
# For GLCAS
our @cas_server = ('10.250.185.92', '10024');
our $sftp_user = 'gbautomation';
our $sftp_pass = '12345678x@X';
# for Tapi
our $audio_gwc = 22;
our $audio_gwc_ip = '10.102.182.68';
our $tapilog_dir = '/home/ptthuy/Tapitrace/';

our $detect = 'RINGBACK'; # Change into 'RINGBACK' if ringback is ok to check

my $alias_hashref = SonusQA::Utils::resolve_alias($TESTBED{ "c20:1:ce0"});
our ($gwc_user) = $alias_hashref->{LOGIN}->{1}->{USERID};
our ($gwc_pwd) = $alias_hashref->{LOGIN}->{1}->{PASSWD};

# Line Info
our %db_line = (
                'gr303_1' => {
                            -line => 1,
                            -dn => 2124411039,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 39',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'gr303_2' => {
                            -line => 2,
                            -dn => 2124411040,
                            -region => 'US',
                            -len => 'AZTK   01 2 00 40',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'abi_1' => {
                            -line => 3,
                            -dn => 2124410502,
                            -region => 'US',
                            -len => 'HOST   21 0 00 02',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'abi_2' => {
                            -line => 4,
                            -dn => 2124410503,
                            -region => 'US',
                            -len => 'HOST   21 0 00 03',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'lcm_1' => {
                            -line => 5,
                            -dn => 2124411266,
                            -region => 'US',
                            -len => 'T005   00 0 01 12',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'lcm_2' => {
                            -line => 6,
                            -dn => 2124411267,
                            -region => 'US',
                            -len => 'T005   00 0 01 13',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'rlcm_1' => {
                            -line => 7,
                            -dn => 2124411205,
                            -region => 'US',
                            -len => 'T000   00 0 00 05',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                'rlcm_2' => {
                            -line => 8,
                            -dn => 2124411203,
                            -region => 'US',
                            -len => 'T000   00 0 00 03',
                            -info => 'IBN NY_PUB 0 0 NILLATA 0',
                            },
                );

our %tc_line = (
                'ADQ767_001' => ['lcm_1','abi_1','gr303_1','gr303_2'],
                'ADQ767_002' => ['lcm_1','gr303_1','gr303_2'],
                'ADQ767_003' => ['abi_1','lcm_1','gr303_1'],
                'ADQ767_004' => ['lcm_1','gr303_1'],
                'ADQ767_005' => ['abi_1','lcm_2','lcm_1','abi_2'],
                'ADQ767_006' => ['abi_1','lcm_1','lcm_2'],
                'ADQ767_007' => ['gr303_1','lcm_1','lcm_2'],
                'ADQ767_008' => ['lcm_1','abi_1'],
                'ADQ767_009' => ['lcm_1','lcm_2','gr303_1','gr303_2'],
                'ADQ767_010' => ['lcm_1','lcm_2','gr303_1'],
                'ADQ767_011' => ['lcm_1','abi_1','lcm_2'],
                'ADQ767_012' => ['lcm_1','abi_1'],
                'ADQ767_013' => ['abi_1','abi_2','lcm_1'],
                'ADQ767_014' => ['lcm_1','lcm_2'],
                'ADQ767_015' => ['lcm_1','lcm_2'],
                'ADQ767_016' => ['lcm_1','gr303_1'],
                'ADQ767_017' => ['lcm_1','lcm_2'],
                'ADQ767_018' => ['lcm_1','gr303_2','lcm_2'],
                'ADQ767_019' => ['lcm_1','lcm_2','abi_1'],
                'ADQ767_020' => ['lcm_1','abi_1','abi_2'],
                'ADQ767_021' => ['lcm_1','abi_1','abi_2','gr303_1'],
                'ADQ767_022' => ['lcm_1','gr303_1','gr303_2','lcm_2'],
                'ADQ767_023' => ['lcm_1','gr303_1','gr303_2'],
                'ADQ767_024' => ['lcm_1','gr303_1','gr303_2','abi_1'],
                'ADQ767_025' => ['lcm_1','lcm_2','abi_1'],
                'ADQ767_026' => ['lcm_1','lcm_2','abi_1'],
                'ADQ767_027' => ['lcm_1','lcm_2','gr303_1'],
                'ADQ767_028' => ['lcm_1','gr303_1','abi_1'],
                'ADQ767_029' => ['lcm_1','gr303_1','abi_1','lcm_2'],
                'ADQ767_030' => ['lcm_1','abi_1'],
                'ADQ767_031' => ['lcm_1','abi_1','lcm_2'],
                'ADQ767_032' => ['rlcm_1','abi_1','gr303_1','gr303_2'],
                'ADQ767_033' => ['rlcm_1','gr303_1'],
                'ADQ767_034' => ['abi_1','rlcm_2','rlcm_1','abi_2'],
                'ADQ767_035' => ['abi_1','rlcm_1','rlcm_2'],
                'ADQ767_036' => ['gr303_1','rlcm_1','rlcm_2'],
                'ADQ767_037' => ['rlcm_1','abi_1'],
                'ADQ767_038' => ['rlcm_1','rlcm_2','gr303_1','gr303_2'],
                'ADQ767_039' => ['rlcm_1','rlcm_2','gr303_1'],
                'ADQ767_040' => ['rlcm_1','abi_1','rlcm_2'],
                'ADQ767_041' => ['rlcm_1','abi_1'],
                'ADQ767_042' => ['abi_1','abi_2','rlcm_1'],
                'ADQ767_043' => ['rlcm_1','rlcm_2'],
                'ADQ767_044' => ['rlcm_1','rlcm_2'],
                'ADQ767_045' => ['rlcm_1','gr303_1'],
                'ADQ767_046' => ['rlcm_1','rlcm_2'],
                'ADQ767_047' => ['rlcm_1','gr303_1','gr303_2'],
                'ADQ767_048' => ['rlcm_1','rlcm_2','abi_1'],
                'ADQ767_049' => ['rlcm_1','abi_1','abi_2'],
                'ADQ767_050' => ['rlcm_1','abi_1','abi_2','gr303_1'],
                'ADQ767_051' => ['rlcm_1','gr303_1','gr303_2','rlcm_2'],
                'ADQ767_052' => ['rlcm_1','rlcm_2','abi_1'],
                'ADQ767_053' => ['rlcm_1','rlcm_2','abi_1'],
                'ADQ767_054' => ['rlcm_1','rlcm_2','gr303_1'],
                'ADQ767_055' => ['rlcm_1','gr303_1','abi_1'],
                'ADQ767_056' => ['rlcm_1','gr303_1','abi_1','rlcm_2'],
                'ADQ767_057' => ['rlcm_1','abi_1'],
                'ADQ767_058' => ['abi_1','rlcm_2','gr303_1'],
                'ADQ767_059' => ['rlcm_1','rlcm_2','gr303_1'],
                'ADQ767_060' => ['rlcm_1','rlcm_2','gr303_2'],
                'ADQ767_061' => ['rlcm_1','rlcm_2','gr303_2','abi_1'],
                'ADQ767_062' => ['rlcm_1','rlcm_2','gr303_1'],
                'ADQ767_063' => ['abi_1','rlcm_2','gr303_1'],
                'ADQ767_064' => ['rlcm_1','rlcm_2','gr303_1'],
                'ADQ767_065' => ['rlcm_1','rlcm_2','gr303_2'],
                'ADQ767_066' => ['rlcm_1','rlcm_2','gr303_2','abi_1'],
                'ADQ767_067' => ['rlcm_1','rlcm_2','gr303_1'],
);

#################### Trunk info ###########################
our %db_trunk = (
                't15_g6_pri' =>{
                                -acc => 554,
                                -region => 'US',
                                -clli => 'T15G6OC3N4PRI2W',
                            },
                't15_sipt' =>{
                                -acc => 610,
                                -region => 'US',
                                -clli => 'T15SSTIBNT2LP',
                            },
                );

##################################################################################
sub configured {
    # Check configured resources match REQUIRED
    if ( SonusQA::ATSHELPER::checkRequiredConfiguration ( \%REQUIRED, \%TESTBED ) ) {
        $logger->info(__PACKAGE__ . ": Found required devices in TESTBED hash"); 
    } else {
        $logger->error(__PACKAGE__ . ": Could not find required devices in TESTBED hash"); 
        return 0;
    }  
}

sub ADQ767_cleanup {
    my $subname = "ADQ767_cleanup";
    $logger->debug(__PACKAGE__ ." . $subname . DESTROYING OBJECTS");
    my @end_ses = (
                    $ses_core, $ses_glcas, $ses_logutil, $ses_tapi, 
                    );
    foreach (@end_ses) {
        if (defined $_) {
            $_->DESTROY();
            undef $_;
        }
    }
    return 1;
}

sub ADQ767_checkResult {
    my ($tcid, $result) = (@_);
    my $subname = "ADQ767_checkResult";
    $logger->debug(__PACKAGE__ . ".$tcid: Test result : $result");
    if ($result) { 
        $logger->debug(__PACKAGE__ . "$tcid  Test case passed ");
            SonusQA::ATSHELPER::printPassTest($tcid);
            return 1;
    } else {
        $logger->debug(__PACKAGE__ . "$tcid  Test case failed ");
            SonusQA::ATSHELPER::printFailTest($tcid);
            return 0;
    }
}

sub ADQ767_datafill {
    my $tcid = "ADQ767_datafill";
    my $sub_name = "ADQ767_datafill";
    $logger->debug(__PACKAGE__ . " Datafill necessary info before running TCs");
    my $tuple;
################################## LOGIN ######################################
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreTMA15SessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        return 0;
    }
    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        return 0;
    }

# TMA15 Datafill table PXCODE, PXRTE for some trunk in DB
    my %list_trunk = %db_trunk;
    foreach (keys %list_trunk) {
        unless (/t15/) {
            delete($list_trunk{$_});
        }
        if (/t15_isup_atc/) {
            delete($list_trunk{$_});
        }
    }
    foreach my $cust_grp ('AUTO_GRP','NYPUB') {
        if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table STDPRTCT")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'table STDPRTCT'");
        }
        unless (grep /$cust_grp/, $ses_core->execCmd("pos $cust_grp")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'pos $cust_grp'");
        }
        unless ($ses_core->execCmd("sub STDPRT")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'sub STDPRT'");
        }
        foreach my $trk (keys %list_trunk) {
            $tuple = "$db_trunk{$trk}{-acc} $db_trunk{$trk}{-acc} S DD 3 $db_trunk{$trk}{-clli} 3 18 NONE";
            @output = $ses_core->execCmd("pos $db_trunk{$trk}{-acc}");
            if (grep /NOT FOUND/, @output) {
                if (grep /ERROR/, $ses_core->execCmd("add $tuple")) {
                    $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple in STDPRT");
                } else {
                    if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                        $ses_core->execCmd("Y");
                    }
                }
            } else {
                if (grep /ERROR/, $ses_core->execCmd("rep $tuple")) {
                    $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple in STDPRT");
                } else {
                    if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                        $ses_core->execCmd("Y");
                    }
                }
            }
            unless ($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
            }
        }
        unless ($ses_core->execCmd("quit all")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit all'");
        }
    }

# Check NY_PUB has FEATXLA is FEATXLA in table NCOS
    my ($cust_grp) = ($db_line{'lcm_1'}{-info} =~ /\w+\s(\w+\s\d+)\s/);
    unless (grep/NCOS/, $ses_core->execCmd("table NCOS")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table NCOS'");
    }
    unless (grep /FEATXLA/, $ses_core->execCmd("pos $cust_grp")) {
        @output = $ses_core->execCmd("rep $cust_grp 0 0 0 XLAS NYPUBXLA FEATXLA NDGT \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Check INTRASW is N in table LCMINV
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Set busy tone for BUSY case
    unless (grep/TMTCNTL/, $ses_core->execCmd("table TMTCNTL")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table TMTCNTL'");
    }
    unless (grep/LNT/, $ses_core->execCmd("pos LNT")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'pos LNT'");
    }
    unless ($ses_core->execCmd("sub")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'sub'");
    } 
    @output = $ses_core->execCmd("rep BUSY Y S BUSY");
    if (grep/DMOS NOT ALLOWED/, @output) {
        $ses_core->execCmd("y");
    }
    $ses_core->execCmd("y");
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }

    unless (grep/TONES/, $ses_core->execCmd("table TONES")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table TONES'");
    }
    @output = $ses_core->execCmd("rep BUSY 7 50 50 1010101010101010 LO SILENT_TONE 30 127 TONE_BSY N");
    if (grep/DMOS NOT ALLOWED/, @output) {
        $ses_core->execCmd("y");
    }
    $ses_core->execCmd("y");
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# CLEANUP
    &ADQ767_cleanup();
}

sub core {
    unless ($ses_core = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_CoreSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 - PASS\n";
    }
    return $ses_core;
}

sub glcas {
    unless($ses_glcas = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{ "glcas:1:ce0"}, -sessionlog => $tcid."_GLCASLog", - output_record_separator => "\n")){
        $logger->error(__PACKAGE__ . " $tcid: Could not create GLCAS object for tms_alias => TESTBED{ ‘glcas:1:ce0’ }");
        print FH "STEP: Login Server 53 for GLCAS - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login Server 53 for GLCAS - PASS\n";
    }
    return $ses_glcas;
}

sub logutil {
    sleep (2);
    unless ($ses_logutil = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_LogutilSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Logutil - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Logutil - PASS\n";
    }
    return $ses_logutil;
}

sub tapi {
    sleep (4);
    unless ($ses_tapi = SonusQA::ATSHELPER::newFromAlias(-tms_alias => $TESTBED{"c20:1:ce0"}, -sessionLog => $tcid."_TapiSessionLog")) {
        $logger->error(__PACKAGE__ . " $tcid: Could not create C20 object for tms_alias => $TESTBED{'c20:1:ce0'}" );
        print FH "STEP: Login TMA15 for Tapi trace - FAIL\n";
        return 0;
    } else {
        print FH "STEP: Login TMA15 for Tapi trace - PASS\n";
    }
    return $ses_tapi;
}

##################################################################################
# TESTS                                                                          #
##################################################################################

our @TESTCASES = (
                    "ADQ767_datafill",
                    "ADQ767_001", # LCM_BasicCallP - Verify 3WC inter-opts with CPU correctly
                    "ADQ767_002", # LCM_BasicCallP - Verify 3WC inter-opts with AUL correctly
                    "ADQ767_003", # LCM_BasicCallP - Verify CHD inter-opts with CWT corectly
                    "ADQ767_004", # LCM_BasicCallP - Verify CNAB inter-opts with ACRJ corectly
                    "ADQ767_005", # LCM_BasicCallP - Verify CWT Party is on hold and receives incoming call
                    "ADQ767_006", # LCM_BasicCallP - Verify DCBI inter-opts with DCBX correctly
                    "ADQ767_007", # LCM_BasicCallP - Verify DCPU inter-opts with DCPX corectly
                    "ADQ767_008", # LCM_BasicCallP - Verify DISA with call via SST trunk work corectly 
                    "ADQ767_009", # LCM_BasicCallP - Verify DLH with LOD option work corectly
                    "ADQ767_010", # LCM_BasicCallP - Verify ACB activation to a Busy DN with DRCW
                    "ADQ767_011", # LCM_BasicCallP - Verify Basic PRK via G6 trunk - Retrieve by dialing 10 digit
                    "ADQ767_012", # LCM_BasicCallP - Verify basic LNR work correctly
                    "ADQ767_013", # LCM_BasicCallP - Verify EBO Executive Busy Override Originator work corectly
                    "ADQ767_014", # LCM_BasicCallP - Verify ESDN - Enhanced Secondary DN work correctly
                    "ADQ767_015", # LCM_BasicCallP - Verify SACB - Subscriber Activated Call Blocking work correctly
                    "ADQ767_016", # LCM_BasicCallP - Verify SCS - Speed call short list work correctly
                    "ADQ767_017", # LCM_BasicCallP - Verify SCL - Speed call long list work correctly 
                    "ADQ767_018", # LCM_BasicCallP - Verify SCL inter-opts with blind 3WC correctly
                    "ADQ767_019", # LCM_BasicCallP - Verify LNR inter-opts with CFD corretly
                    "ADQ767_020", # LCM_BasicCallP - Verify CCW activation on 3WC consult leg
                    "ADQ767_021", # LCM_BasicCallP - Verify CNF controller invite BUSY user into CNF
                    "ADQ767_022", # LCM_BasicCallP - Verify CNF controller invite user with CFU into conference
                    "ADQ767_023", # LCM_BasicCallP - Verify CWT Talking party disconnects with call on hold-controller flashes
                    "ADQ767_024", # LCM_BasicCallP - Verify CXR to SIMRING group - Blind transfer
                    "ADQ767_025", # LCM_BasicCallP - Verify MMC FLASHONLY Conference Lock Unlock work correctly
                    "ADQ767_026", # LCM_BasicCallP - Verify MMC CODEADDON Conference Lock Unlock work correctly 
                    "ADQ767_027", # LCM_BasicCallP - Verify DCBI user to pickup stable call and join bridge
                    "ADQ767_028", # LCM_BasicCallP - Verify DTM inter-opts with CFU corectly
                    "ADQ767_029", # LCM_BasicCallP - Verify Simring group interop with CPU - Pickup from member
                    "ADQ767_030", # LCM_BasicCallP - Verify WML Warm Line functionality work corectly
                    "ADQ767_031", # LCM_BasicCallP - Verify RAG Ring Again functionality work corectly
                    "ADQ767_032", # RLCM_BasicCallP - Verify 3WC inter-opts with CPU correctly
                    "ADQ767_033", # RLCM_BasicCallP - Verify CNAB inter-opts with ACRJ corectly
                    "ADQ767_034", # RLCM_BasicCallP - Verify CWT Party is on hold and receives incoming call
                    "ADQ767_035", # RLCM_BasicCallP - Verify DCBI inter-opts with DCBX correctly
                    "ADQ767_036", # RLCM_BasicCallP - Verify DCPU inter-opts with DCPX corectly
                    "ADQ767_037", # RLCM_BasicCallP - Verify DISA with call via SST trunk work corectly 
                    "ADQ767_038", # RLCM_BasicCallP - Verify DLH with LOD option work corectly
                    "ADQ767_039", # RLCM_BasicCallP - Verify ACB activation to a Busy DN with DRCW
                    "ADQ767_040", # RLCM_BasicCallP - Verify Basic PRK via G6 trunk - Retrieve by dialing 10 digit
                    "ADQ767_041", # RLCM_BasicCallP - Verify basic LNR work correctly
                    "ADQ767_042", # RLCM_BasicCallP - Verify EBO Executive Busy Override Originator work corectly
                    "ADQ767_043", # RLCM_BasicCallP - Verify ESDN - Enhanced Secondary DN work correctly
                    "ADQ767_044", # RLCM_BasicCallP - Verify SACB - Subscriber Activated Call Blocking work correctly
                    "ADQ767_045", # RLCM_BasicCallP - Verify SCS - Speed call short list work correctly
                    "ADQ767_046", # RLCM_BasicCallP - Verify SCL - Speed call long list work correctly 
                    "ADQ767_047", # RLCM_BasicCallP - Verify SCL inter-opts with blind 3WC correctly
                    "ADQ767_048", # RLCM_BasicCallP - Verify LNR inter-opts with CFD corretly
                    "ADQ767_049", # RLCM_BasicCallP - Verify CCW activation on 3WC consult leg
                    "ADQ767_050", # RLCM_BasicCallP - Verify CNF controller invite BUSY user into CNF
                    "ADQ767_051", # RLCM_BasicCallP - Verify CNF controller invite user with CFU into conference
                    "ADQ767_052", # RLCM_BasicCallP - Verify MMC FLASHONLY Conference Lock Unlock work correctly
                    "ADQ767_053", # RLCM_BasicCallP - MMC CODEADDON Conference Lock Unlock work correctly 
                    "ADQ767_054", # RLCM_BasicCallP - Verify DCBI user to pickup stable call and join bridge
                    "ADQ767_055", # RLCM_BasicCallP - Verify DTM inter-opts with CFU corectly
                    "ADQ767_056", # RLCM_BasicCallP - Verify Simring group interop with CPU - Pickup from member
                    "ADQ767_057", # RLCM_BasicCallP - Verify WML Warm Line functionality work corectly
                    "ADQ767_058", # RLCM_INTRASW=N - Verify CHD inter-opts with CWT corectly when INTRASW=N in table LCMINV
                    "ADQ767_059", # RLCM_INTRASW=N - Verify 3WC inter-opts with AUL correctly when INTRASW=N in table LCMINV
                    "ADQ767_060", # RLCM_INTRASW=N - Verify CWT Talking party disconnects with call on hold-controller flashes when INTRASW=N in table LCMINV
                    "ADQ767_061", # RLCM_INTRASW=N - Verify CXR to SIMRING group - Blind transfer when INTRASW is N in table LCMINV
                    "ADQ767_062", # RLCM_INTRASW=N - Verify MADN call with MADN members join and leave the conference many times when INTRASW is N in table LCMINV
                    "ADQ767_063", # RLCM_INTRASW=Y - Verify CHD inter-opts with CWT corectly when INTRASW=Y in table LCMINV
                    "ADQ767_064", # RLCM_INTRASW=Y - Verify 3WC inter-opts with AUL correctly when INTRASW=Y in table LCMINV
                    "ADQ767_065", # RLCM_INTRASW=Y - Verify CWT Talking party disconnects with call on hold-controller flashes when INTRASW=Y in table LCMINV
                    "ADQ767_066", # RLCM_INTRASW=Y - Verify CXR to SIMRING group - Blind transfer when INTRASW is Y in table LCMINV
                    "ADQ767_067", # RLCM_INTRASW=Y - Verify MADN call with MADN members join and leave the conference many times when INTRASW is Y in table LCMINV
                );

############################### Run Test #####################################
sub runTests {
    unless ( &configured ) {
        $logger->error(__PACKAGE__ . ": Could not configure for test suite ".__PACKAGE__); 
        return 0;
    }

    $logger->debug(__PACKAGE__ . " ======: before Opening Harness");
    my $harness;
    unless($harness = SonusQA::HARNESS->new( -suite => __PACKAGE__, -release => "$TESTSUITE->{TESTED_RELEASE}", -variant => $TESTSUITE->{TESTED_VARIANT}, -build => $TESTSUITE->{BUILD_VERSION}, -path => "ats_repos/test/setup/work")){ # Use this for real SBX Hardware.
        $logger->error(__PACKAGE__ . ": Could not create harness object");
        return 0;
    }
    $logger->debug(__PACKAGE__ . " ======: Opened Harness");  
    my @tests_to_run;

    # If an array is passed in use that. If not run every test.
    if ( @_ ) {
        @tests_to_run = @_;
    }
    else {
        @tests_to_run = @TESTCASES;
    }

    $harness->{SUBROUTINE}= 1;    
    $harness->runTestsinSuite( @tests_to_run );
}

##################################################################################
# +------------------------------------------------------------------------------+
# |   EO - DLP_RLCM call features (interopt with different line/trunk types)     |
# +------------------------------------------------------------------------------+
# |   ADQ767                                                                     |
# +------------------------------------------------------------------------------+
# +------------------------------------------------------------------------------+

############################ Tai Nguyen ##########################

sub ADQ767_001 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_001");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_001";
    $tcid = "ADQ767_001";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineAB = 0;
    my $dialed_num;
    my $cpu_code = 45;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CPU/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cpu_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add 3WC to line A, add CPU group for line A and B
    unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[0]");
		print FH "STEP: add 3WC for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("est \$ CPU $list_len[0] $list_len[1] \$ y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot add CPU for line $list_dn[0] and $list_dn[1]");
        $ses_core->execCmd("abort");
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[0]")) {
        print FH "STEP: add CPU for line $list_dn[0] - FAIL\n";
        $result = 0;
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[1]")) {
        print FH "STEP: add CPU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CPU for line $list_dn[0] and $list_dn[1] - PASS\n";
    }
    $add_feature_lineAB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# D calls B and hear Ringback, B hear ringing
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[3],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls B and hear Ringback, B hear ringing");
        print FH "STEP: D calls B and hear Ringback, B hear ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls B and hear Ringback, B hear ringing - PASS\n";
    }

# A flash and dials CPU code and check speech path A and D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cpu_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path A and D
    %input = (
                -list_port => [$list_line[0],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and D");
        print FH "STEP: Check speech path between A and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and D - PASS\n";
    }

# A flash then check speech path among A, C and D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, C and D");
        print FH "STEP: Check speech path among A, C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, C and D - PASS\n";
    }

# A flash and D is forceout from conference
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    unless($ses_glcas->sendTestToneCAS(-line_port => $list_line[0], -test_tone_duration => 1000, -wait_for_event_time => $wait_for_event_time)){
        $logger->error(__PACKAGE__ . ": A cannot send test tone");
    }
    
    unless($ses_glcas->detectNoTestToneCAS(-line_port => $list_line[3], -cas_timeout => 20000, -wait_for_event_time => $wait_for_event_time)){
        $logger->error(__PACKAGE__ . ": D can receive test tone from A");
        print FH "STEP: D is forced out from the conference call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D is forced out from the conference call - PASS\n";
    }

# Check speech path between A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }
    
################################## Cleanup 001 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 001 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /3WC|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[0]");
            print FH "STEP: Remove 3WC from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineAB) {
        foreach ($list_dn[0],$list_dn[1]) {
            unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $_");
                print FH "STEP: Remove CPU from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove CPU from line $_ - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_002 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_002");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_002";
    $tcid = "ADQ767_002";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add AUL, 3WC to line A
    foreach ("AUL $list_dn[1]",'3WC') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A offhook and hear ringback and B ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    # Check line B ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A offhook");
        print FH "STEP: Check line B ringing after A offhook - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing after A offhook - PASS\n";
    }

# B answer and check speech path then A flash
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

# A calls C and check speech path then flash
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path then flash");
        print FH "STEP: A calls C and check speech path then flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path then flash - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 002 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 002 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /3WC|AUL/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('3WC','AUL') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_003 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_003");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_003";
    $tcid = "ADQ767_003";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $chd_code = 44;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CHD/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $chd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI and CHD to line B
    foreach ('CWT','CWI','CHD') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls B and hear ringback tone, B hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line B
    %input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B hears Call waiting tone");
        print FH "STEP: B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# B flash and dial CHD code
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path C and B
    %input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASS\n";
    }

# B flash and dial CHD code again
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
# Hang up line C then hang up line a and B
    foreach ($list_line[2], $list_line[1], $list_line[0]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

################################## Cleanup 003 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 003 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CHD|CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B
    if ($add_feature_lineB) {
        foreach ('CHD','CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_004 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_004");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_004";
    $tcid = "ADQ767_004";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $cnab_code = 68;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnab_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnab_code FEAT N N CNAB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnab_code FEAT N N CNAB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CNAB/, $ses_core->execCmd("pos FEATXLA $cnab_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnab_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnab_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnab_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add NAME and CNAB to line A, add ACRJ and CNAMD to line B
    foreach ('NAME PUBLIC ABC PRIVATE ABC','CNAB') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

    foreach ('ACRJ ACT','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials CNAB code and hear confirmation tone then recall dial tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B and receive ACRJ treatment on logutil
    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Stop Logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless ((grep /TREATMENT SET = ACRJ .* CALLED NO .* $list_dn[1]/, @cat) and (grep /DN $list_dn[0]/, @cat)) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check ACRJ treatment in logutil");
            print FH "STEP: Check ACRJ treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check ACRJ treatment in logutil - PASS\n";
        }

        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNAB|ACRJ|CNAMD|NAME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

################################## Cleanup 004 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 004 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Remove service from line B and A
    if ($add_feature_lineB) {
        foreach ('ACRJ','CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }
    if ($add_feature_lineA) {
        foreach ('CNAB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_005 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_005");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_005";
    $tcid = "ADQ767_005";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add CWT, CWI to line B and C
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[2]");
            print FH "STEP: add $_ for line $list_dn[2] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[2] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# C calls B and check speech path
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and check speech path");
        print FH "STEP: C calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and check speech path - PASS\n";
    }

# A calls C and hear ringback tone, C hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = $list_dn[2];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check CWT tone line C
    %input = (
                -line_port => $list_line[2],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C hears Call waiting tone");
        print FH "STEP: C hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

# C flash to answer A
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash - PASS\n";
    }
    sleep(2);

# Check speech path A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# D calls B and hear ringback tone, B hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }

    %input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[3]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[3],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: D dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials $dialed_num - PASS\n";
    }

    # Check CWT tone line B
    %input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B hears Call waiting tone");
        print FH "STEP: B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line D
    %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[3]");
        print FH "STEP: D hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears ringback tone - PASS\n";
    }

# B flash to answer D
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }
    sleep(2);

# Check speech path B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
    sleep(2);

# A, D and B go onhook, check speech path B and C
    foreach ($list_line[0], $list_line[3], $list_line[1]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
        sleep(5);
    }

    # %input = (
    #             -line_port => $list_line[1], 
    #             -flash_duration => 600,
    #             -wait_for_event_time => $wait_for_event_time
    #          ); 
    # unless($ses_glcas->flashWithDurationCAS(%input)) {
    #     $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
    #     print FH "STEP: B Flash - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: B Flash - PASS\n";
    # }
    # sleep(2);

    # %input = (
    #             -line_port => $list_line[2], 
    #             -flash_duration => 600,
    #             -wait_for_event_time => $wait_for_event_time
    #          ); 
    # unless($ses_glcas->flashWithDurationCAS(%input)) {
    #     $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
    #     print FH "STEP: C Flash - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: C Flash - PASS\n";
    # }
    # sleep(2);

    # Check line B re-ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not rering");
        print FH "STEP: Check line B rering - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B rering - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASS\n";
    }

# B and C go onhook
    foreach ($list_line[1], $list_line[2]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

################################## Cleanup 005 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 005 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }
    if ($add_feature_lineC) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[2]");
                print FH "STEP: Remove $_ from line $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[2] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_006 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_006");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_006";
    $tcid = "ADQ767_006";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCBI to line B and DCBX to line C
    unless ($ses_core->callFeature(-featureName => "DCBI", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBI for line $list_dn[1]");
		print FH "STEP: add DCBI for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBI for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    unless ($ses_core->callFeature(-featureName => "DCBX", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBX for line $list_dn[2]");
		print FH "STEP: add DCBX for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBX for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# B receives NACK treatment on logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = NACK .* CALLED NO .* $dialed_num/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check NACK treatment in logutil");
            print FH "STEP: Check NACK treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check NACK treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# Hang up all lines
    foreach (@list_line) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(5);

# Remove DCBX option on line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCBX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBX from line $list_dn[2]");
            print FH "STEP: Remove DCBX from line $list_dn[2] - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Remove DCBX from line $list_dn[2] - PASS\n";
        }
        $add_feature_lineC = 0;
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 006 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 006 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCBI|DCBX/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DCBI', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBI from line $list_dn[1]");
            print FH "STEP: Remove DCBI from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBI from line $list_dn[1] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCBX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBX from line $list_dn[2]");
            print FH "STEP: Remove DCBX from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBX from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_007 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_007");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_007";
    $tcid = "ADQ767_007";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCPU to line B and DCPX to line C
    unless ($ses_core->callFeature(-featureName => "DCPU", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCPU for line $list_dn[1]");
		print FH "STEP: add DCPU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCPU for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    unless ($ses_core->callFeature(-featureName => "DCPX", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCPX for line $list_dn[2]");
		print FH "STEP: add DCPX for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCPX for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C hear ringback and C hears ringing");
        print FH "STEP: A calls C hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C hear ringback and C hears ringing - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# B receives NACK treatment on logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = NACK .* CALLED NO .* $dialed_num/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check NACK treatment in logutil");
            print FH "STEP: Check NACK treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check NACK treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# Hang up line A and B
    foreach (@list_line[0..1]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(5);

# Remove DCPX option on line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCPX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPX from line $list_dn[2]");
            print FH "STEP: Remove DCPX from line $list_dn[2] - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Remove DCPX from line $list_dn[2] - PASS\n";
        }
        $add_feature_lineC = 0;
    }

# A calls C hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C hear ringback and C hears ringing");
        print FH "STEP: A calls C hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C hear ringback and C hears ringing - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 007 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 007 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCPU|DCPX/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DCPU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPU from line $list_dn[1]");
            print FH "STEP: Remove DCPU from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DCPU from line $list_dn[1] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCPX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPX from line $list_dn[2]");
            print FH "STEP: Remove DCPX from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DCPX from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_008 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_008");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_008";
    $tcid = "ADQ767_008";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_sipt'}{-acc};
    my $trunk_region = $db_trunk{'t15_sipt'}{-region};
    my $trunk_clli = $db_trunk{'t15_sipt'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $disa_num = 2124405555;
    my $authen_code = 123;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table DNROUTE and AUTHCDE for DISA call
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table DNROUTE")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'table DNROUTE'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    $disa_num =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $1 $2 $3")) {
        $ses_core->execCmd("add $1 $2 $3 FEAT DISA NY_PUB 0 Y Y Y N \+");
        if (grep /ERROR/, $ses_core->execCmd("TIMEOPT 10 TMTOPT 3 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple '$1 $2 $3'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        $ses_core->execCmd("rep $1 $2 $3 FEAT DISA NY_PUB 0 Y Y Y N \+");
        if (grep /ERROR/, $ses_core->execCmd("TIMEOPT 10 TMTOPT 3 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple '$1 $2 $3'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }

    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /DISA NY_PUB/, $ses_core->execCmd("pos $1 $2 $3")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill DISA number in table DNROUTE");
        print FH "STEP: Check DISA number in table DNROUTE - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check DISA number in table DNROUTE - PASS\n";
    }


    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table AUTHCDE")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'table AUTHCDE'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB $authen_code")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB $authen_code IBN 0 N \$ SW \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB $authen_code'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB $authen_code IBN 0 N \$ SW \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB $authen_code'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }

    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /NY_PUB .* $authen_code/, $ses_core->execCmd("pos NY_PUB $authen_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill authen code in table AUTHCDE");
        print FH "STEP: Check authen code in table AUTHCDE - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check authen code in table AUTHCDE - PASS\n";
    }

    unless ($ses_core->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit all'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# Get current used port of PKTMA and ANNC
    my ($pktma, $annc);
    $ses_core->execCmd("mapci nodisp;mtc;pm;post gwc 22");
    @output = $ses_core->execCmd("listres");
    foreach ( @output) {
        if (/PKT Media Anchor\s+\w+\s+.\s+.\s+(\d+)/) {
            $pktma = $1;
        }
        if (/PKTMA REQD\s+\w+\s+.\s+.\s+(\d+)/) {
            $annc = $1;
        }
    }
    $logger->debug(__PACKAGE__ . " $tcid: PKT = $pktma, ANNC = $annc");

# A dials DISA via SST trunk then hears confirmation tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A dials authen code then A hears recall dial tone
    $dialed_num = $authen_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B and hear ringback tone, B hear ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and hear ringback tone, B hear ringing");
        print FH "STEP: A calls B and hear ringback tone, B hear ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and hear ringback tone, B hear ringing - PASS\n";
    }

# Check 3 PKTMA ports and one ANNC port are used in MAPCI
    # $ses_core->execCmd("mapci nodisp;mtc;pm;post gwc 22");
    @output = $ses_core->execCmd("listres");
    foreach ( @output) {
        if (/PKT Media Anchor\s+\w+\s+.\s+.\s+(\d+)/) {
            $pktma = $1 - $pktma;
        }
        if (/PKTMA REQD\s+\w+\s+.\s+.\s+(\d+)/) {
            $annc = $1 - $annc;
        }
    }
    $logger->debug(__PACKAGE__ . " $tcid: PKT = $pktma, ANNC = $annc");
    unless (($pktma == 3) and ($annc == 1)) {
        $logger->error(__PACKAGE__ . ": 3 PKTMA ports and one ANNC port are not used in MAPCI");
        print FH "STEP: Check 3 PKTMA ports and one ANNC port are used in MAPCI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check 3 PKTMA ports and one ANNC port are used in MAPCI - PASS\n";
    }
    unless ($ses_core->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit all'");
    }

# B answer then check speech path between A and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
   
################################## Cleanup 008 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 008 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DISA/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_009 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_009");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_009";
    $tcid = "ADQ767_009";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dlh_added = 0;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add DLH group: A is pilot, B is member; Add LOD to line A
    # Out line A and B
    for (my $i = 0; $i < 2; $i++){
        %input = (
                    -function => ['OUT'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => 'ANA', 
                    -len => $list_len[$i], 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot OUT");
            print FH "STEP: OUT line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: OUT line $list_dn[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

    # Add DLH group and add LOD for line A
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ DLH $list_dn[0] $list_line_info[0] \+");
    unless ($ses_core->execCmd("$list_len[0] $list_len[1] \$ DGT \$ 6 y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
    unless (grep /$list_len[1]/, $ses_core->execCmd("qdn $list_dn[0]")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DLH for line $list_dn[0] and $list_dn[1]");
		print FH "STEP: create group DLH for line $list_dn[0] and $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group DLH for line $list_dn[0] and $list_dn[1] - PASS\n";
    }

    unless($ses_core->execCmd("ADO \$ $list_len[0] LOD $list_dn[2] \$ Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'ado'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
    unless (grep /LOD $list_dn[2]/, $ses_core->execCmd("qdn $list_dn[0]")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LOD for line $list_dn[0]");
		print FH "STEP: add LOD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LOD for line $list_dn[0] - PASS\n";
    }
    $dlh_added = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    # A and B go offhook for busy
    foreach ($list_line[0], $list_line[1]) {
        unless($ses_glcas->offhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot offhook line $_");
            print FH "STEP: Offhook line $_ - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Offhook line $_ - PASS\n";
        }
    }
    # D calls A and the call is routed to C
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and the call is routed to C");
        print FH "STEP: D calls A and the call is routed to C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and the call is routed to C - PASS\n";
    }

################################## Cleanup 009 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 009 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DLH|LOD/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    if ($dlh_added) {
        unless ($ses_core->execCmd("servord")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
        }
        unless ($ses_core->execCmd("DEL \$ DLH $list_len[1] \$ Y Y")){
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'DEL'");
        }
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
        }
        unless ($ses_core->execCmd("OUT \$ $list_dn[0] $list_len[0] BLDN Y Y Y")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'DEL'");
        }
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
        }
        # NEW line A and B
        for (my $i = 0; $i < 2; $i++){
            %input = (
                        -function => ['NEW'], 
                        -lineDN => $list_dn[$i], 
                        -lineType => 'ANA', 
                        -len => $list_len[$i], 
                        -lineInfo => $list_line_info[$i]
                    );
            unless ($ses_core->resetLine(%input)) {
                $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot NEW");
                print FH "STEP: NEW line $list_dn[$i] - FAIL\n";
                $result = 0;
            } else {
                print FH "STEP: NEW line $list_dn[$i] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_010 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_010");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_010";
    $tcid = "ADQ767_010";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $acb_code = 62;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $acb_code")) {
        @output = $ses_core->execCmd("add FEATXLA $acb_code FEAT N Y ACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $acb_code FEAT N Y ACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /ACBA/, $ses_core->execCmd("pos FEATXLA $acb_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $acb_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $acb_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $acb_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add ACB to line A
    unless ($ses_core->callFeature(-featureName => "ACB NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ACB for line $list_dn[0]");
		print FH "STEP: add ACB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add ACB for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Add DRCW to line B
    unless ($ses_core->callFeature(-featureName => "DRCW NOAMA ACT $list_dn[0] 3 \$", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRCW for line $list_dn[1]");
		print FH "STEP: add DRCW for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DRCW for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
# B calls C and they have speech path
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and they have speech path");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }

# A calls B and hears BUSY tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and hears BUSY tone");
        print FH "STEP: A calls B and hears BUSY tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and hears BUSY tone - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line $list_line[0] - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line $list_line[0] - PASS\n";
    }
    sleep(2);

# line A activate ACB then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$acb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: Activate ACB for line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Activate ACB for line A - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line $list_line[0] - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line $list_line[0] - PASS\n";
    }
    sleep(3);

# Hang up line B and C
    foreach (@list_line[1..2]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(10);

# Check line A ringing and offhook
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring after B back to IDL");
        print FH "STEP: Check line A ringing after B back to IDL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing after B back to IDL - PASS\n";
    }
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

# Check line B ringing and offhook
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B- PASS\n";
    }

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 010 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 010 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /ACB|DRCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'ACB', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ACB from line $list_dn[0]");
            print FH "STEP: Remove ACB from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove ACB from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DRCW', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DRCW from line $list_dn[1]");
            print FH "STEP: Remove DRCW from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DRCW from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_011 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_011");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_011";
    $tcid = "ADQ767_011";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_g6_pri'}{-acc};
    my $trunk_region = $db_trunk{'t15_g6_pri'}{-region};
    my $trunk_clli = $db_trunk{'t15_g6_pri'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $prkr_code = 76;
    my $prks_code = 77;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    foreach ("FEATXLA $prkr_code FEAT N N PRKR","FEATXLA $prks_code FEAT N N PRKS") {
        if (grep /NOT FOUND/, $ses_core->execCmd("pos $_")) {
            @output = $ses_core->execCmd($_);
            if (grep/DMOS NOT ALLOWED/, @output) {
                $ses_core->execCmd("y");
            }
            $ses_core->execCmd("y");
            unless ($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
            }
        } else {
            @output = $ses_core->execCmd($_);
            if (grep/DMOS NOT ALLOWED/, @output) {
                $ses_core->execCmd("y");
            }
            $ses_core->execCmd("y");
            unless ($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
            }
        }
    }
    unless (grep /PRKR/, $ses_core->execCmd("pos FEATXLA $prkr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $prkr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $prkr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $prkr_code in table IBNXLA - PASS\n";
    }

    unless (grep /PRKS/, $ses_core->execCmd("pos FEATXLA $prks_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $prks_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $prks_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $prks_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add PRK to line A and C
    unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: add PRK for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[2]");
		print FH "STEP: add PRK for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls A via G6 ISUP and check speech path
    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $dialed_num,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls A via G6 ISUP and check speech path");
        print FH "STEP: B calls A via G6 ISUP and check speech path then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls A via G6 ISUP and check speech path then A flash - PASS\n";
    }

# A dials PRKS code and onhook
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$prks_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: line A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: line A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# line C dials PRKR code + 7 digit DN A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);

    $dialed_num = '*' . $prkr_code;
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

# Check speech path line B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }

################################## Cleanup 011 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 011 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /PARK/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and C
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[2]");
            print FH "STEP: Remove PRK from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_012 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_012");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_012";
    $tcid = "ADQ767_012";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $lnr_code = 37;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        @output = $ses_core->execCmd("add FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /LNR/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $lnr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add LNR to line A
    unless ($ses_core->callFeature(-featureName => "LNR", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LNR for line $list_dn[0]");
		print FH "STEP: add LNR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LNR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    # A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

    # Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

    # A dial LNR code and check speech path with B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "\*$lnr_code\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dial LNR code and check speech path with B");
        print FH "STEP: A dial LNR code and check speech path with B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dial LNR code and check speech path with B - PASS\n";
    }

################################## Cleanup 012 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 012 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /LNR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_013 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_013");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_013";
    $tcid = "ADQ767_013";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $ebo_code = 424;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $ebo_code")) {
        @output = $ses_core->execCmd("add FEATXLA $ebo_code FEAT N N EBO");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $ebo_code FEAT N N EBO");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /EBO/, $ses_core->execCmd("pos FEATXLA $ebo_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $ebo_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $ebo_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $ebo_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add EBO to line C
    unless ($ses_core->callFeature(-featureName => "EBO", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add EBO for line $list_dn[2]");
		print FH "STEP: add EBO for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add EBO for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }
# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C make call to B and hear busy treatment
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and hears BUSY tone");
        print FH "STEP: C calls B and hears BUSY tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and hears BUSY tone - PASS\n";
    }
    sleep(5);

    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = BUSY .* CALLED NO .* $list_dn[1]/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
            print FH "STEP: Check busy treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check busy treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# C flashes and dials EBO code
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $ebo_code;
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $ebo_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $ebo_code - PASS\n";
    }
    sleep(8);

# Check speech path among A B C
    %input = (
                -list_port => [@list_line], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path among A B C");
        print FH "STEP: Check speech path among A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A B C - PASS\n";
    }

################################## Cleanup 013 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 013 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /EBO/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'EBO', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove EBO from line $list_dn[2]");
            print FH "STEP: Remove EBO from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove EBO from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_014 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_014");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_014";
    $tcid = "ADQ767_014";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $sdn_code = 97;
    my $sdn_num = 2124418765;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sdn_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sdn_code FEAT N N SDNID");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sdn_code FEAT N N SDNID");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SDNID/, $ses_core->execCmd("pos FEATXLA $sdn_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sdn_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sdn_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sdn_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SDN to line A
    unless ($ses_core->callFeature(-featureName => "SDN $sdn_num 2 E \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SDN for line $list_dn[0]");
		print FH "STEP: add SDN for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SDN for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls SDN number and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $sdn_num,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls SDN number and check speech path between A and B");
        print FH "STEP: B calls SDN number and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls SDN number and check speech path between A and B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials SDN code + 4 last digits of SDN number then A hears recall dial tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    ($dialed_num) = ($sdn_num =~ /\d{6}(\d+)/);
    $dialed_num = "\*$sdn_code" . $dialed_num;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

################################## Cleanup 014 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 014 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /ESDN/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        @output = $ses_logutil->execCmd("open amab;back all");
        unless ((grep /CALLING DN .* $sdn_num/, @output) and (grep /ORIG AGENT .* DN $sdn_num/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see AMAB of SDN number");
            $result = 0;
            print FH "STEP: Check AMAB of SDN number - FAIL\n";
        } else {
            print FH "STEP: Check AMAB of SDN number - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SDN $sdn_num", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SDN from line $list_dn[0]");
            print FH "STEP: Remove SDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SDN from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_015 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_015");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_015";
    $tcid = "ADQ767_015";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $sacba_code = 55;
    my $sacbd_code = 56;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sacba_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sacba_code FEAT N N SACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sacba_code FEAT N N SACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SACBA/, $ses_core->execCmd("pos FEATXLA $sacba_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sacba_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sacba_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sacba_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sacbd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sacbd_code FEAT N N SACBD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sacbd_code FEAT N N SACBD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SACBD/, $ses_core->execCmd("pos FEATXLA $sacbd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sacbd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sacbd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sacbd_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill table CUSTSTN
    unless (grep /CUSTSTN/, $ses_core->execCmd("table CUSTSTN")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTSTN'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp SPP")) {
        @output = $ses_core->execCmd("add $cust_grp SPP SPP 3");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp SPP SPP 3");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /$cust_grp SPP SPP 3/, $ses_core->execCmd("pos $cust_grp SPP")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp SPP in table CUSTSTN");
        print FH "STEP: Datafill $cust_grp SPP in table CUSTSTN - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp SPP in table CUSTSTN - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SACB to line A
    unless ($ses_core->callFeature(-featureName => "SACB INACT ALL 9999 N", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SACB for line $list_dn[0]");
		print FH "STEP: add SACB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SACB for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SACBA code then dials 9999# and onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $sacba_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    $dialed_num = '9999#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(5); # sleep for announcement

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# A dials DN(B) then dials 9999# and A can talk with B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => '9999#',
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials 9999# and A can talk with B");
        print FH "STEP: A dials 9999# and A can talk with B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials 9999# and A can talk with B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials DN(B) then dials wrong pin, B does not ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    foreach ('9888#','9777#','9666#') {
        $dialed_num = $_;
        %input = (
                    -line_port => $list_line[0],
                    -dialed_number => $dialed_num,
                    -digit_on => 300,
                    -digit_off => 300,
                    -wait_for_event_time => $wait_for_event_time
                    ); 
        unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
            $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
            print FH "STEP: A dials $dialed_num - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: A dials $dialed_num - PASS\n";
        }
        sleep(2); # sleep for announcement

        # Check line B not ring
        %input = (
                    -line_port => $list_line[1],
                    -ring_count => 1,
                    -ring_on => 0,
                    -ring_off => 0,
                    -cas_timeout => 20000,
                    -wait_for_event_time => 15,
                    );
        if ($ses_glcas->detectRingingSignalCAS(%input)) {
            $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A offhook");
            print FH "STEP: Check line B not ringing - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check line B not ringing - PASS\n";
        }
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SACBD code then dials 9999# and onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $sacbd_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    $dialed_num = '9999#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# A calls B and check speech path between A and B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at  A calls B and check speech path between A and B");
        print FH "STEP:  A calls B and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP:  A calls B and check speech path between A and B - PASS\n";
    }
################################## Cleanup 015 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 015 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SACB/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SACB", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SACB from line $list_dn[0]");
            print FH "STEP: Remove SACB from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SACB from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);

}

sub ADQ767_016 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_016");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_016";
    $tcid = "ADQ767_016";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scs_code = 69;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scs_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scs_code FEAT N N SCPS");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scs_code FEAT N N SCPS");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPS/, $ses_core->execCmd("pos FEATXLA $scs_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scs_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scs_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scs_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCS to line A
    unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCS for line $list_dn[0]");
		print FH "STEP: add SCS for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SCS for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCS code + N + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scs_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '0' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + N and check speech path between line A and B
    $dialed_num = "\*$spdc_code" . '0';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + N and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + N and check speech path between line A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + N and check speech path between line A and B - PASS\n";
    }

################################## Cleanup 016 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 016 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCS/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCS from line $list_dn[0]");
            print FH "STEP: Remove SCS from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SCS from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);

}

sub ADQ767_017 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_017");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_017";
    $tcid = "ADQ767_017";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scl_code = 28;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPL/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scl_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCL to line A
    unless ($ses_core->callFeature(-featureName => "SCL L30", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCL for line $list_dn[0]");
		print FH "STEP: add SCL for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SCL for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCS code + NN + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scl_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '11' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + NN and check speech path between line A and B
    $dialed_num = "\*$spdc_code" . '11';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + NN and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B - PASS\n";
    }

################################## Cleanup 017 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 017 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCL/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SCL", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCL from line $list_dn[0]");
            print FH "STEP: Remove SCL from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SCL from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_018 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_018");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_018";
    $tcid = "ADQ767_018";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scl_code = 28;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPL/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scl_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCL and 3WC to line A
    foreach ("SCL L30","3WC") {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCL code + NN + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scl_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '22' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + NN and check speech path between line A and B then A flash
    $dialed_num = "\*$spdc_code" . '22';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + NN and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B then A flash - PASS\n";
    }

# A dials DN (C) then A flash
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 8','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials DN(C), C rings then A flash");
        print FH "STEP: A dials DN(C), C rings then A flashes - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN(C), C rings then A flashes - PASS\n";
    }

# A & B can hear ringback tone during talk with each other.
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A and B can talk to each other during hearing Ringback from C");
        print FH "STEP: A and B can talk to each other during hearing Ringback from C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A and B can talk to each other during hearing Ringback from C - PASS\n";
    }

# C offhook and check speech path among A, B, C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
    sleep(2);
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 018 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 018 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCL|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ("3WC","SCL") {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_019 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_019");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_019";
    $tcid = "ADQ767_019";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $lnr_code = 37;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        @output = $ses_core->execCmd("add FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /LNR/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $lnr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add LNR to line A, add CFD to line B
    unless ($ses_core->callFeature(-featureName => "LNR", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LNR for line $list_dn[0]");
		print FH "STEP: add LNR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LNR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFD N $list_dn[2]", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[1]");
		print FH "STEP: add CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials LNR code and B rings
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $lnr_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    # Check line B ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A dials LNR code");
        print FH "STEP: Check line B ringing after A dials LNR code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing after A dials LNR code - PASS\n";
    }

# Wait for timeout, C ring and check speech path
    sleep(12);
    # Check line C ring
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C does not ring after CFD timeout");
        print FH "STEP: Check line C ringing after CFD timeout - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing after CFD timeout - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

################################## Cleanup 019 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 019 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /LNR|CFD/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'LNR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove LNR from line $list_dn[0]");
            print FH "STEP: Remove LNR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove LNR from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[1]");
            print FH "STEP: Remove CFD from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result); 
}

sub ADQ767_020 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_020");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_020";
    $tcid = "ADQ767_020";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $ccw_code = 50;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $ccw_code")) {
        @output = $ses_core->execCmd("add FEATXLA $ccw_code FEAT N N CCW");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $ccw_code FEAT N N CCW");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CCW/, $ses_core->execCmd("pos FEATXLA $ccw_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $ccw_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $ccw_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $ccw_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI and CHD to line A
    foreach ('3WC','CWT','CCW') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path then flash A
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path then flash A");
        print FH "STEP: A calls B and check speech path then flash A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path then flash A - PASS\n";
    }

# A dials CCW code and hear confirmation tone
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

# A flash and call C then check speech path then flash A again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path then A flash");
        print FH "STEP: A calls C and check speech path then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path then A flash - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# Onhook C and check speech path A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B");
        print FH "STEP: Check speech path among A, B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B - PASS\n";
    }

# C offhook and calls A and receive busy treatment 
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => "$list_dn[0]\#",
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls A");
        print FH "STEP: C calls A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls A - PASS\n";
    }

    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = BUSY .* CALLED NO .* $list_dn[0]/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
            print FH "STEP: Check busy treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check busy treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

################################## Cleanup 020 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 020 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CCW|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('CCW','CWT','3WC') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_021 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_021");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_021";
    $tcid = "ADQ767_021";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineA = 0;
    my $cnf_code = 30;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CONF/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnf_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CNF to line A
    unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[0]");
		print FH "STEP: add CNF for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path then flash A
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path then flash A");
        print FH "STEP: A calls B and check speech path then flash A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path then flash A - PASS\n";
    }

# A dials CNF code and check speech path A and B again
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B");
        print FH "STEP: Check speech path between A, B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B - PASS\n";
    }

# A flash and call C then check speech path then flash A again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['NONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and C answer then A flash");
        print FH "STEP: A calls C and C answer then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and C answer then A flash - PASS\n";
    }

# A dials CNF code and check speech path among A, B and C
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B and C");
        print FH "STEP: Check speech path between A, B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B and C - PASS\n";
    }

# Offhook D for busy, A flash and call D then hears busy tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }
    sleep(2);

    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = $list_dn[3];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0]
                -busy_tone_duration => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless ($ses_glcas->detectBusyToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect busy tone line $list_dn[0]");
        print FH "STEP: A hears busy tone - FAIL\n";
    } else {
        print FH "STEP: A hears busy tone - PASS\n";
    }

# A flash and check speech path among A, B and C again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[0]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B and C");
        print FH "STEP: Check speech path between A, B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B and C - PASS\n";
    }

################################## Cleanup 021 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 021 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNF/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[0]");
            print FH "STEP: Remove CNF from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_022 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_022");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_022";
    $tcid = "ADQ767_022";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $cfd_code = 70;
    my $cnf_code = 30;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cfd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cfd_code FEAT N N CFDP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cfd_code FEAT N N CFDP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CFDP/, $ses_core->execCmd("pos FEATXLA $cfd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cfd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cfd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cfd_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CONF/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnf_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CNF to line A, add CFD to line B
    unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[0]");
		print FH "STEP: add CNF for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFD F $list_dn[3]", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[1]");
		print FH "STEP: add CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B dials CFD code
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $cfd_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
    }

    unless (grep /CFD.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFD for line $list_dn[1]");
        print FH "STEP: activate CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFD for line $list_dn[1] - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# A dials CONF code and check speech path A and C
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cnf_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# A flash and calls B the call forward to D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and call is fowarded to D");
        print FH "STEP: A calls B and call is fowarded to D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and call is fowarded to D - PASS\n";
    }

# A dials CONF code and check speech path among A, C, D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cnf_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path among A, C, D
    %input = (
                -list_port => [$list_line[0],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, C, D");
        print FH "STEP: Check speech path among A, C, D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, C, D - PASS\n";
    }

################################## Cleanup 022 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 022 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNF|CFU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[0]");
            print FH "STEP: Remove CNF from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[1]");
            print FH "STEP: Remove CFD from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_023 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_023");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_023";
    $tcid = "ADQ767_023";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add CWT, CWI to line A
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls A and hear ringback tone, A hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[0];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line A
    %input = (
                -line_port => $list_line[0],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A hears Call waiting tone");
        print FH "STEP: A hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# A flash to answer C and check speech path between A and C
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# A and C onhook then A re-ring
    foreach ($list_line[0], $list_line[2]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
        sleep(5);
    }

    # Check line A re-ring
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not rering");
        print FH "STEP: Check line A rerings - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A rerings - PASS\n";
    }

# offhook A and check speech path A and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 023 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 023 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_024 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_024");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_024";
    $tcid = "ADQ767_024";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add CXR to line A, add simring for B and C
    unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[1] $list_dn[2] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[1]");
    unless ((grep /Member DN 1 .* $list_dn[2]/, @output) and (grep /Pilot DN: .* $list_dn[1]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[1] and $list_dn[2]");
		print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# D calls A and check speech path
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and check speech path");
        print FH "STEP: D calls A and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and check speech path - PASS\n";
    }

# A transfers call to SIMRING group
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(8);

# B ring, C does not ring then onhook A
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    if ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C still ring");
        print FH "STEP: Check line C not ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C not ring - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# Offhook B and check speech path D and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[3],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between D and B");
        print FH "STEP: Check speech path between D and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and B - PASS\n";
    }

################################## Cleanup 024 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 024 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CXR|SIMRING/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $list_dn[1]");
            print FH "STEP: Remove SIMRING from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove SIMRING from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_025 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_025");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_025";
    $tcid = "ADQ767_025";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $tapi_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $mmc_dn = 2124400000;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    my %info;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    my $thr4 = threads->create(\&tapi);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();
    $ses_tapi = $thr4->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table MMCONF
    unless (grep/MMCONF/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table MMCONF'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    $mmc_dn =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp 0")) {
        @output = $ses_core->execCmd("add $cust_grp 0 $1 $2 $3 0 Y Y N 150 FLASHONLY \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp 0 $1 $2 $3 0 Y Y N 150 FLASHONLY \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /150 FLASHONLY/, $ses_core->execCmd("pos $cust_grp 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp 0 in table MMCONF");
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Start tapi trace
    unless ($ses_tapi->loginCore(
                                -username => [@{$core_account{-username}}[10..14]], 
                                -password => [@{$core_account{-password}}[10..14]]
                                )) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core for tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core for tapitrace - PASS\n";
    }
    @output = $ses_tapi->execCmd("gwctraci");
    unless (grep/GWCTRACI:/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'gwctraci' ");
    }
    if (grep /count exceeded/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot use 'gwctraci' due to 'count exceeded' ");
    }
    if (grep /This will clear existing trace buffers/, $ses_tapi->execCmd("define both gwc $audio_gwc 0 32766")) {
        unless ($ses_tapi->execCmd("y")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'y' ");
        }
    }
    unless ($ses_tapi->execCmd("enable both gwc $audio_gwc")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'enable both gwc $audio_gwc'");
        print FH "STEP: start tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start tapitrace - PASS\n";
    }
    $tapi_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials MMC DN and hears ringback tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials MMC DN and hears ringback tone");
        print FH "STEP: A dials MMC DN and hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials MMC DN and hears ringback tone - PASS\n";
    }

# B dials MMC DN and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B dials MMC DN and check speech path between A and B");
        print FH "STEP: B dials MMC DN and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials MMC DN and check speech path between A and B - PASS\n";
    }

# A flash then check speech path between A and B
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

# C dials MMC DN and hears busy tone
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears busy tone");
        print FH "STEP: C dials MMC DN and hears busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears busy tone - PASS\n";
    }

################################## Cleanup 025 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 025 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MEETME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Stop tapi
    my $exist_enter = 0;
    my $exist_lock = 0;
    my @tapi_output;
    %info = (
            $audio_gwc => {
                    -gwc_ip => $audio_gwc_ip,
                    -terminal_num => [],
                    -int_term_num => [10270],
                    },
            );
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: stop tapitrace - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: stop tapitrace - PASS\n";
        }

        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                foreach (@{$tapiterm_out{$gwc_id}{$tn}}) {
                    $_ =~ s/\0//g;
                    if (/SG\{conftn/) {
                        push(@tapi_output, $_);
                    }
                }
            }
        }
        $logger->error(__PACKAGE__ . " $tcid: you see that" . Dumper(\@tapi_output));

        foreach (@tapi_output) {
            if (/SG\{conftn\/enter\}/) {
                $exist_enter++;
            }
            if (/SG\{conftn\/lock\}/) {
                $exist_lock++;
            }
        }

        if ($exist_enter) {
            print FH "STEP: check the message SG{conftn/enter} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/enter}' in tapi log");
            print FH "STEP: check the message SG{conftn/enter} on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_lock) {
            print FH "STEP: check the message SG{conftn/lock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/lock}' in tapi log");
            print FH "STEP: check the message SG{conftn/lock} on tapi log - FAIL\n";
            $result = 0;
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_026 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_026");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_026";
    $tcid = "ADQ767_026";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $tapi_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $mmlk_code = 104;
    my $mmul_code = 105;
    my $mmc_dn = 2124400000;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    my %info;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    my $thr4 = threads->create(\&tapi);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();
    $ses_tapi = $thr4->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table MMCONF
    unless (grep/MMCONF/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table MMCONF'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    $mmc_dn =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp 0")) {
        @output = $ses_core->execCmd("add $cust_grp 0 $1 $2 $3 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp 0 $1 $2 $3 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /150 CODEADDON/, $ses_core->execCmd("pos $cust_grp 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp 0 in table MMCONF");
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $mmlk_code")) {
        @output = $ses_core->execCmd("add FEATXLA $mmlk_code FEAT N N MMLK");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $mmlk_code FEAT N N MMLK");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /MMLK/, $ses_core->execCmd("pos FEATXLA $mmlk_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $mmlk_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $mmlk_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $mmlk_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $mmul_code")) {
        @output = $ses_core->execCmd("add FEATXLA $mmul_code FEAT N N MMUL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $mmul_code FEAT N N MMUL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /MMUL/, $ses_core->execCmd("pos FEATXLA $mmul_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $mmul_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $mmul_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $mmul_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Start tapi trace
    unless ($ses_tapi->loginCore(
                                -username => [@{$core_account{-username}}[10..14]], 
                                -password => [@{$core_account{-password}}[10..14]]
                                )) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core for tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core for tapitrace - PASS\n";
    }
    @output = $ses_tapi->execCmd("gwctraci");
    unless (grep/GWCTRACI:/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'gwctraci' ");
    }
    if (grep /count exceeded/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot use 'gwctraci' due to 'count exceeded' ");
    }
    if (grep /This will clear existing trace buffers/, $ses_tapi->execCmd("define both gwc $audio_gwc 0 32766")) {
        unless ($ses_tapi->execCmd("y")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'y' ");
        }
    }
    unless ($ses_tapi->execCmd("enable both gwc $audio_gwc")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'enable both gwc $audio_gwc'");
        print FH "STEP: start tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start tapitrace - PASS\n";
    }
    $tapi_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials MMC DN and hears ringback tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials MMC DN and hears ringback tone");
        print FH "STEP: A dials MMC DN and hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials MMC DN and hears ringback tone - PASS\n";
    }

# B dials MMC DN and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B dials MMC DN and check speech path between A and B");
        print FH "STEP: B dials MMC DN and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials MMC DN and check speech path between A and B - PASS\n";
    }

# A flash and dials MMLK code then check speech path between A and B again
    %input = (
                -line_port => $list_line[0],
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$mmlk_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B again");
        print FH "STEP: Check speech path between A and B again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B again - PASS\n";
    }

# C dials MMC DN and hears busy tone then onhook
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears busy tone then onhook");
        print FH "STEP: C dials MMC DN and hears busy tone then onhook - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears busy tone then onhook - PASS\n";
    }

# A flash and dials MMUL code then check speech path between A and B again
    %input = (
                -line_port => $list_line[0],
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$mmul_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B again");
        print FH "STEP: Check speech path between A and B again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B again - PASS\n";
    }

# C dials MMC DN
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 3'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears ringback");
        print FH "STEP: C dials MMC DN and hears ringback - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears ringback - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 026 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 026 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MEETME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Stop tapi
    my $exist_enter = 0;
    my $exist_lock = 0;
    my $exist_unlock = 0;
    my @tapi_output;
    %info = (
            $audio_gwc => {
                    -gwc_ip => $audio_gwc_ip,
                    -terminal_num => [],
                    -int_term_num => [10270],
                    },
            );
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: stop tapitrace - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: stop tapitrace - PASS\n";
        }

        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                foreach (@{$tapiterm_out{$gwc_id}{$tn}}) {
                    $_ =~ s/\0//g;
                    if (/SG\{conftn/) {
                        push(@tapi_output, $_);
                    }
                }
            }
        }
        $logger->error(__PACKAGE__ . " $tcid: you see that" . Dumper(\@tapi_output));

        foreach (@tapi_output) {
            if (/SG\{conftn\/enter\}/) {
                $exist_enter++;
            }
            if (/SG\{conftn\/lock\}/) {
                $exist_lock++;
            }
            if (/SG\{conftn\/unlock\}/) {
                $exist_unlock++;
            }
        }
        if ($exist_enter == 2) {
            print FH "STEP: check the message SG{conftn/enter} display 2 times on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Can see 'SG{conftn/enter}' $exist_enter times on tapi log");
            print FH "STEP: check the message SG{conftn/enter} display 2 times on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_lock) {
            print FH "STEP: check the message SG{conftn/lock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/lock}' in tapi log");
            print FH "STEP: check the message SG{conftn/lock} on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_unlock) {
            print FH "STEP: check the message SG{conftn/unlock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/unlock}' in tapi log");
            print FH "STEP: check the message SG{conftn/unlock} on tapi log - FAIL\n";
            $result = 0;
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_027 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_027");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_027";
    $tcid = "ADQ767_027";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCBI to line A
    unless ($ses_core->callFeature(-featureName => "DCBI", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBI for line $list_dn[0]");
		print FH "STEP: add DCBI for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBI for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls C, B hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C, B hear ringback and C hears ringing");
        print FH "STEP: B calls C, B hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C, B hear ringback and C hears ringing - PASS\n";
    }

# A dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(2);

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line[0..1]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# B calls C, B hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C, B hear ringback and C hears ringing");
        print FH "STEP: B calls C, B hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C, B hear ringback and C hears ringing - PASS\n";
    }

# A dials DCP code then C answer
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

# A dials DN(C) then check speech path among A, B, C
    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(2);

    # Check speech path among A B C
    %input = (
                -list_port => [@list_line], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path among A B C");
        print FH "STEP: Check speech path among A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A B C - PASS\n";
    }

################################## Cleanup 027 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 027 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCBI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DCBI', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBI from line $list_dn[0]");
            print FH "STEP: Remove DCBI from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBI from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_028 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_028");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_028";
    $tcid = "ADQ767_028";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add DTM to line A, add CFU to line B
    unless ($ses_core->callFeature(-featureName => "DTM", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DTM for line $list_dn[0]");
		print FH "STEP: add DTM for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DTM for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFU N", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line $list_dn[1]");
		print FH "STEP: add CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFU for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    # B activate CFU for line A
    unless ($ses_core->execCmd("Servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    unless ($ses_core->execCmd("changecfx $list_len[1] CFU $list_dn[0] A")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'changecfx'");
    }
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[1]");
        print FH "STEP: activate CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFU for line $list_dn[1] - PASS\n";
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

    # C calls B and hear busy tone
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$list_dn[1]\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and hear busy tone");
        print FH "STEP: C calls B and hear busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and hear busy tone - PASS\n";
    }

################################## Cleanup 028 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 028 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DTM|CFU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DTM', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DTM from line $list_dn[0]");
            print FH "STEP: Remove DTM from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DTM from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFU from line $list_dn[1]");
            print FH "STEP: Remove CFU from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFU from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_029 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_029");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_029";
    $tcid = "ADQ767_029";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_g6_pri'}{-acc};
    my $trunk_region = $db_trunk{'t15_g6_pri'}{-region};
    my $trunk_clli = $db_trunk{'t15_g6_pri'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineAB = 0;
    my $add_feature_lineBC = 0;
    my $cpu_code = 45;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CPU/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cpu_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SIMRING to line A and B
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[0] $list_dn[1] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[0]");
    unless ((grep /Member DN 1 .* $list_dn[1]/, @output) and (grep /Pilot DN: .* $list_dn[0]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[0] and $list_dn[1]");
		print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - PASS\n";
    }
    $add_feature_lineAB = 1;

# Add CPU to line B and C
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("est \$ CPU $list_len[1] $list_len[2] \$ y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot add CPU for line $list_dn[1] and $list_dn[2]");
        $ses_core->execCmd("abort");
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[1]")) {
        print FH "STEP: add CPU for line $list_dn[1] - FAIL\n";
        $result = 0;
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[2]")) {
        print FH "STEP: add CPU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CPU for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
    $add_feature_lineBC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# D calls A and D hear ringback tone
    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[0],
                -dialed_number => $dialed_num,
                -regionA => $list_region[3],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and D hear ringback tone");
        print FH "STEP: D calls A and D hear ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and D hear ringback tone - PASS\n";
    }

# A and B rings
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }

# C dials CPU code
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    # $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);

    $dialed_num = '*' . $cpu_code . '#';
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
    #     $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
    #     print FH "STEP: C hear confirmation tone - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: C hear confirmation tone - PASS\n";
    # }

# A and B stop ringing, check speech path C and D
    unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL after C pick up the call");
        print FH "STEP: A stops ringing after C pick up the call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A stops ringing after C pick up the call - PASS\n";
    }
    unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[1])) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] is not IDL after C pick up the call");
        print FH "STEP: B stops ringing after C pick up the call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B stops ringing after C pick up the call - PASS\n";
    }
    %input = (
                -list_port => [$list_line[3],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between D and C");
        print FH "STEP: Check speech path between D and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and C - PASS\n";
    }

################################## Cleanup 029 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 029 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SIMRING|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A, B and C
    if ($add_feature_lineAB) {
        foreach ($list_dn[0],$list_dn[1]) {
            unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $_");
                print FH "STEP: Remove SIMRING from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove SIMRING from line $_ - PASS\n";
            }
        }
    }
    if ($add_feature_lineBC) {
        foreach ($list_dn[1],$list_dn[2]) {
            unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $_");
                print FH "STEP: Remove CPU from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove CPU from line $_ - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_030 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_030");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_030";
    $tcid = "ADQ767_030";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add WML to line A
    unless ($ses_core->callFeature(-featureName => "WML Y Y $list_dn[1] 20", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add WML for line $list_dn[0]");
		print FH "STEP: add WML for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add WML for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    sleep(20); # Wait for WML timeout

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 030 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 030 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /WML/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'WML', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove WML from line $list_dn[0]");
            print FH "STEP: Remove WML from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove WML from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_031 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_031");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_031";
    $tcid = "ADQ767_031";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineAB = 0;
    my $add_feature_lineC = 0;
    my $rag_code = 86;
    my $dialed_num;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $rag_code")) {
        @output = $ses_core->execCmd("add FEATXLA $rag_code FEAT N N RAG");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $rag_code FEAT N N RAG");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /RAG/, $ses_core->execCmd("pos FEATXLA $rag_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $rag_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $rag_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $rag_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SIMRING to line A and B, Add RAG to line C
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[0] $list_dn[1] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[0]");
    unless ((grep /Member DN 1 .* $list_dn[1]/, @output) and (grep /Pilot DN: .* $list_dn[0]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[0] and $list_dn[1]");
		print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - PASS\n";
    }
    $add_feature_lineAB = 1;

    unless ($ses_core->callFeature(-featureName => "RAG", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add RAG for line $list_dn[2]");
		print FH "STEP: add RAG for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add RAG for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# Offhook line A and B for busy
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

# C dials SIMRING pilot DN(A), C hears busy tone then flash
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => "$list_dn[0]\#",
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials SIMRING pilot DN(A), C hears busy tone then flash");
        print FH "STEP: C dials SIMRING pilot DN(A), C hears busy tone then flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials SIMRING pilot DN(A), C hears busy tone then flash - PASS\n";
    }

# C dials RAG code and hear confirmation tone then onhook
    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear recall dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);

    $dialed_num = '*' . $rag_code;
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear confirmation tone - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line[0..1]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# C rings and offhook, then both A and B ring
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C does not ring");
        print FH "STEP: Check line C ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ring - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
    sleep(3);

    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ring - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

################################## Cleanup 031 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 031 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /RAG|SIMRING/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A, B and C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'RAG', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove RAG from line $list_dn[2]");
            print FH "STEP: Remove RAG from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove RAG from line $list_dn[2] - PASS\n";
        }
    }
    if ($add_feature_lineAB) {
        foreach ($list_dn[0],$list_dn[1]) {
            unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $_");
                print FH "STEP: Remove SIMRING from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove SIMRING from line $_ - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);

}

sub ADQ767_032 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_032");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_032";
    $tcid = "ADQ767_032";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineAB = 0;
    my $dialed_num;
    my $cpu_code = 45;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CPU/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cpu_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add 3WC to line A, add CPU group for line A and B
    unless ($ses_core->callFeature(-featureName => "3WC", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add 3WC for line $list_dn[0]");
		print FH "STEP: add 3WC for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add 3WC for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("est \$ CPU $list_len[0] $list_len[1] \$ y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot add CPU for line $list_dn[0] and $list_dn[1]");
        $ses_core->execCmd("abort");
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[0]")) {
        print FH "STEP: add CPU for line $list_dn[0] - FAIL\n";
        $result = 0;
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[1]")) {
        print FH "STEP: add CPU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CPU for line $list_dn[0] and $list_dn[1] - PASS\n";
    }
    $add_feature_lineAB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# D calls B and hear Ringback, B hear ringing
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[3],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls B and hear Ringback, B hear ringing");
        print FH "STEP: D calls B and hear Ringback, B hear ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls B and hear Ringback, B hear ringing - PASS\n";
    }

# A flash and dials CPU code and check speech path A and D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cpu_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path A and D
    %input = (
                -list_port => [$list_line[0],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and D");
        print FH "STEP: Check speech path between A and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and D - PASS\n";
    }

# A flash then check speech path among A, C and D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, C and D");
        print FH "STEP: Check speech path among A, C and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, C and D - PASS\n";
    }

# A flash and D is forceout from conference
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    unless($ses_glcas->sendTestToneCAS(-line_port => $list_line[0], -test_tone_duration => 1000, -wait_for_event_time => $wait_for_event_time)){
        $logger->error(__PACKAGE__ . ": A cannot send test tone");
    }
    
    unless($ses_glcas->detectNoTestToneCAS(-line_port => $list_line[3], -cas_timeout => 20000, -wait_for_event_time => $wait_for_event_time)){
        $logger->error(__PACKAGE__ . ": D can receive test tone from A");
        print FH "STEP: D is forced out from the conference call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D is forced out from the conference call - PASS\n";
    }

# Check speech path between A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }
    
################################## Cleanup 032 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 032 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /3WC|CPU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => '3WC', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove 3WC from line $list_dn[0]");
            print FH "STEP: Remove 3WC from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove 3WC from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineAB) {
        foreach ($list_dn[0],$list_dn[1]) {
            unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $_");
                print FH "STEP: Remove CPU from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove CPU from line $_ - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_033 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_033");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_033";
    $tcid = "ADQ767_033";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $cnab_code = 68;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnab_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnab_code FEAT N N CNAB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnab_code FEAT N N CNAB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CNAB/, $ses_core->execCmd("pos FEATXLA $cnab_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnab_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnab_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnab_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add NAME and CNAB to line A, add ACRJ and CNAMD to line B
    foreach ('NAME PUBLIC ABC PRIVATE ABC','CNAB') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

    foreach ('ACRJ ACT','CNAMD NOAMA') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials CNAB code and hear confirmation tone then recall dial tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$cnab_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B and receive ACRJ treatment on logutil
    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Stop Logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless ((grep /TREATMENT SET = ACRJ .* CALLED NO .* $list_dn[1]/, @cat) and (grep /DN $list_dn[0]/, @cat)) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check ACRJ treatment in logutil");
            print FH "STEP: Check ACRJ treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check ACRJ treatment in logutil - PASS\n";
        }

        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNAB|ACRJ|CNAMD|NAME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

################################## Cleanup 033 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 033 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Remove service from line B and A
    if ($add_feature_lineB) {
        foreach ('ACRJ','CNAMD') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }
    if ($add_feature_lineA) {
        foreach ('CNAB','NAME') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_034 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_034");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_034";
    $tcid = "ADQ767_034";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add CWT, CWI to line B and C
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[2]");
            print FH "STEP: add $_ for line $list_dn[2] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[2] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# C calls B and check speech path
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and check speech path");
        print FH "STEP: C calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and check speech path - PASS\n";
    }

# A calls C and hear ringback tone, C hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[2];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check CWT tone line C
    %input = (
                -line_port => $list_line[2],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C hears Call waiting tone");
        print FH "STEP: C hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

# C flash to answer A
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash - PASS\n";
    }
    sleep(2);

# Check speech path A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# D calls B and hear ringback tone, B hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }

    %input = (
                -line_port => $list_line[3],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[3]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[3],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: D dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D dials $dialed_num - PASS\n";
    }

    # Check CWT tone line B
    %input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B hears Call waiting tone");
        print FH "STEP: B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line D
    %input = (
                -line_port => $list_line[3],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[3]");
        print FH "STEP: D hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D hears ringback tone - PASS\n";
    }

# B flash to answer D
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }
    sleep(2);

# Check speech path B and D
    %input = (
                -list_port => [$list_line[1],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between B and D");
        print FH "STEP: Check speech path between B and D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and D - PASS\n";
    }
    sleep(2);

# A, D and B go onhook, check speech path B and C
    foreach ($list_line[0], $list_line[3], $list_line[1]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
        sleep(5);
    }

    # %input = (
    #             -line_port => $list_line[1], 
    #             -flash_duration => 600,
    #             -wait_for_event_time => $wait_for_event_time
    #          ); 
    # unless($ses_glcas->flashWithDurationCAS(%input)) {
    #     $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
    #     print FH "STEP: B Flash - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: B Flash - PASS\n";
    # }
    # sleep(2);

    # %input = (
    #             -line_port => $list_line[2], 
    #             -flash_duration => 600,
    #             -wait_for_event_time => $wait_for_event_time
    #          ); 
    # unless($ses_glcas->flashWithDurationCAS(%input)) {
    #     $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
    #     print FH "STEP: C Flash - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: C Flash - PASS\n";
    # }
    # sleep(2);

    # Check line B re-ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not rering");
        print FH "STEP: Check line B rering - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B rering - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASS\n";
    }

# B and C go onhook
    foreach ($list_line[1], $list_line[2]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

################################## Cleanup 034 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 034 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }
    if ($add_feature_lineC) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[2]");
                print FH "STEP: Remove $_ from line $list_dn[2] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[2] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_035 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_035");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_035";
    $tcid = "ADQ767_035";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCBI to line B and DCBX to line C
    unless ($ses_core->callFeature(-featureName => "DCBI", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBI for line $list_dn[1]");
		print FH "STEP: add DCBI for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBI for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    unless ($ses_core->callFeature(-featureName => "DCBX", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBX for line $list_dn[2]");
		print FH "STEP: add DCBX for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBX for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# B receives NACK treatment on logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = NACK .* CALLED NO .* $dialed_num/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check NACK treatment in logutil");
            print FH "STEP: Check NACK treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check NACK treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# Hang up all lines
    foreach (@list_line) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(5);

# Remove DCBX option on line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCBX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBX from line $list_dn[2]");
            print FH "STEP: Remove DCBX from line $list_dn[2] - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Remove DCBX from line $list_dn[2] - PASS\n";
        }
        $add_feature_lineC = 0;
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 035 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 035 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCBI|DCBX/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DCBI', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBI from line $list_dn[1]");
            print FH "STEP: Remove DCBI from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBI from line $list_dn[1] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCBX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBX from line $list_dn[2]");
            print FH "STEP: Remove DCBX from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBX from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_036 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_036");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_036";
    $tcid = "ADQ767_036";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCPU to line B and DCPX to line C
    unless ($ses_core->callFeature(-featureName => "DCPU", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCPU for line $list_dn[1]");
		print FH "STEP: add DCPU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCPU for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    unless ($ses_core->callFeature(-featureName => "DCPX", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCPX for line $list_dn[2]");
		print FH "STEP: add DCPX for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCPX for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls C hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C hear ringback and C hears ringing");
        print FH "STEP: A calls C hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C hear ringback and C hears ringing - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# B receives NACK treatment on logutil
    if ($logutil_start) {
        sleep(5);
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = NACK .* CALLED NO .* $dialed_num/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check NACK treatment in logutil");
            print FH "STEP: Check NACK treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check NACK treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# Hang up line A and B
    foreach (@list_line[0..1]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(5);

# Remove DCPX option on line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCPX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPX from line $list_dn[2]");
            print FH "STEP: Remove DCPX from line $list_dn[2] - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Remove DCPX from line $list_dn[2] - PASS\n";
        }
        $add_feature_lineC = 0;
    }

# A calls C hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C hear ringback and C hears ringing");
        print FH "STEP: A calls C hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C hear ringback and C hears ringing - PASS\n";
    }

# B dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
        print FH "STEP: B hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        print FH "STEP: B hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[1],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 036 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 036 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCPU|DCPX/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B and C
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DCPU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPU from line $list_dn[1]");
            print FH "STEP: Remove DCPU from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DCPU from line $list_dn[1] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'DCPX', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCPX from line $list_dn[2]");
            print FH "STEP: Remove DCPX from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove DCPX from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_037 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_037");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_037";
    $tcid = "ADQ767_037";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_sipt'}{-acc};
    my $trunk_region = $db_trunk{'t15_sipt'}{-region};
    my $trunk_clli = $db_trunk{'t15_sipt'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $disa_num = 2124405555;
    my $authen_code = 123;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table DNROUTE and AUTHCDE for DISA call
    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table DNROUTE")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'table DNROUTE'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    $disa_num =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $1 $2 $3")) {
        $ses_core->execCmd("add $1 $2 $3 FEAT DISA NY_PUB 0 Y Y Y N \+");
        if (grep /ERROR/, $ses_core->execCmd("TIMEOPT 10 TMTOPT 3 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple '$1 $2 $3'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        $ses_core->execCmd("rep $1 $2 $3 FEAT DISA NY_PUB 0 Y Y Y N \+");
        if (grep /ERROR/, $ses_core->execCmd("TIMEOPT 10 TMTOPT 3 \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple '$1 $2 $3'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }

    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /DISA NY_PUB/, $ses_core->execCmd("pos $1 $2 $3")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill DISA number in table DNROUTE");
        print FH "STEP: Check DISA number in table DNROUTE - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check DISA number in table DNROUTE - PASS\n";
    }


    if (grep /UNKNOWN TABLE/, $ses_core->execCmd("table AUTHCDE")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'table AUTHCDE'");
    }
    unless ($ses_core->execCmd("rwok on")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'rwok on'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos NY_PUB $authen_code")) {
        if (grep /ERROR/, $ses_core->execCmd("add NY_PUB $authen_code IBN 0 N \$ SW \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when adding tuple 'NY_PUB $authen_code'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    } else {
        if (grep /ERROR/, $ses_core->execCmd("rep NY_PUB $authen_code IBN 0 N \$ SW \$")) {
            $logger->error(__PACKAGE__ . " $tcid: ERROR when changing tuple 'NY_PUB $authen_code'");
        } else {
            if (grep /Y TO CONFIRM/, $ses_core->execCmd("Y")) {
                $ses_core->execCmd("Y");
            }
        }
    }

    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /NY_PUB .* $authen_code/, $ses_core->execCmd("pos NY_PUB $authen_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill authen code in table AUTHCDE");
        print FH "STEP: Check authen code in table AUTHCDE - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check authen code in table AUTHCDE - PASS\n";
    }

    unless ($ses_core->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit all'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# Get current used port of PKTMA and ANNC
    my ($pktma, $annc);
    $ses_core->execCmd("mapci nodisp;mtc;pm;post gwc 22");
    @output = $ses_core->execCmd("listres");
    foreach ( @output) {
        if (/PKT Media Anchor\s+\w+\s+.\s+.\s+(\d+)/) {
            $pktma = $1;
        }
        if (/PKTMA REQD\s+\w+\s+.\s+.\s+(\d+)/) {
            $annc = $1;
        }
    }
    $logger->debug(__PACKAGE__ . " $tcid: PKT = $pktma, ANNC = $annc");

# A dials DISA via SST trunk the hear confirmation tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    ($dialed_num) = ($disa_num =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A dials authen code then A hear recall dial tone
    $dialed_num = $authen_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

# A calls B and hear ringback tone, B hear ringing
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and hear ringback tone, B hear ringing");
        print FH "STEP: A calls B and hear ringback tone, B hear ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and hear ringback tone, B hear ringing - PASS\n";
    }

# Check 3 PKTMA ports and one ANNC port are used in MAPCI
    # $ses_core->execCmd("mapci nodisp;mtc;pm;post gwc 22");
    @output = $ses_core->execCmd("listres");
    foreach ( @output) {
        if (/PKT Media Anchor\s+\w+\s+.\s+.\s+(\d+)/) {
            $pktma = $1 - $pktma;
        }
        if (/PKTMA REQD\s+\w+\s+.\s+.\s+(\d+)/) {
            $annc = $1 - $annc;
        }
    }
    $logger->debug(__PACKAGE__ . " $tcid: PKT = $pktma, ANNC = $annc");
    unless (($pktma == 3) and ($annc == 1)) {
        $logger->error(__PACKAGE__ . ": 3 PKTMA ports and one ANNC port are not used in MAPCI");
        print FH "STEP: Check 3 PKTMA ports and one ANNC port are used in MAPCI - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check 3 PKTMA ports and one ANNC port are used in MAPCI - PASS\n";
    }
    unless ($ses_core->execCmd("quit all")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit all'");
    }

# B answer then check speech path between A and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
   
################################## Cleanup 037 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 037 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DISA/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_038 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_038");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_038";
    $tcid = "ADQ767_038";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dlh_added = 0;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add DLH group: A is pilot, B is member; Add LOD to line A
    # Out line A and B
    for (my $i = 0; $i < 2; $i++){
        %input = (
                    -function => ['OUT'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => 'ANA', 
                    -len => $list_len[$i], 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot OUT");
            print FH "STEP: OUT line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: OUT line $list_dn[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

    # Add DLH group and add LOD for line A
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ DLH $list_dn[0] $list_line_info[0] \+");
    unless ($ses_core->execCmd("$list_len[0] $list_len[1] \$ DGT \$ 6 y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
    unless (grep /$list_len[1]/, $ses_core->execCmd("qdn $list_dn[0]")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group DLH for line $list_dn[0] and $list_dn[1]");
		print FH "STEP: create group DLH for line $list_dn[0] and $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group DLH for line $list_dn[0] and $list_dn[1] - PASS\n";
    }

    unless($ses_core->execCmd("ADO \$ $list_len[0] LOD $list_dn[2] \$ Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'ado'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }
    unless (grep /LOD $list_dn[2]/, $ses_core->execCmd("qdn $list_dn[0]")) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LOD for line $list_dn[0]");
		print FH "STEP: add LOD for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LOD for line $list_dn[0] - PASS\n";
    }
    $dlh_added = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    # A and B go offhook for busy
    foreach ($list_line[0], $list_line[1]) {
        unless($ses_glcas->offhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot offhook line $_");
            print FH "STEP: Offhook line $_ - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Offhook line $_ - PASS\n";
        }
    }
    # D calls A and the call is routed to C
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and the call is routed to C");
        print FH "STEP: D calls A and the call is routed to C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and the call is routed to C - PASS\n";
    }

################################## Cleanup 038 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 038 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DLH|LOD/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    if ($dlh_added) {
        unless ($ses_core->execCmd("servord")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
        }
        unless ($ses_core->execCmd("DEL \$ DLH $list_len[1] \$ Y Y")){
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'DEL'");
        }
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
        }
        unless ($ses_core->execCmd("OUT \$ $list_dn[0] $list_len[0] BLDN Y Y Y")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'DEL'");
        }
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
        }
        # NEW line A and B
        for (my $i = 0; $i < 2; $i++){
            %input = (
                        -function => ['NEW'], 
                        -lineDN => $list_dn[$i], 
                        -lineType => 'ANA', 
                        -len => $list_len[$i], 
                        -lineInfo => $list_line_info[$i]
                    );
            unless ($ses_core->resetLine(%input)) {
                $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot NEW");
                print FH "STEP: NEW line $list_dn[$i] - FAIL\n";
                $result = 0;
            } else {
                print FH "STEP: NEW line $list_dn[$i] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_039 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_039");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_039";
    $tcid = "ADQ767_039";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $acb_code = 62;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $acb_code")) {
        @output = $ses_core->execCmd("add FEATXLA $acb_code FEAT N Y ACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $acb_code FEAT N Y ACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /ACBA/, $ses_core->execCmd("pos FEATXLA $acb_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $acb_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $acb_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $acb_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add ACB to line A
    unless ($ses_core->callFeature(-featureName => "ACB NOAMA", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add ACB for line $list_dn[0]");
		print FH "STEP: add ACB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add ACB for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Add DRCW to line B
    unless ($ses_core->callFeature(-featureName => "DRCW NOAMA ACT $list_dn[0] 3 \$", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DRCW for line $list_dn[1]");
		print FH "STEP: add DRCW for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DRCW for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }
# B calls C and they have speech path
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls C and they have speech path");
        print FH "STEP: B calls C and they have speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C and they have speech path - PASS\n";
    }

# A calls B and hears BUSY tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and hears BUSY tone");
        print FH "STEP: A calls B and hears BUSY tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and hears BUSY tone - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line $list_line[0] - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line $list_line[0] - PASS\n";
    }
    sleep(2);

# line A activate ACB then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$acb_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: Activate ACB for line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Activate ACB for line A - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line $list_line[0] - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line $list_line[0] - PASS\n";
    }
    sleep(3);

# Hang up line B and C
    foreach (@list_line[1..2]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(10);

# Check line A ringing and offhook
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring after B back to IDL");
        print FH "STEP: Check line A ringing after B back to IDL - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing after B back to IDL - PASS\n";
    }
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

# Check line B ringing and offhook
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B- PASS\n";
    }

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 039 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 039 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /ACB|DRCW/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'ACB', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove ACB from line $list_dn[0]");
            print FH "STEP: Remove ACB from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove ACB from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'DRCW', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DRCW from line $list_dn[1]");
            print FH "STEP: Remove DRCW from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove DRCW from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_040 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_040");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_040";
    $tcid = "ADQ767_040";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_g6_pri'}{-acc};
    my $trunk_region = $db_trunk{'t15_g6_pri'}{-region};
    my $trunk_clli = $db_trunk{'t15_g6_pri'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $prkr_code = 76;
    my $prks_code = 77;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    foreach ("FEATXLA $prkr_code FEAT N N PRKR","FEATXLA $prks_code FEAT N N PRKS") {
        if (grep /NOT FOUND/, $ses_core->execCmd("pos $_")) {
            @output = $ses_core->execCmd($_);
            if (grep/DMOS NOT ALLOWED/, @output) {
                $ses_core->execCmd("y");
            }
            $ses_core->execCmd("y");
            unless ($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
            }
        } else {
            @output = $ses_core->execCmd($_);
            if (grep/DMOS NOT ALLOWED/, @output) {
                $ses_core->execCmd("y");
            }
            $ses_core->execCmd("y");
            unless ($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
            }
        }
    }
    unless (grep /PRKR/, $ses_core->execCmd("pos FEATXLA $prkr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $prkr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $prkr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $prkr_code in table IBNXLA - PASS\n";
    }

    unless (grep /PRKS/, $ses_core->execCmd("pos FEATXLA $prks_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $prks_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $prks_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $prks_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add PRK to line A and C
    unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[0]");
		print FH "STEP: add PRK for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "PRK", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add PRK for line $list_dn[2]");
		print FH "STEP: add PRK for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add PRK for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls A via G6 ISUP and check speech path
    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $dialed_num,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls A via G6 ISUP and check speech path");
        print FH "STEP: B calls A via G6 ISUP and check speech path then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls A via G6 ISUP and check speech path then A flash - PASS\n";
    }

# A dials PRKS code and onhook
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$prks_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: line A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: line A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear confirmation tone - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# line C dials PRKR code + 7 digit DN A
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);

    $dialed_num = '*' . $prkr_code;
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
        print FH "STEP: C hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

# Check speech path line B and C
    %input = (
                -list_port => [$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between B and C");
        print FH "STEP: Check speech path between B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between B and C - PASS\n";
    }

################################## Cleanup 040 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 040 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /PARK/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and C
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[2]");
            print FH "STEP: Remove PRK from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_041 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_041");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_041";
    $tcid = "ADQ767_041";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $lnr_code = 37;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        @output = $ses_core->execCmd("add FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /LNR/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $lnr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add LNR to line A
    unless ($ses_core->callFeature(-featureName => "LNR", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LNR for line $list_dn[0]");
		print FH "STEP: add LNR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LNR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    # A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

    # Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

    # A dial LNR code and check speech path with B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "\*$lnr_code\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dial LNR code and check speech path with B");
        print FH "STEP: A dial LNR code and check speech path with B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dial LNR code and check speech path with B - PASS\n";
    }

################################## Cleanup 041 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 041 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /LNR/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'PRK', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove PRK from line $list_dn[0]");
            print FH "STEP: Remove PRK from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove PRK from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_042 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_042");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_042";
    $tcid = "ADQ767_042";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineC = 0;
    my $dialed_num;
    my $ebo_code = 424;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $ebo_code")) {
        @output = $ses_core->execCmd("add FEATXLA $ebo_code FEAT N N EBO");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $ebo_code FEAT N N EBO");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /EBO/, $ses_core->execCmd("pos FEATXLA $ebo_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $ebo_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $ebo_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $ebo_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add EBO to line C
    unless ($ses_core->callFeature(-featureName => "EBO", -dialNumber => $list_dn[2], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add EBO for line $list_dn[2]");
		print FH "STEP: add EBO for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add EBO for line $list_dn[2] - PASS\n";
    }
    $add_feature_lineC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }
# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C make call to B and hear busy treatment
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and hears BUSY tone");
        print FH "STEP: C calls B and hears BUSY tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and hears BUSY tone - PASS\n";
    }
    sleep(5);

    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = BUSY .* CALLED NO .* $list_dn[1]/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
            print FH "STEP: Check busy treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check busy treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

# C flashes and dials EBO code
    %input = (
                -line_port => $list_line[2], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[2]");
        print FH "STEP: C Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $ebo_code;
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $ebo_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $ebo_code - PASS\n";
    }
    sleep(8);

# Check speech path among A B C
    %input = (
                -list_port => [@list_line], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path among A B C");
        print FH "STEP: Check speech path among A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A B C - PASS\n";
    }

################################## Cleanup 042 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 042 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /EBO/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line C
    if ($add_feature_lineC) {
        unless ($ses_core->callFeature(-featureName => 'EBO', -dialNumber => $list_dn[2], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove EBO from line $list_dn[2]");
            print FH "STEP: Remove EBO from line $list_dn[2] - FAIL\n";
        } else {
            print FH "STEP: Remove EBO from line $list_dn[2] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_043 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_043");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_043";
    $tcid = "ADQ767_043";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $sdn_code = 97;
    my $sdn_num = 2124418765;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sdn_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sdn_code FEAT N N SDNID");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sdn_code FEAT N N SDNID");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SDNID/, $ses_core->execCmd("pos FEATXLA $sdn_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sdn_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sdn_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sdn_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SDN to line A
    unless ($ses_core->callFeature(-featureName => "SDN $sdn_num 2 E \$", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SDN for line $list_dn[0]");
		print FH "STEP: add SDN for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SDN for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls SDN number and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => $sdn_num,
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B calls SDN number and check speech path between A and B");
        print FH "STEP: B calls SDN number and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls SDN number and check speech path between A and B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials SDN code + 4 last digits of SDN number then A hear recall dial tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    ($dialed_num) = ($sdn_num =~ /\d{6}(\d+)/);
    $dialed_num = "\*$sdn_code" . $dialed_num;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

################################## Cleanup 043 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 043 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /ESDN/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
        @output = $ses_logutil->execCmd("open amab;back all");
        unless ((grep /CALLING DN .* $sdn_num/, @output) and (grep /ORIG AGENT .* DN $sdn_num/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see AMAB of SDN number");
            $result = 0;
            print FH "STEP: Check AMAB of SDN number - FAIL\n";
        } else {
            print FH "STEP: Check AMAB of SDN number - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SDN $sdn_num", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SDN from line $list_dn[0]");
            print FH "STEP: Remove SDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SDN from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_044 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_044");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_044";
    $tcid = "ADQ767_044";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $sacba_code = 55;
    my $sacbd_code = 56;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sacba_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sacba_code FEAT N N SACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sacba_code FEAT N N SACBA");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SACBA/, $ses_core->execCmd("pos FEATXLA $sacba_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sacba_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sacba_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sacba_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $sacbd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $sacbd_code FEAT N N SACBD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $sacbd_code FEAT N N SACBD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SACBD/, $ses_core->execCmd("pos FEATXLA $sacbd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $sacbd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $sacbd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $sacbd_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill table CUSTSTN
    unless (grep /CUSTSTN/, $ses_core->execCmd("table CUSTSTN")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table CUSTSTN'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp SPP")) {
        @output = $ses_core->execCmd("add $cust_grp SPP SPP 3");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp SPP SPP 3");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /$cust_grp SPP SPP 3/, $ses_core->execCmd("pos $cust_grp SPP")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp SPP in table CUSTSTN");
        print FH "STEP: Datafill $cust_grp SPP in table CUSTSTN - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp SPP in table CUSTSTN - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SACB to line A
    unless ($ses_core->callFeature(-featureName => "SACB INACT ALL 9999 N", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SACB for line $list_dn[0]");
		print FH "STEP: add SACB for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SACB for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SACBA code then dials 9999# and onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $sacba_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    $dialed_num = '9999#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(5); # sleep for announcement

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# A dials DN(B) then dials 9999# and A can talk with B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => '9999#',
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials 9999# and A can talk with B");
        print FH "STEP: A dials 9999# and A can talk with B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials 9999# and A can talk with B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials DN(B) then dials wrong pin, B does not ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = "$list_dn[1]\#";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    foreach ('9888#','9777#','9666#') {
        $dialed_num = $_;
        %input = (
                    -line_port => $list_line[0],
                    -dialed_number => $dialed_num,
                    -digit_on => 300,
                    -digit_off => 300,
                    -wait_for_event_time => $wait_for_event_time
                    ); 
        unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
            $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
            print FH "STEP: A dials $dialed_num - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: A dials $dialed_num - PASS\n";
        }
        sleep(2); # sleep for announcement

        # Check line B not ring
        %input = (
                    -line_port => $list_line[1],
                    -ring_count => 1,
                    -ring_on => 0,
                    -ring_off => 0,
                    -cas_timeout => 20000,
                    -wait_for_event_time => 15,
                    );
        if ($ses_glcas->detectRingingSignalCAS(%input)) {
            $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A offhook");
            print FH "STEP: Check line B not ringing - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check line B not ringing - PASS\n";
        }
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SACBD code then dials 9999# and onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $sacbd_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    $dialed_num = '9999#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3); # sleep for announcement

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# A calls B and check speech path between A and B
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at  A calls B and check speech path between A and B");
        print FH "STEP:  A calls B and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP:  A calls B and check speech path between A and B - PASS\n";
    }
################################## Cleanup 044 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 044 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SACB/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SACB", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SACB from line $list_dn[0]");
            print FH "STEP: Remove SACB from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SACB from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);

}

sub ADQ767_045 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_045");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_045";
    $tcid = "ADQ767_045";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scs_code = 69;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scs_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scs_code FEAT N N SCPS");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scs_code FEAT N N SCPS");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPS/, $ses_core->execCmd("pos FEATXLA $scs_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scs_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scs_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scs_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCS to line A
    unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCS for line $list_dn[0]");
		print FH "STEP: add SCS for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SCS for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCS code + N + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scs_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '8' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + N and check speech path between line A and B
    $dialed_num = "\*$spdc_code" . '8';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + N and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + N and check speech path between line A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + N and check speech path between line A and B - PASS\n";
    }

################################## Cleanup 045 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 045 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCS/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SCS", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCS from line $list_dn[0]");
            print FH "STEP: Remove SCS from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SCS from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_046 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_046");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_046";
    $tcid = "ADQ767_046";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scl_code = 28;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPL/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scl_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCL to line A
    unless ($ses_core->callFeature(-featureName => "SCL L30", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add SCL for line $list_dn[0]");
		print FH "STEP: add SCL for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add SCL for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCS code + NN + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scl_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '11' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + NN and check speech path between line A and B
    $dialed_num = "\*$spdc_code" . '11';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + NN and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B - PASS\n";
    }

################################## Cleanup 046 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 046 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCL/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => "SCL", -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SCL from line $list_dn[0]");
            print FH "STEP: Remove SCL from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove SCL from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_047 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_047");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_047";
    $tcid = "ADQ767_047";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $scl_code = 28;
    my $spdc_code = 18;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        @output = $ses_core->execCmd("add FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $scl_code FEAT N N SCPL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SCPL/, $ses_core->execCmd("pos FEATXLA $scl_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $scl_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $scl_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        @output = $ses_core->execCmd("add FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $spdc_code FTR 2 SPDC");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /SPDC/, $ses_core->execCmd("pos FEATXLA $spdc_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $spdc_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $spdc_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SCL and 3WC to line A
    foreach ("SCL L30","3WC") {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials SCS code + NN + DN (B) and hear confirmation tone then onhook
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$scl_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $list_dn[1] =~ /\d{3}(\d+)/;
    $dialed_num = '22' . $1;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    sleep(3);
    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_line[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(3);

# A dials SPDC code + NN and check speech path between line A and B then A flash
    $dialed_num = "\*$spdc_code" . '22';
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $dialed_num,
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials SPDC code + NN and check speech path between line A and B");
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials SPDC code + NN and check speech path between line A and B then A flash - PASS\n";
    }

# A dials DN (C) then A flash
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 8','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials DN(C), C rings then A flash");
        print FH "STEP: A dials DN(C), C rings then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials DN(C), C rings then A flash - PASS\n";
    }

# A & B can hear ringback tone during talk with each other.
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[1]");
        print FH "STEP: B hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears ringback tone - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A and B can talk to each other during hearing Ringback from C");
        print FH "STEP: A and B can talk to each other during hearing Ringback from C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A and B can talk to each other during hearing Ringback from C - PASS\n";
    }

# C offhook and check speech path among A, B, C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }
    sleep(2);
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 047 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 047 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /SCL|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ("3WC","SCL") {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_048 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_048");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_048";
    $tcid = "ADQ767_048";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $lnr_code = 37;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        @output = $ses_core->execCmd("add FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $lnr_code FEAT N Y LNR");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /LNR/, $ses_core->execCmd("pos FEATXLA $lnr_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $lnr_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $lnr_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add LNR to line A, add CFD to line B
    unless ($ses_core->callFeature(-featureName => "LNR", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add LNR for line $list_dn[0]");
		print FH "STEP: add LNR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add LNR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFD N $list_dn[2]", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[1]");
		print FH "STEP: add CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# A dials LNR code and B rings
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $dialed_num = '*' . $lnr_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    # Check line B ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A dials LNR code");
        print FH "STEP: Check line B ringing after A dials LNR code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing after A dials LNR code - PASS\n";
    }

# Wait for timeout, C ring and check speech path
    sleep(12);
    # Check line C ring
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C does not ring after CFD timeout");
        print FH "STEP: Check line C ringing after CFD timeout - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C ringing after CFD timeout - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

################################## Cleanup 048 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 048 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /LNR|CFD/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'LNR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove LNR from line $list_dn[0]");
            print FH "STEP: Remove LNR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove LNR from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[1]");
            print FH "STEP: Remove CFD from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result); 
}

sub ADQ767_049 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_049");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_049";
    $tcid = "ADQ767_049";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $ccw_code = 50;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $ccw_code")) {
        @output = $ses_core->execCmd("add FEATXLA $ccw_code FEAT N N CCW");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $ccw_code FEAT N N CCW");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CCW/, $ses_core->execCmd("pos FEATXLA $ccw_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $ccw_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $ccw_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $ccw_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI and CHD to line A
    foreach ('3WC','CWT','CCW') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path then flash A
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path then flash A");
        print FH "STEP: A calls B and check speech path then flash A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path then flash A - PASS\n";
    }

# A dials CCW code and hear confirmation tone
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = "\*$ccw_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hears confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears confirmation tone - PASS\n";
    }

# A flash and call C then check speech path then flash A again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path then A flash");
        print FH "STEP: A calls C and check speech path then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path then A flash - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# Onhook C and check speech path A and B
    unless($ses_glcas->onhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[2]");
        print FH "STEP: Onhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line C - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B");
        print FH "STEP: Check speech path among A, B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B - PASS\n";
    }

# C offhook and calls A and receive busy treatment 
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[0],
                -dialed_number => "$list_dn[0]\#",
                -regionA => $list_region[2],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls A");
        print FH "STEP: C calls A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls A - PASS\n";
    }

    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        $logutil_start = 0;

        $logutil_path = $ses_logutil->{sessionLog2};
        @cat = `cat $logutil_path`;
        # $logger->error(__PACKAGE__ . " $tcid: ".Dumper(\@cat));
        unless (grep /TREATMENT SET = BUSY .* CALLED NO .* $list_dn[0]/, @cat) {
            $logger->error(__PACKAGE__ . " $tcid: Fail to check busy treatment in logutil");
            print FH "STEP: Check busy treatment in logutil - FAIL\n";
            $result = 0;
            goto CLEANUP;
        } else {
            print FH "STEP: Check busy treatment in logutil - PASS\n";
        }

        $ses_logutil->{conn}->cmd("start");
        unless ($ses_logutil->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
            $logger->error(__PACKAGE__ . " $tcid: fail to start logutil again");
        } else {
            $logutil_start = 1;
        }
    }

################################## Cleanup 049 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 049 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CCW|3WC|CWT/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('CCW','CWT','3WC') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_050 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_050");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_050";
    $tcid = "ADQ767_050";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineA = 0;
    my $cnf_code = 30;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CONF/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnf_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CNF to line A
    unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[0]");
		print FH "STEP: add CNF for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path then flash A
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path then flash A");
        print FH "STEP: A calls B and check speech path then flash A - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path then flash A - PASS\n";
    }

# A dials CNF code and check speech path A and B again
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B");
        print FH "STEP: Check speech path between A, B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B - PASS\n";
    }

# A flash and call C then check speech path then flash A again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['NONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and C answer then A flash");
        print FH "STEP: A calls C and C answer then A flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and C answer then A flash - PASS\n";
    }

# A dials CNF code and check speech path among A, B and C
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B and C");
        print FH "STEP: Check speech path between A, B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B and C - PASS\n";
    }

# Offhook D for busy, A flash and call D then hear busy tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[3], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[3]");
        print FH "STEP: Offhook line D - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line D - PASS\n";
    }
    sleep(2);

    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = $list_dn[3];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0]
                -busy_tone_duration => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless ($ses_glcas->detectBusyToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect busy tone line $list_dn[0]");
        print FH "STEP: A hears busy tone - FAIL\n";
    } else {
        print FH "STEP: A hears busy tone - PASS\n";
    }

# A flash and check speech path among A, B and C again
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$cnf_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    %input = (
                -list_port => [$list_line[1],$list_line[2],$list_line[0]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A, B and C");
        print FH "STEP: Check speech path between A, B and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A, B and C - PASS\n";
    }

################################## Cleanup 050 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 050 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNF/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[0]");
            print FH "STEP: Remove CNF from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_051 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_051");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_051";
    $tcid = "ADQ767_051";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $cfd_code = 70;
    my $cnf_code = 30;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cfd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cfd_code FEAT N N CFDP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cfd_code FEAT N N CFDP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CFDP/, $ses_core->execCmd("pos FEATXLA $cfd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cfd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cfd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cfd_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cnf_code FEAT N Y CONF");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CONF/, $ses_core->execCmd("pos FEATXLA $cnf_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cnf_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cnf_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CNF to line A, add CFD to line B
    unless ($ses_core->callFeature(-featureName => "CNF C06", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CNF for line $list_dn[0]");
		print FH "STEP: add CNF for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CNF for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFD F $list_dn[3]", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFD for line $list_dn[1]");
		print FH "STEP: add CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFD for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B dials CFD code
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[1], -cas_timeout => 50000);

    $dialed_num = '*' . $cfd_code;
    %input = (
                -line_port => $list_line[1],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[1], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[1]");
    }

    unless (grep /CFD.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFD for line $list_dn[1]");
        print FH "STEP: activate CFD for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFD for line $list_dn[1] - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }

# A calls C and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path");
        print FH "STEP: A calls C and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path - PASS\n";
    }

# A dials CONF code and check speech path A and C
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cnf_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# A flash and calls B the call forward to D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[3],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[3],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 12','RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and call is foward to D");
        print FH "STEP: A calls B and call is foward to D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and call is foward to D - PASS\n";
    }

# A dials CONF code and check speech path among A, C, D
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $cnf_code . '#';
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    # Check speech path among A, C, D
    %input = (
                -list_port => [$list_line[0],$list_line[2],$list_line[3]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, C, D");
        print FH "STEP: Check speech path among A, C, D - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, C, D - PASS\n";
    }

################################## Cleanup 051 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 051 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CNF|CFD/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CNF', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CNF from line $list_dn[0]");
            print FH "STEP: Remove CNF from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CNF from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFD', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFD from line $list_dn[1]");
            print FH "STEP: Remove CFD from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFD from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_052 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_052");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_052";
    $tcid = "ADQ767_052";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $tapi_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $mmc_dn = 2124400000;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    my %info;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    my $thr4 = threads->create(\&tapi);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();
    $ses_tapi = $thr4->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table MMCONF
    unless (grep/MMCONF/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table MMCONF'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    $mmc_dn =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp 0")) {
        @output = $ses_core->execCmd("add $cust_grp 0 $1 $2 $3 0 Y Y N 150 FLASHONLY \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp 0 $1 $2 $3 0 Y Y N 150 FLASHONLY \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /150 FLASHONLY/, $ses_core->execCmd("pos $cust_grp 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp 0 in table MMCONF");
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Start tapi trace
    unless ($ses_tapi->loginCore(
                                -username => [@{$core_account{-username}}[10..14]], 
                                -password => [@{$core_account{-password}}[10..14]]
                                )) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core for tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core for tapitrace - PASS\n";
    }
    @output = $ses_tapi->execCmd("gwctraci");
    unless (grep/GWCTRACI:/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'gwctraci' ");
    }
    if (grep /count exceeded/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot use 'gwctraci' due to 'count exceeded' ");
    }
    if (grep /This will clear existing trace buffers/, $ses_tapi->execCmd("define both gwc $audio_gwc 0 32766")) {
        unless ($ses_tapi->execCmd("y")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'y' ");
        }
    }
    unless ($ses_tapi->execCmd("enable both gwc $audio_gwc")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'enable both gwc $audio_gwc'");
        print FH "STEP: start tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start tapitrace - PASS\n";
    }
    $tapi_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials MMC DN and hears ringback tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials MMC DN and hears ringback tone");
        print FH "STEP: A dials MMC DN and hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials MMC DN and hears ringback tone - PASS\n";
    }

# B dials MMC DN and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B dials MMC DN and check speech path between A and B");
        print FH "STEP: B dials MMC DN and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials MMC DN and check speech path between A and B - PASS\n";
    }

# A flash then check speech path between A and B
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

# C dials MMC DN and hears busy tone
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears busy tone");
        print FH "STEP: C dials MMC DN and hears busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears busy tone - PASS\n";
    }

################################## Cleanup 052 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 052 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MEETME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Stop tapi
    my $exist_enter = 0;
    my $exist_lock = 0;
    my @tapi_output;
    %info = (
            $audio_gwc => {
                    -gwc_ip => $audio_gwc_ip,
                    -terminal_num => [],
                    -int_term_num => [10270],
                    },
            );
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: stop tapitrace - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: stop tapitrace - PASS\n";
        }

        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                foreach (@{$tapiterm_out{$gwc_id}{$tn}}) {
                    $_ =~ s/\0//g;
                    if (/SG\{conftn/) {
                        push(@tapi_output, $_);
                    }
                }
            }
        }
        $logger->error(__PACKAGE__ . " $tcid: you see that" . Dumper(\@tapi_output));

        foreach (@tapi_output) {
            if (/SG\{conftn\/enter\}/) {
                $exist_enter++;
            }
            if (/SG\{conftn\/lock\}/) {
                $exist_lock++;
            }
        }

        if ($exist_enter) {
            print FH "STEP: check the message SG{conftn/enter} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/enter}' in tapi log");
            print FH "STEP: check the message SG{conftn/enter} on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_lock) {
            print FH "STEP: check the message SG{conftn/lock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/lock}' in tapi log");
            print FH "STEP: check the message SG{conftn/lock} on tapi log - FAIL\n";
            $result = 0;
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_053 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_053");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_053";
    $tcid = "ADQ767_053";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $tapi_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $mmlk_code = 104;
    my $mmul_code = 105;
    my $mmc_dn = 2124400000;
    my ($cust_grp) = ($list_line_info[0] =~ /\w+\s(\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    my %info;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    my $thr4 = threads->create(\&tapi);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();
    $ses_tapi = $thr4->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill table MMCONF
    unless (grep/MMCONF/, $ses_core->execCmd("table MMCONF")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table MMCONF'");
    }
    $ses_core->{conn}->cmd("format pack");
    unless ($ses_core->{conn}->waitfor(-match => '/>$/', -timeout => 10)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot execute command 'format pack'");
    }
    $mmc_dn =~ /(\d{3})(\d{3})(\d+)/;
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $cust_grp 0")) {
        @output = $ses_core->execCmd("add $cust_grp 0 $1 $2 $3 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep $cust_grp 0 $1 $2 $3 0 Y Y N 150 CODEADDON \$");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /150 CODEADDON/, $ses_core->execCmd("pos $cust_grp 0")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill $cust_grp 0 in table MMCONF");
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill $cust_grp 0 in table MMCONF - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $mmlk_code")) {
        @output = $ses_core->execCmd("add FEATXLA $mmlk_code FEAT N N MMLK");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $mmlk_code FEAT N N MMLK");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /MMLK/, $ses_core->execCmd("pos FEATXLA $mmlk_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $mmlk_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $mmlk_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $mmlk_code in table IBNXLA - PASS\n";
    }

    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $mmul_code")) {
        @output = $ses_core->execCmd("add FEATXLA $mmul_code FEAT N N MMUL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $mmul_code FEAT N N MMUL");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /MMUL/, $ses_core->execCmd("pos FEATXLA $mmul_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $mmul_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $mmul_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $mmul_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Start tapi trace
    unless ($ses_tapi->loginCore(
                                -username => [@{$core_account{-username}}[10..14]], 
                                -password => [@{$core_account{-password}}[10..14]]
                                )) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core for tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core for tapitrace - PASS\n";
    }
    @output = $ses_tapi->execCmd("gwctraci");
    unless (grep/GWCTRACI:/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'gwctraci' ");
    }
    if (grep /count exceeded/, @output) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot use 'gwctraci' due to 'count exceeded' ");
    }
    if (grep /This will clear existing trace buffers/, $ses_tapi->execCmd("define both gwc $audio_gwc 0 32766")) {
        unless ($ses_tapi->execCmd("y")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'y' ");
        }
    }
    unless ($ses_tapi->execCmd("enable both gwc $audio_gwc")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'enable both gwc $audio_gwc'");
        print FH "STEP: start tapitrace - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start tapitrace - PASS\n";
    }
    $tapi_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A dials MMC DN and hears ringback tone
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A dials MMC DN and hears ringback tone");
        print FH "STEP: A dials MMC DN and hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials MMC DN and hears ringback tone - PASS\n";
    }

# B dials MMC DN and check speech path between A and B
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[0],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[1],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 5'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B dials MMC DN and check speech path between A and B");
        print FH "STEP: B dials MMC DN and check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials MMC DN and check speech path between A and B - PASS\n";
    }

# A flash and dials MMLK code then check speech path between A and B again
    %input = (
                -line_port => $list_line[0],
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$mmlk_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B again");
        print FH "STEP: Check speech path between A and B again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B again - PASS\n";
    }

# C dials MMC DN and hears busy tone then onhook
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['onA'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears busy tone then onhook");
        print FH "STEP: C dials MMC DN and hears busy tone then onhook - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears busy tone then onhook - PASS\n";
    }

# A flash and dials MMUL code then check speech path between A and B again
    %input = (
                -line_port => $list_line[0],
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = "\*$mmul_code";
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(3);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B again");
        print FH "STEP: Check speech path between A and B again - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B again - PASS\n";
    }

# C dials MMC DN
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$mmc_dn\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['DELAY 3'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C dials MMC DN and hears ringback");
        print FH "STEP: C dials MMC DN and hears ringback - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials MMC DN and hears ringback - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 053 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 053 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MEETME/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Stop tapi
    my $exist_enter = 0;
    my $exist_lock = 0;
    my $exist_unlock = 0;
    my @tapi_output;
    %info = (
            $audio_gwc => {
                    -gwc_ip => $audio_gwc_ip,
                    -terminal_num => [],
                    -int_term_num => [10270],
                    },
            );
    if ($tapi_start) {
        %input = (
                    -testbed => $TESTBED{"c20:1:ce0"},
                    -gwc_user => $gwc_user,
                    -gwc_pwd => $gwc_pwd,
                    -log_path => $tapilog_dir,
                    -term_num => \%info,
                    -tcid => $tcid,
                );
        my %tapiterm_out = $ses_tapi->stopTapiTerm(%input);
        unless (%tapiterm_out) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop tapitrace");
            print FH "STEP: stop tapitrace - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: stop tapitrace - PASS\n";
        }

        foreach my $gwc_id (keys %tapiterm_out) {
            foreach my $tn (keys %{$tapiterm_out{$gwc_id}}) {
                foreach (@{$tapiterm_out{$gwc_id}{$tn}}) {
                    $_ =~ s/\0//g;
                    if (/SG\{conftn/) {
                        push(@tapi_output, $_);
                    }
                }
            }
        }
        $logger->error(__PACKAGE__ . " $tcid: you see that" . Dumper(\@tapi_output));

        foreach (@tapi_output) {
            if (/SG\{conftn\/enter\}/) {
                $exist_enter++;
            }
            if (/SG\{conftn\/lock\}/) {
                $exist_lock++;
            }
            if (/SG\{conftn\/unlock\}/) {
                $exist_unlock++;
            }
        }
        if ($exist_enter >= 2) {
            print FH "STEP: check the message SG{conftn/enter} display 2 times on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Can see 'SG{conftn/enter}' $exist_enter times on tapi log");
            print FH "STEP: check the message SG{conftn/enter} display 2 times on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_lock) {
            print FH "STEP: check the message SG{conftn/lock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/lock}' in tapi log");
            print FH "STEP: check the message SG{conftn/lock} on tapi log - FAIL\n";
            $result = 0;
        }
        if ($exist_unlock) {
            print FH "STEP: check the message SG{conftn/unlock} on tapi log - PASS\n";
        } else {
            $logger->error(__PACKAGE__ . " $tcid: Cannot see 'SG{conftn/unlock}' in tapi log");
            print FH "STEP: check the message SG{conftn/unlock} on tapi log - FAIL\n";
            $result = 0;
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_054 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_054");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_054";
    $tcid = "ADQ767_054";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $dcp_code = 36;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        @output = $ses_core->execCmd("add FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $dcp_code FEAT N N DCP");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /DCP/, $ses_core->execCmd("pos FEATXLA $dcp_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $dcp_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $dcp_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add DCBI to line A
    unless ($ses_core->callFeature(-featureName => "DCBI", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DCBI for line $list_dn[0]");
		print FH "STEP: add DCBI for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DCBI for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# B calls C, B hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C, B hear ringback and C hears ringing");
        print FH "STEP: B calls C, B hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C, B hear ringback and C hears ringing - PASS\n";
    }

# A dials DCP code + DN (C)
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(2);

# Check speech path line A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

# Hang up line A and B
    foreach (@list_line[0..1]) {
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }
    sleep(2);

# B calls C, B hear ringback and C hears ringing
    %input = (
                -lineA => $list_line[1],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[1],
                -regionB => $list_region[2],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C, B hear ringback and C hears ringing");
        print FH "STEP: B calls C, B hear ringback and C hears ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B calls C, B hear ringback and C hears ringing - PASS\n";
    }

# A dials DCP code then C answer
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears dial tone - PASS\n";
    }

    $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[0], -cas_timeout => 50000);

    $dialed_num = '*' . $dcp_code;
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }

    unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[0], -wait_for_event_time => 30)) {
        $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[0]");
        print FH "STEP: A hear confirmation tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear confirmation tone - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hear recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hear recall dial tone - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

# A dials DN(C) then check speech path among A, B, C
    ($dialed_num) = ($list_dn[2] =~ /\d{3}(\d+)/);
    %input = (
                -line_port => $list_line[0],
                -dialed_number => "$dialed_num\#",
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(2);

    # Check speech path among A B C
    %input = (
                -list_port => [@list_line], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000,
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path among A B C");
        print FH "STEP: Check speech path among A B C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A B C - PASS\n";
    }

################################## Cleanup 054 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 054 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DCBI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DCBI', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DCBI from line $list_dn[0]");
            print FH "STEP: Remove DCBI from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DCBI from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_055 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_055");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_055";
    $tcid = "ADQ767_055";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add DTM to line A, add CFU to line B
    unless ($ses_core->callFeature(-featureName => "DTM", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add DTM for line $list_dn[0]");
		print FH "STEP: add DTM for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add DTM for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->callFeature(-featureName => "CFU N", -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CFU for line $list_dn[1]");
		print FH "STEP: add CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CFU for line $list_dn[1] - PASS\n";
    }
    $add_feature_lineB = 1;

    # B activate CFU for line A
    unless ($ses_core->execCmd("Servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    unless ($ses_core->execCmd("changecfx $list_len[1] CFU $list_dn[0] A")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'changecfx'");
    }
    unless (grep /CFU.*\sA\s/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot activate CFU for line $list_dn[1]");
        print FH "STEP: activate CFU for line $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: activate CFU for line $list_dn[1] - PASS\n";
    }

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

    # C calls B and hear busy tone
    %input = (
                -lineA => $list_line[2],
                -lineB => $list_line[1],
                -dialed_number => "$list_dn[1]\#",
                -regionA => $list_region[2],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => ['BUSY'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at C calls B and hear busy tone");
        print FH "STEP: C calls B and hear busy tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C calls B and hear busy tone - PASS\n";
    }

################################## Cleanup 055 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 055 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /DTM|CFU/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'DTM', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove DTM from line $list_dn[0]");
            print FH "STEP: Remove DTM from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove DTM from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'CFU', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CFU from line $list_dn[1]");
            print FH "STEP: Remove CFU from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove CFU from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_056 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_056");
 
########################### Variables Declaration #############################
    my $sub_name = "ADQ767_056";
    $tcid = "ADQ767_056";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    ############################## Trunk DB #####################################
    my $trunk_access_code = $db_trunk{'t15_g6_pri'}{-acc};
    my $trunk_region = $db_trunk{'t15_g6_pri'}{-region};
    my $trunk_clli = $db_trunk{'t15_g6_pri'}{-clli};

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $add_feature_lineAB = 0;
    my $add_feature_lineBC = 0;
    my $cpu_code = 45;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        @output = $ses_core->execCmd("add FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $cpu_code FEAT N N CPU");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CPU/, $ses_core->execCmd("pos FEATXLA $cpu_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $cpu_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $cpu_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add SIMRING to line A and B
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[0] $list_dn[1] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[0]");
    unless ((grep /Member DN 1 .* $list_dn[1]/, @output) and (grep /Pilot DN: .* $list_dn[0]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[0] and $list_dn[1]");
		print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[0] and $list_dn[1] - PASS\n";
    }
    $add_feature_lineAB = 1;

# Add CPU to line B and C
    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'servord'");
    }
    if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("est \$ CPU $list_len[1] $list_len[2] \$ y y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot add CPU for line $list_dn[1] and $list_dn[2]");
        $ses_core->execCmd("abort");
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[1]")) {
        print FH "STEP: add CPU for line $list_dn[1] - FAIL\n";
        $result = 0;
    }
    unless (grep /CPU/, $ses_core->execCmd("qdn $list_dn[2]")) {
        print FH "STEP: add CPU for line $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CPU for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
    $add_feature_lineBC = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# D calls A and D hear ringback tone
    ($dialed_num) = ($list_dn[0] =~ /\d{3}(\d+)/);
    $dialed_num = $trunk_access_code . $dialed_num;
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[0],
                -dialed_number => $dialed_num,
                -regionA => $list_region[3],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['NONE'],
                -send_receive => ['NONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and D hear ringback tone");
        print FH "STEP: D calls A and D hear ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and D hear ringback tone - PASS\n";
    }

# A and B rings
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }

# C dials CPU code
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    # $ses_glcas->startDetectConfirmationToneCAS(-line_port => $list_line[2], -cas_timeout => 50000);

    $dialed_num = '*' . $cpu_code . '#';
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # unless ($ses_glcas->stopDetectConfirmationToneCAS(-line_port => $list_line[2], -wait_for_event_time => 30)) {
    #     $logger->error(__PACKAGE__ . ": Cannot detect confirmation tone for line $list_dn[2]");
    #     print FH "STEP: C hear confirmation tone - FAIL\n";
    #     $result = 0;
    #     goto CLEANUP;
    # } else {
    #     print FH "STEP: C hear confirmation tone - PASS\n";
    # }

# A and B stop ringing, check speech path C and D
    unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[0])) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[0] is not IDL after C pick up the call");
        print FH "STEP: A stops ringing after C pick up the call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A stops ringing after C pick up the call - PASS\n";
    }
    unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[1])) {
        $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[1] is not IDL after C pick up the call");
        print FH "STEP: B stops ringing after C pick up the call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B stops ringing after C pick up the call - PASS\n";
    }
    %input = (
                -list_port => [$list_line[3],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000,
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between D and C");
        print FH "STEP: Check speech path between D and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and C - PASS\n";
    }

################################## Cleanup 056 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 056 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CPU|SIMRING/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A, B and C
    if ($add_feature_lineAB) {
        foreach ($list_dn[0],$list_dn[1]) {
            unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $_");
                print FH "STEP: Remove SIMRING from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove SIMRING from line $_ - PASS\n";
            }
        }
    }
    if ($add_feature_lineBC) {
        foreach ($list_dn[1],$list_dn[2]) {
            unless ($ses_core->callFeature(-featureName => 'CPU', -dialNumber => $_, -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove CPU from line $_");
                print FH "STEP: Remove CPU from line $_ - FAIL\n";
            } else {
                print FH "STEP: Remove CPU from line $_ - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_057 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_057");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_057";
    $tcid = "ADQ767_057";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Add WML to line A
    unless ($ses_core->callFeature(-featureName => "WML Y Y $list_dn[1] 20", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add WML for line $list_dn[0]");
		print FH "STEP: add WML for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add WML for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

# Call flow
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    sleep(20); # Wait for WML timeout

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 057 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 057 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /WML/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'WML', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove WML from line $list_dn[0]");
            print FH "STEP: Remove WML from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove WML from line $list_dn[0] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_058 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_058");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_058";
    $tcid = "ADQ767_058";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'N';
    my $chd_code = 44;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set N for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CHD/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $chd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI and CHD to line B
    foreach ('CWT','CWI','CHD') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls B and hear ringback tone, B hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line B
    %input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B hears Call waiting tone");
        print FH "STEP: B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# B flash and dial CHD code
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path C and B
    %input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASS\n";
    }

# B flash and dial CHD code again
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
# Hang up line C then hang up line a and B
    foreach ($list_line[2], $list_line[1], $list_line[0]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

################################## Cleanup 058 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 058 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CHD|CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B
    if ($add_feature_lineB) {
        foreach ('CHD','CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_059 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_059");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_059";
    $tcid = "ADQ767_059";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'N';
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set N for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add AUL, 3WC to line A
    foreach ("AUL $list_dn[1]",'3WC') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A offhook and hear ringback and B ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    # Check line B ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A offhook");
        print FH "STEP: Check line B ringing after A offhook - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing after A offhook - PASS\n";
    }

# B answer and check speech path then A flash
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

# A calls C and check speech path then flash
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path then flash");
        print FH "STEP: A calls C and check speech path then flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path then flash - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 059 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 059 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /AUL|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('3WC','AUL') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_060 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_060");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_060";
    $tcid = "ADQ767_060";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'N';
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set N for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI to line A
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls A and hear ringback tone, A hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[0];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line A
    %input = (
                -line_port => $list_line[0],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A hears Call waiting tone");
        print FH "STEP: A hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# A flash to answer C and check speech path between A and C
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# A and C onhook then A re-ring
    foreach ($list_line[0], $list_line[2]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
        sleep(5);
    }

    # Check line A re-ring
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not rering");
        print FH "STEP: Check line A rering - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A rering - PASS\n";
    }

# offhook A and check speech path A and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 060 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 060 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_061 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_061");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_061";
    $tcid = "ADQ767_061";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'N';
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set N for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CXR to line A, add simring for B and C
    unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[1] $list_dn[2] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[1]");
    unless ((grep /Member DN 1 .* $list_dn[2]/, @output) and (grep /Pilot DN: .* $list_dn[1]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[1] and $list_dn[2]");
		print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# D calls A and check speech path
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and check speech path");
        print FH "STEP: D calls A and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and check speech path - PASS\n";
    }

# A transfer call to SIMRING group
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(8);

# B ring, C does not ring then onhook A
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    if ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C still ring");
        print FH "STEP: Check line C not ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C not ring - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# Offhook B and check speech path D and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[3],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between D and B");
        print FH "STEP: Check speech path between D and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and B - PASS\n";
    }

################################## Cleanup 061 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 061 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CXR|SIMRING/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $list_dn[1]");
            print FH "STEP: Remove SIMRING from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove SIMRING from line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_062 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_062");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_062";
    $tcid = "ADQ767_062";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $mdn_added = 0;
    my $dialed_num;
    my $intrasw = 'N';
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set N for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add MDN to line A as primary, Line B as member
    unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'servord'");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 3 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'ado'");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MDN to line $list_dn[0] as primary - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MDN to line $list_dn[0] as primary - PASS\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'ado'");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /NUMBER ON INTERCEPT ANCT/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[1]' ");
        print FH "STEP: add MDN to line $list_dn[1] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MDN to line $list_dn[1] as member - PASS\n";
    }
    $mdn_added = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# C calls A, A and B ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $dialed_num = $list_dn[0];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }

# A answer and check speech path between A and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    sleep(2);

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# B offhook and check speech path among A, B and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
    sleep(2);

    # Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# B onhook and check speech path between A and C again
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
    sleep(2);
    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# B offhook and check speech path among A, B and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
    sleep(2);

    # Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# B onhook and check speech path between A and C again
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
    sleep(2);
    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

################################## Cleanup 062 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 062 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MADN/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove MDN from line A and B
    if ($mdn_added) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[1] from MDN group");
            print FH "STEP: remove line $list_dn[1] from MDN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[1] from MDN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after DEO fail");
            }
            print FH "STEP: Remove MDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove MDN from line $list_dn[0] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_063 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_063");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_063";
    $tcid = "ADQ767_063";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineB = 0;
    my $dialed_num;
    my $change_lcminv = 0;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'Y';
    my $chd_code = 44;
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set Y for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    $change_lcminv = 1;
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Datafill in table IBNXLA
    unless (grep/IBNXLA/, $ses_core->execCmd("table IBNXLA")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table IBNXLA'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        @output = $ses_core->execCmd("add FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    } else {
        @output = $ses_core->execCmd("rep FEATXLA $chd_code FEAT N Y CHD");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
    }
    unless (grep /CHD/, $ses_core->execCmd("pos FEATXLA $chd_code")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot datafill FEATXLA $chd_code in table IBNXLA");
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Datafill FEATXLA $chd_code in table IBNXLA - PASS\n";
    }

    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI and CHD to line B
    foreach ('CWT','CWI','CHD') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[1]");
            print FH "STEP: add $_ for line $list_dn[1] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[1] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls B and hear ringback tone, B hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line B
    %input = (
                -line_port => $list_line[1],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at B hears Call waiting tone");
        print FH "STEP: B hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# B flash and dial CHD code
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path C and B
    %input = (
                -list_port => [$list_line[2],$list_line[1]], 
                -checking_type => ['TESTTONE'],
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between C and B");
        print FH "STEP: Check speech path between C and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between C and B - PASS\n";
    }

# B flash and dial CHD code again
    %input = (
                -line_port => $list_line[1], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[1]");
        print FH "STEP: B Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B Flash - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[1]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = '*' . $chd_code;
    %input = (
                -line_port => $list_line[1], # Line B
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: B dials $chd_code - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: B dials $chd_code - PASS\n";
    }
    sleep(2);

# Check speech path A and B
    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }
# Hang up line C then hang up line a and B
    foreach ($list_line[2], $list_line[1], $list_line[0]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
    }

################################## Cleanup 063 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 063 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CHD|CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line B
    if ($add_feature_lineB) {
        foreach ('CHD','CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[1]");
                print FH "STEP: Remove $_ from line $list_dn[1] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[1] - PASS\n";
            }
        }
    }

    # rollback N for INTRASW in table LCMINV
    if ($change_lcminv) {
        unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
        }
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
        unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot Set N for INTRASW in table LCMINV");
            print FH "STEP: Rollback N for INTRASW in table LCMINV - FAIL\n";
        } else {
            print FH "STEP: Rollback N for INTRASW in table LCMINV - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_064 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_064");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_064";
    $tcid = "ADQ767_064";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $change_lcminv = 0;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'Y';
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set Y for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    $change_lcminv =1;
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add AUL, 3WC to line A
    foreach ("AUL $list_dn[1]",'3WC') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A offhook and hear ringback and B ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }

    # Check Ringback tone line A
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[0]");
        print FH "STEP: A hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears ringback tone - PASS\n";
    }

    # Check line B ring
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring after A offhook");
        print FH "STEP: Check line B ringing after A offhook - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing after A offhook - PASS\n";
    }

# B answer and check speech path then A flash
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }

# A calls C and check speech path then flash
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        $result = 0;
        goto CLEANUP;
    }

    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[2],
                -dialed_number => $list_dn[2],
                -regionA => $list_region[0],
                -regionB => $list_region[2],
                -check_dial_tone => 'n',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'A'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls C and check speech path then flash");
        print FH "STEP: A calls C and check speech path then flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls C and check speech path then flash - PASS\n";
    }

# Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

################################## Cleanup 064 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 064 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /AUL|3WC/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('3WC','AUL') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    # rollback N for INTRASW in table LCMINV
    if ($change_lcminv) {
        unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
        }
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
        unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot Set N for INTRASW in table LCMINV");
            print FH "STEP: Rollback N for INTRASW in table LCMINV - FAIL\n";
        } else {
            print FH "STEP: Rollback N for INTRASW in table LCMINV - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_065 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_065");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_065";
    $tcid = "ADQ767_065";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $dialed_num;
    my $change_lcminv = 0;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'Y';
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set Y for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    $change_lcminv = 1;
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CWT, CWI to line A
    foreach ('CWT','CWI') {
        unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot add $_ for line $list_dn[0]");
            print FH "STEP: add $_ for line $list_dn[0] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: add $_ for line $list_dn[0] - PASS\n";
        }
    }
    unless ($flag) {
        $result = 0;
        goto CLEANUP;
    }
    $add_feature_lineA = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# A calls B and check speech path
    %input = (
                -lineA => $list_line[0],
                -lineB => $list_line[1],
                -dialed_number => $list_dn[1],
                -regionA => $list_region[0],
                -regionB => $list_region[1],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['TESTTONE'],
                -flash => ''
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A calls B and check speech path");
        print FH "STEP: A calls B and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A calls B and check speech path - PASS\n";
    }

# C calls A and hear ringback tone, A hear CWT tone
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        $result = 0;
        goto CLEANUP;
    }

    $dialed_num = $list_dn[0];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    # Check CWT tone line A
    %input = (
                -line_port => $list_line[0],
                -callwaiting_tone_duration => 300,
                -cas_timeout => 20000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectCallWaitingToneCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at A hears Call waiting tone");
        print FH "STEP: A hears Call waiting tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears Call waiting tone - PASS\n";
    }

    # Check Ringback tone line C
    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingbackToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect ringback tone line $list_dn[2]");
        print FH "STEP: C hears ringback tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hears ringback tone - PASS\n";
    }

# A flash to answer C and check speech path between A and C
    %input = (
                -line_port => $list_line[0], 
                -flash_duration => 600,
                -wait_for_event_time => $wait_for_event_time
             ); 
    unless($ses_glcas->flashWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot flash hook line $list_dn[0]");
        print FH "STEP: A Flash - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A Flash - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# A and C onhook then A re-ring
    foreach ($list_line[0], $list_line[2]){
        unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            print FH "STEP: Onhook line $_ - FAIL\n";
            $result = 0;
        } else {
            print FH "STEP: Onhook line $_ - PASS\n";
        }
        sleep(5);
    }

    # Check line A re-ring
    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not rering");
        print FH "STEP: Check line A rering - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A rering - PASS\n";
    }

# offhook A and check speech path A and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_line[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    sleep(2);

    %input = (
                -list_port => [$list_line[0],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path between A and B");
        print FH "STEP: Check speech path between A and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and B - PASS\n";
    }

################################## Cleanup 065 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 065 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CWT|CWI/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A
    if ($add_feature_lineA) {
        foreach ('CWI','CWT') {
            unless ($ses_core->callFeature(-featureName => $_, -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
                $logger->error(__PACKAGE__ . " $tcid: Remove $_ from line $list_dn[0]");
                print FH "STEP: Remove $_ from line $list_dn[0] - FAIL\n";
            } else {
                print FH "STEP: Remove $_ from line $list_dn[0] - PASS\n";
            }
        }
    }

    # rollback N for INTRASW in table LCMINV
    if ($change_lcminv) {
        unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
        }
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
        unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot Set N for INTRASW in table LCMINV");
            print FH "STEP: Rollback N for INTRASW in table LCMINV - FAIL\n";
        } else {
            print FH "STEP: Rollback N for INTRASW in table LCMINV - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_066 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_066");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_066";
    $tcid = "ADQ767_066";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn}, $db_line{$tc_line{$tcid}[3]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line}, $db_line{$tc_line{$tcid}[3]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region}, $db_line{$tc_line{$tcid}[3]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len}, $db_line{$tc_line{$tcid}[3]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info}, $db_line{$tc_line{$tcid}[3]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $dialed_num;
    my $change_lcminv = 0;
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my $intrasw = 'Y';
    my $add_feature_lineA = 0;
    my $add_feature_lineB = 0;
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        %input = (
                    -function => ['OUT','NEW'], 
                    -lineDN => $list_dn[$i], 
                    -lineType => '', 
                    -len => '', 
                    -lineInfo => $list_line_info[$i]
                );
        unless ($ses_core->resetLine(%input)) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
            print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set Y for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    $change_lcminv = 1;
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add CXR to line A, add simring for B and C
    unless ($ses_core->callFeature(-featureName => "CXR CTALL Y 12 STD", -dialNumber => $list_dn[0], -deleteFeature => 'No')) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot add CXR for line $list_dn[0]");
		print FH "STEP: add CXR for line $list_dn[0] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add CXR for line $list_dn[0] - PASS\n";
    }
    $add_feature_lineA = 1;

    unless ($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'servord'");
    }
    $ses_core->execCmd("est \$ SIMRING $list_dn[1] $list_dn[2] \+");
    unless ($ses_core->execCmd("\$ ACT N 1234 Y Y")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'est'");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot command 'abort'");
    }

    @output = $ses_core->execCmd("qsimr $list_dn[1]");
    unless ((grep /Member DN 1 .* $list_dn[2]/, @output) and (grep /Pilot DN: .* $list_dn[1]/, @output)) {
		$logger->error(__PACKAGE__ . " $tcid: Cannot create group SIMRING for line $list_dn[1] and $list_dn[2]");
		print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: create group SIMRING for line $list_dn[1] and $list_dn[2] - PASS\n";
    }
    $add_feature_lineB = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# D calls A and check speech path
    %input = (
                -lineA => $list_line[3],
                -lineB => $list_line[0],
                -dialed_number => $list_dn[0],
                -regionA => $list_region[3],
                -regionB => $list_region[0],
                -check_dial_tone => 'y',
                -digit_on => 300,
                -digit_off => 300,
                -detect => [$detect,'RINGING'],
                -ring_on => [0],
                -ring_off => [0],
                -on_off_hook => ['offB'],
                -send_receive => ['DIGITS'],
                -flash => 'B'
                );
    unless ($ses_glcas->makeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at D calls A and check speech path");
        print FH "STEP: D calls A and check speech path - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: D calls A and check speech path - PASS\n";
    }

# A transfer call to SIMRING group
    %input = (
                -line_port => $list_line[0],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[0]");
        print FH "STEP: A hears recall dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A hears recall dial tone - PASS\n";
    }

    $dialed_num = $list_dn[1];
    %input = (
                -line_port => $list_line[0],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: A dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: A dials $dialed_num - PASS\n";
    }
    sleep(8);

# B ring, C does not ring then onhook A
    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ring - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    if ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line C still ring");
        print FH "STEP: Check line C not ring - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line C not ring - PASS\n";
    }

    unless($ses_glcas->onhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[0]");
        print FH "STEP: Onhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line A - PASS\n";
    }
    sleep(2);

# Offhook B and check speech path D and B
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }

    %input = (
                -list_port => [$list_line[3],$list_line[1]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between D and B");
        print FH "STEP: Check speech path between D and B - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between D and B - PASS\n";
    }

################################## Cleanup 066 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 066 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /CXR|SIMRING/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove service from line A and B
    if ($add_feature_lineA) {
        unless ($ses_core->callFeature(-featureName => 'CXR', -dialNumber => $list_dn[0], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove CXR from line $list_dn[0]");
            print FH "STEP: Remove CXR from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove CXR from line $list_dn[0] - PASS\n";
        }
    }
    if ($add_feature_lineB) {
        unless ($ses_core->callFeature(-featureName => 'SIMRING', -dialNumber => $list_dn[1], -deleteFeature => 'Yes')) {
            $logger->error(__PACKAGE__ . " $tcid: Remove SIMRING from line $list_dn[1]");
            print FH "STEP: Remove SIMRING from line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: Remove SIMRING from line $list_dn[1] - PASS\n";
        }
    }

    # rollback N for INTRASW in table LCMINV
    if ($change_lcminv) {
        unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
        }
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
        unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot Set N for INTRASW in table LCMINV");
            print FH "STEP: Rollback N for INTRASW in table LCMINV - FAIL\n";
        } else {
            print FH "STEP: Rollback N for INTRASW in table LCMINV - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

sub ADQ767_067 {
    $logger->debug(__PACKAGE__ . " Inside test case ADQ767_067");

########################### Variables Declaration #############################
    my $sub_name = "ADQ767_067";
    $tcid = "ADQ767_067";
    my $execution_logs = $tcid.'_ExecutionLogs_'.$datestamp.'.txt';
    my $result = 1;

    open(FH,'>',$execution_logs) or die $!;
    move($dir."/".$execution_logs,"/home/".$user_name."/ats_user/logs/ADQ767");

    my @list_dn = ($db_line{$tc_line{$tcid}[0]}{-dn}, $db_line{$tc_line{$tcid}[1]}{-dn}, $db_line{$tc_line{$tcid}[2]}{-dn});
    my @list_line = ($db_line{$tc_line{$tcid}[0]}{-line}, $db_line{$tc_line{$tcid}[1]}{-line}, $db_line{$tc_line{$tcid}[2]}{-line});
    my @list_region = ($db_line{$tc_line{$tcid}[0]}{-region}, $db_line{$tc_line{$tcid}[1]}{-region}, $db_line{$tc_line{$tcid}[2]}{-region});
    my @list_len = ($db_line{$tc_line{$tcid}[0]}{-len}, $db_line{$tc_line{$tcid}[1]}{-len}, $db_line{$tc_line{$tcid}[2]}{-len});
    my @list_line_info = ($db_line{$tc_line{$tcid}[0]}{-info}, $db_line{$tc_line{$tcid}[1]}{-info}, $db_line{$tc_line{$tcid}[2]}{-info});

    my $wait_for_event_time = 30;
    my $initialize_done = 0;
    my $logutil_start = 0;
    my $calltrak_start = 0;
    my $add_feature_lineA = 0;
    my $mdn_added = 0;
    my $change_lcminv = 0;
    my $dialed_num;
    my $intrasw = 'Y';
    my ($lcminv_tuple) = ($db_line{'rlcm_1'}{-len} =~ /(\w+\s+\w+\s+\w+)\s/);
    my (@cat,$logutil_path);
    my $flag = 1;
    
################## LOGIN ##############
    my $thr1 = threads->create(\&core);
    my $thr2 = threads->create(\&glcas);
    my $thr3 = threads->create(\&logutil);
    $ses_core = $thr1->join();
    $ses_glcas = $thr2->join();
    $ses_logutil = $thr3->join();

    unless ($ses_core->loginCore(%core_account)) {
        $logger->error(__PACKAGE__ . " $tcid: Unable to access TMA15 Core");
        print FH "STEP: Login TMA15 core - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Login TMA15 core - PASS\n";
    }

############### Test Specific configuration & Test Tool Script Execution #################

# Check line status
    for (my $i = 0; $i <= $#list_dn; $i++){
        # %input = (
        #             -function => ['OUT','NEW'], 
        #             -lineDN => $list_dn[$i], 
        #             -lineType => '', 
        #             -len => '', 
        #             -lineInfo => $list_line_info[$i]
        #         );
        # unless ($ses_core->resetLine(%input)) {
        #     $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] cannot reset");
        #     print FH "STEP: Reset line $list_dn[$i] - FAIL\n";
        #     $flag = 0;
        #     last;
        # } else {
        #     print FH "STEP: Reset line $list_dn[$i] - PASS\n";
        # }
        unless (grep /IDL/, $ses_core->coreLineGetStatus($list_dn[$i])) {
            $logger->error(__PACKAGE__ . " $tcid: Line $list_dn[$i] is not IDL");
            print FH "STEP: Check line $list_dn[$i] status - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: Check line $list_dn[$i] status- PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }

# Set Y for INTRASW in table LCMINV
    unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
    }
    if (grep /NOT FOUND/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $ses_core->execCmd("add $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    } else {
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ $intrasw N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
    }
    unless ($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
    }
    unless (grep /\$ $intrasw N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot Set $intrasw for INTRASW in table LCMINV");
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Set $intrasw for INTRASW in table LCMINV - PASS\n";
    }
    $change_lcminv = 1;
    unless ($ses_core->execCmd("quit")) {
        $logger->error(__PACKAGE__ . " $tcid: cannot command 'quit'");
    }

# Add MDN to line A as primary, Line B as member
    unless($ses_core->execCmd("servord")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'servord'");
    }
    unless ($ses_core->execCmd("ado \$ $list_dn[0] mdn sca y y $list_dn[0] tone y 3 y nonprivate \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'ado'");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /MADN MEMBER LENS INFO/, $ses_core->execCmd("qdn $list_dn[0]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[0]' ");
        print FH "STEP: add MDN to line $list_dn[0] as primary - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MDN to line $list_dn[0] as primary - PASS\n";
    }

    unless ($ses_core->execCmd("ado \$ $list_dn[1] mdn sca n y $list_dn[0] ANCT \$ y y")){
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'ado'");
    }
    unless($ses_core->execCmd("abort")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'abort' ");
    }
    unless(grep /NUMBER ON INTERCEPT ANCT/, $ses_core->execCmd("qdn $list_dn[1]")) {
        $logger->error(__PACKAGE__ . ".$sub_name: Cannot command 'qdn $list_dn[1]' ");
        print FH "STEP: add MDN to line $list_dn[1] as member - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: add MDN to line $list_dn[1] as member - PASS\n";
    }
    $mdn_added = 1;

# Initialize Call
    %input = (
                -cas_server => [@cas_server],
                -list_port => [@list_line],
                -tone_type => 0
             );
    unless($ses_glcas->initializeCall(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot Initialize Call");
		print FH "STEP: Initialize Call - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Initialize Call - PASS\n";
    }

    for (my $i = 0; $i <= $#list_line; $i++){
        unless ($ses_glcas->setRegionCAS(-line_port => $list_line[$i], -region_code => $list_region[$i], -wait_for_event_time => $wait_for_event_time)) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot set region for line $list_line[$i]");
            print FH "STEP: set region for line $list_line[$i] - FAIL\n";
            $flag = 0;
            last;
        } else {
            print FH "STEP: set region for line $list_line[$i] - PASS\n";
        }
    }
    unless ($flag){
        $result = 0;
        goto CLEANUP;
    }
    $initialize_done = 1;
    
# Start logutil
    %input = (
                -username => [@{$core_account{-username}}[5..9]], 
                -password => [@{$core_account{-password}}[5..9]], 
                -logutilType => ['SWERR', 'TRAP', 'AMAB'],
             );
    unless ($ses_logutil->startLogutil(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Cannot start logutil");
        print FH "STEP: start logutil - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: start logutil - PASS\n";
    }
    $logutil_start = 1;

###################### Call flow ###########################
    # start PCM trace
    my @list_file_name = $ses_glcas->recordSessionCAS(-list_port => [@list_line], -home_directory => "C:\\");
    unless(@list_file_name) {
        $logger->error(__PACKAGE__ . ".$tcid: cannot start record PCM");
    }

# C calls A, A and B ring
    unless($ses_glcas->offhookCAS(-line_port => $list_line[2], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[2]");
        print FH "STEP: Offhook line C - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line C - PASS\n";
    }

    %input = (
                -line_port => $list_line[2],
                -dial_tone_duration => 1000,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time
                );
    unless ($ses_glcas->detectDialToneCAS(%input)){
        $logger->error(__PACKAGE__ . ".$sub_name: cannot detect dial tone line $list_dn[2]");
        print FH "STEP: C hear dial tone - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C hear dial tone - PASS\n";
    }

    $dialed_num = $list_dn[0];
    %input = (
                -line_port => $list_line[2],
                -dialed_number => $dialed_num,
                -digit_on => 300,
                -digit_off => 300,
                -wait_for_event_time => $wait_for_event_time
                ); 
    unless($ses_glcas->sendDigitsWithDurationCAS(%input)) {
        $logger->error(__PACKAGE__ . ": Cannot dial $dialed_num successfully");
        print FH "STEP: C dials $dialed_num - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: C dials $dialed_num - PASS\n";
    }

    %input = (
                -line_port => $list_line[0],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line A does not ring");
        print FH "STEP: Check line A ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line A ringing - PASS\n";
    }

    %input = (
                -line_port => $list_line[1],
                -ring_count => 1,
                -ring_on => 0,
                -ring_off => 0,
                -cas_timeout => 50000,
                -wait_for_event_time => $wait_for_event_time,
                );
    unless ($ses_glcas->detectRingingSignalCAS(%input)) {
        $logger->error(__PACKAGE__ . ".$sub_name: Line B does not ring");
        print FH "STEP: Check line B ringing - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check line B ringing - PASS\n";
    }

# A answer and check speech path between A and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[0], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[0]");
        print FH "STEP: Offhook line A - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line A - PASS\n";
    }
    sleep(2);

    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# B offhook and check speech path among A, B and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
    sleep(2);

    # Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# B onhook and check speech path between A and C again
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
    sleep(2);
    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

# B offhook and check speech path among A, B and C
    unless($ses_glcas->offhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot offhook line $list_dn[1]");
        print FH "STEP: Offhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Offhook line B - PASS\n";
    }
    sleep(2);

    # Check speech path among A, B, C
    %input = (
                -list_port => [$list_line[0],$list_line[1],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed to Check speech path among A, B, C");
        print FH "STEP: Check speech path among A, B, C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path among A, B, C - PASS\n";
    }

# B onhook and check speech path between A and C again
    unless($ses_glcas->onhookCAS(-line_port => $list_line[1], -wait_for_event_time => $wait_for_event_time)) {
        $logger->error(__PACKAGE__ . ": Cannot onhook line $list_dn[1]");
        print FH "STEP: Onhook line B - FAIL\n";
        $result = 0;
    } else {
        print FH "STEP: Onhook line B - PASS\n";
    }
    sleep(2);
    # Check speech path line A and C
    %input = (
                -list_port => [$list_line[0],$list_line[2]], 
                -checking_type => ['TESTTONE'], 
                -tone_duration => 1000, 
                -cas_timeout => 50000
             );
    unless ($ses_glcas->checkSpeechPathCAS(%input)) {
        $logger->error(__PACKAGE__ . " $tcid: Failed at checking speech path between A and C");
        print FH "STEP: Check speech path between A and C - FAIL\n";
        $result = 0;
        goto CLEANUP;
    } else {
        print FH "STEP: Check speech path between A and C - PASS\n";
    }

################################## Cleanup 067 ##################################
    CLEANUP:
    $logger->debug(__PACKAGE__ . " $tcid: ################################ Cleanup 067 ##################################");

    # Cleanup call
    if ($initialize_done) {
        foreach (@list_line){
            unless($ses_glcas->onhookCAS(-line_port => $_, -wait_for_event_time => $wait_for_event_time)) {
                $logger->error(__PACKAGE__ . ": Cannot onhook line $_");
            }
        }
        unless($ses_glcas->cleanupCAS(-list_port => [@list_line])) {
            $logger->error(__PACKAGE__ . ": Cannot cleanup GLCAS");
            print FH "STEP: cleanup GLCAS - FAIL\n";
        } else {
            print FH "STEP: cleanup GLCAS - PASS\n";
        }
    }

    # Get PCM trace
    %input = (
            -remoteip => $cas_server[0],
            -remoteuser => $sftp_user,
            -remotepasswd => $sftp_pass,
            -localDir => '/home/ptthuy/PCM',
            -remoteFilePath => [@list_file_name]
            );
    if (@list_file_name) {
        unless(&SonusQA::Utils::sftpFromRemote(%input)) {
            $logger->error(__PACKAGE__ . ": ERROR COPYING FILES to the local machine");
        }
    }

    # Stop Logutil
    if ($logutil_start) {
        unless ($ses_logutil->stopLogutil()) {
            $logger->error(__PACKAGE__ . " $tcid: Cannot stop logutil ");
        }
        @output = $ses_logutil->execCmd("open trap");
        unless ((grep /Log empty/, @output) or (grep /Bus error accessing code|Descriptor range check/, @output)) {
            $logger->error(__PACKAGE__ . " $tcid: Trap is generated on core ");
            $result = 0;
            print FH "STEP: Check Trap - FAIL\n";
        } else {
            print FH "STEP: Check trap - PASS\n";
        }
        @output = $ses_logutil->execCmd("open swerr");
        if (grep /MADN/, @output) {
            $logger->error(__PACKAGE__ . " $tcid: Swerr is generated on core ");
            $result = 0;
            print FH "STEP: Check SWERR - FAIL\n";
        } else {
            print FH "STEP: Check SWERR - PASS\n";
        }
    }

    # Remove MDN from line A and B
    if ($mdn_added) {
        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("out \$ $list_dn[0] $list_len[1] bldn y y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after OUT fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot remove line $list_dn[1] from MDN group");
            print FH "STEP: remove line $list_dn[1] from MDN group - FAIL\n";
        } else {
            print FH "STEP: remove line $list_dn[1] from MDN group - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("deo \$ $list_len[0] mdn $list_dn[0] \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after DEO fail");
            }
            print FH "STEP: Remove MDN from line $list_dn[0] - FAIL\n";
        } else {
            print FH "STEP: Remove MDN from line $list_dn[0] - PASS\n";
        }

        if (grep /INCONSISTENT DATA|ERROR/, $ses_core->execCmd("new \$ $list_dn[1] $list_line_info[1] $list_len[1] dgt \$ y y")) {
            unless($ses_core->execCmd("abort")) {
                $logger->error(__PACKAGE__ . ".$sub_name: Cannot command abort after NEW fail");
            }
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot NEW line $list_dn[1] ");
            print FH "STEP: NEW line $list_dn[1] - FAIL\n";
        } else {
            print FH "STEP: NEW line $list_dn[1] - PASS\n";
        }
    }

    # rollback N for INTRASW in table LCMINV
    if ($change_lcminv) {
        unless (grep/LCMINV/, $ses_core->execCmd("table LCMINV")) {
            $logger->error(__PACKAGE__ . ".$sub_name: Cannot execute command 'table LCMINV'");
        }
        $ses_core->execCmd("rep $lcminv_tuple RLCM 4 1 C 4 6X04AA XLCM18AW DLP 5 N \+");
        @output = $ses_core->execCmd("257 256K 256K LCM Y C RLCM 40 52 \$ N N N 6X50AB");
        if (grep/DMOS NOT ALLOWED/, @output) {
            $ses_core->execCmd("y");
        }
        $ses_core->execCmd("y");
        unless ($ses_core->execCmd("abort")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot command 'abort'");
        }
        unless (grep /\$ N N N/, $ses_core->execCmd("pos $lcminv_tuple")) {
            $logger->error(__PACKAGE__ . " $tcid: cannot Set N for INTRASW in table LCMINV");
            print FH "STEP: Rollback N for INTRASW in table LCMINV - FAIL\n";
        } else {
            print FH "STEP: Rollback N for INTRASW in table LCMINV - PASS\n";
        }
    }

    close(FH);
    &ADQ767_cleanup();
    # check the result var to know the TC is passed or failed
    &ADQ767_checkResult($tcid, $result);
}

##################################################################################
sub AUTOLOAD {
  
    our $AUTOLOAD;
  
    my $warn = "$AUTOLOAD  ATTEMPT TO CALL $AUTOLOAD FAILED (INVALID TEST)";
  
    if( Log::Log4perl::initialized() ) {
        
        my $logger = Log::Log4perl->get_logger($AUTOLOAD);
        $logger->warn( $warn );
    }
    else {
        Log::Log4perl->easy_init($DEBUG);
        WARN($warn);
    }
}

1;